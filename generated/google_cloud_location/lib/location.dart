// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

/// The Google Cloud client for the Cloud Metadata API.
///
/// This API provides static metadata about Google Cloud Platform. Currently,
/// it only provides basic information about Google Cloud locations, such as
/// zones, regions, and countries.
library;

import 'package:google_cloud_protobuf/protobuf.dart';
import 'package:google_cloud_protobuf/src/encoding.dart';
import 'package:google_cloud_rpc/service_client.dart';
import 'package:http/http.dart' as http;

const _apiKeys = ['GOOGLE_API_KEY'];

/// An abstract interface that provides location-related information for
/// a service. Service-specific metadata is provided through the
/// `Location.metadata` field.
final class Locations {
  static const _host = 'cloud.googleapis.com';

  final ServiceClient _client;

  /// Creates a `Locations` using [client] for transport.
  ///
  /// The provided [http.Client] must be configured to provide whatever
  /// authentication is required by `Locations`. You can do that using
  /// [`package:googleapis_auth`](https://pub.dev/packages/googleapis_auth).
  Locations({required http.Client client})
    : _client = ServiceClient(client: client);

  /// Creates a `Locations` that does authentication through an API key.
  ///
  /// If called without arguments, the API key is taken from these environment
  /// variables:
  ///
  /// - `GOOGLE_API_KEY`
  ///
  /// Throws [ConfigurationException] if called without arguments and none of
  /// the above environment variables are set. On the web,
  /// always throws [ConfigurationException] if called without arguments.
  ///
  /// See [API Keys Overview](https://cloud.google.com/api-keys/docs/overview).
  factory Locations.fromApiKey([String? apiKey]) {
    return Locations(client: httpClientFromApiKey(apiKey, _apiKeys));
  }

  /// Lists information about the supported locations for this service.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] for any other failure.
  Future<ListLocationsResponse> listLocations(
    ListLocationsRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.name}', {
      if (request.filter.isNotDefault) 'filter': request.filter,
      if (request.pageSize.isNotDefault) 'pageSize': '${request.pageSize}',
      if (request.pageToken.isNotDefault) 'pageToken': request.pageToken,
    });
    final response = await _client.get(url);
    return ListLocationsResponse.fromJson(response);
  }

  /// Gets information about a location.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] for any other failure.
  Future<Location> getLocation(GetLocationRequest request) async {
    final url = Uri.https(_host, '/v1/${request.name}');
    final response = await _client.get(url);
    return Location.fromJson(response);
  }

  /// Closes the client and cleans up any resources associated with it.
  ///
  /// Once [close] is called, no other methods should be called.
  void close() => _client.close();
}

/// The request message for `Locations.ListLocations`.
final class ListLocationsRequest extends ProtoMessage {
  static const String fullyQualifiedName =
      'google.cloud.location.ListLocationsRequest';

  /// The resource that owns the locations collection, if applicable.
  final String name;

  /// The standard list filter.
  final String filter;

  /// The standard list page size.
  final int pageSize;

  /// The standard list page token.
  final String pageToken;

  ListLocationsRequest({
    this.name = '',
    this.filter = '',
    this.pageSize = 0,
    this.pageToken = '',
  }) : super(fullyQualifiedName);

  factory ListLocationsRequest.fromJson(Map<String, dynamic> json) {
    return ListLocationsRequest(
      name: json['name'] ?? '',
      filter: json['filter'] ?? '',
      pageSize: json['pageSize'] ?? 0,
      pageToken: json['pageToken'] ?? '',
    );
  }

  @override
  Object toJson() {
    return {
      if (name.isNotDefault) 'name': name,
      if (filter.isNotDefault) 'filter': filter,
      if (pageSize.isNotDefault) 'pageSize': pageSize,
      if (pageToken.isNotDefault) 'pageToken': pageToken,
    };
  }

  @override
  String toString() {
    final contents = [
      'name=$name',
      'filter=$filter',
      'pageSize=$pageSize',
      'pageToken=$pageToken',
    ].join(',');
    return 'ListLocationsRequest($contents)';
  }
}

/// The response message for `Locations.ListLocations`.
final class ListLocationsResponse extends ProtoMessage {
  static const String fullyQualifiedName =
      'google.cloud.location.ListLocationsResponse';

  /// A list of locations that matches the specified filter in the request.
  final List<Location> locations;

  /// The standard List next-page token.
  final String nextPageToken;

  ListLocationsResponse({this.locations = const [], this.nextPageToken = ''})
    : super(fullyQualifiedName);

  factory ListLocationsResponse.fromJson(Map<String, dynamic> json) {
    return ListLocationsResponse(
      locations: decodeListMessage(json['locations'], Location.fromJson) ?? [],
      nextPageToken: json['nextPageToken'] ?? '',
    );
  }

  @override
  Object toJson() {
    return {
      if (locations.isNotDefault) 'locations': encodeList(locations),
      if (nextPageToken.isNotDefault) 'nextPageToken': nextPageToken,
    };
  }

  @override
  String toString() {
    final contents = ['nextPageToken=$nextPageToken'].join(',');
    return 'ListLocationsResponse($contents)';
  }
}

/// The request message for `Locations.GetLocation`.
final class GetLocationRequest extends ProtoMessage {
  static const String fullyQualifiedName =
      'google.cloud.location.GetLocationRequest';

  /// Resource name for the location.
  final String name;

  GetLocationRequest({this.name = ''}) : super(fullyQualifiedName);

  factory GetLocationRequest.fromJson(Map<String, dynamic> json) {
    return GetLocationRequest(name: json['name'] ?? '');
  }

  @override
  Object toJson() {
    return {if (name.isNotDefault) 'name': name};
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'GetLocationRequest($contents)';
  }
}

/// A resource that represents Google Cloud Platform location.
final class Location extends ProtoMessage {
  static const String fullyQualifiedName = 'google.cloud.location.Location';

  /// Resource name for the location, which may vary between implementations.
  /// For example: `"projects/example-project/locations/us-east1"`
  final String name;

  /// The canonical id for this location. For example: `"us-east1"`.
  final String locationId;

  /// The friendly name for this location, typically a nearby city name.
  /// For example, "Tokyo".
  final String displayName;

  /// Cross-service attributes for the location. For example
  ///
  ///     {"cloud.googleapis.com/region": "us-east1"}
  final Map<String, String> labels;

  /// Service-specific metadata. For example the available capacity at the given
  /// location.
  final Any? metadata;

  Location({
    this.name = '',
    this.locationId = '',
    this.displayName = '',
    this.labels = const {},
    this.metadata,
  }) : super(fullyQualifiedName);

  factory Location.fromJson(Map<String, dynamic> json) {
    return Location(
      name: json['name'] ?? '',
      locationId: json['locationId'] ?? '',
      displayName: json['displayName'] ?? '',
      labels: decodeMap(json['labels']) ?? {},
      metadata: decode(json['metadata'], Any.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (name.isNotDefault) 'name': name,
      if (locationId.isNotDefault) 'locationId': locationId,
      if (displayName.isNotDefault) 'displayName': displayName,
      if (labels.isNotDefault) 'labels': labels,
      if (metadata != null) 'metadata': metadata!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [
      'name=$name',
      'locationId=$locationId',
      'displayName=$displayName',
    ].join(',');
    return 'Location($contents)';
  }
}
