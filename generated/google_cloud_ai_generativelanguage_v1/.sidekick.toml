# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[general]
specification-source = 'google/ai/generativelanguage/v1'
service-config = 'google/ai/generativelanguage/v1/generativelanguage_v1.yaml'

[codec]
copyright-year = '2025'
readme-after-title-text = '''
> [!TIP] Flutter applications should use Firebase AI Logic.
>
> The Generative Language API is meant for Dart command-line, cloud, and server applications.
> For mobile and web applications, see instead
> [Firebase AI Logic](https://firebase.google.com/products/firebase-ai-logic), which provides
> client-side access to both the Gemini Developer API and Vertex AI.'''

readme-quickstart-text = '''
## Quickstart

This quickstart shows you how to install the package and make your first
Gemini API request.

## Before you begin

You need a Gemini API key. If you don't already have one, you can get it for
free in [Google AI Studio](https://aistudio.google.com/app/api-keys)
([step-by-step instructions](https://ai.google.dev/gemini-api/docs/api-key)).

## Installing the package into your application

> [!TIP] You can create a skeleton application by running the terminal command:
> `dart create myapp`

Run the terminal command:

```sh
dart pub add google_cloud_ai_generativelanguage_v1
```

## Make your first request

Here is an example that uses the generateContent method to send a request to
the Gemini API using the Gemini 2.5 Flash model.

If you set your API key as the environment variable `GEMINI_API_KEY` or
`GOOGLE_API_KEY`, the API key will be picked up automatically by the client
when using the Gemini API libraries. Otherwise you will need to pass your
API key as an argument when initializing the client.

```dart
import 'package:google_cloud_ai_generativelanguage_v1/generativelanguage.dart';

void main() async {
  // Pass your API key here if the GEMINI_API_KEY environment variable is not set.
  final service = GenerativeService.fromApiKey();

  final request = GenerateContentRequest(
    model: 'models/gemini-2.5-flash',
    contents: [
      Content(parts: [Part(text: "Explain how AI works in a few words")]),
    ],
  );

  final result = await service.generateContent(request);
  final textResponse = result.candidates?[0].content?.parts?[0].text;
  if (textResponse == null) {
    print('<No textual response>');
  } else {
    print(textResponse);
  }

  service.close();
}
```'''
