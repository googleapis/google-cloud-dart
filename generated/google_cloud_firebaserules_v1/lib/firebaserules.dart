// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

/// The Google Cloud client for the Firebase Rules API.
///
/// Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request.
library;

import 'package:google_cloud_gax/gax.dart';
import 'package:google_cloud_gax/src/encoding.dart';
import 'package:google_cloud_protobuf/protobuf.dart';
import 'package:googleapis_auth/auth_io.dart' as auth;
import 'package:http/http.dart' as http;

const _apiKeys = ["GOOGLE_API_KEY"];

/// Service for the `projects` resource.
final class Projects {
  static const _host = 'firebaserules.googleapis.com';
  final ServiceClient _client;

  Projects({required http.Client client})
    : _client = ServiceClient(client: client);

  factory Projects.fromApiKey([String? apiKey]) {
    apiKey ??= _apiKeys.map(environmentVariable).nonNulls.firstOrNull;
    if (apiKey == null) {
      throw ArgumentError(
        'apiKey or one of these environment variables must '
        'be set to an API key: ${_apiKeys.join(", ")}',
      );
    }
    return Projects(client: auth.clientViaApiKey(apiKey));
  }

  /// Test `Source` for syntactic and semantic correctness. Issues present, if any, will be returned to the caller with a description, severity, and source location. The test method may be executed with `Source` or a `Ruleset` name. Passing `Source` is useful for unit testing new rules. Passing a `Ruleset` name is useful for regression testing an existing rule. The following is an example of `Source` that permits users to upload images to a bucket bearing their user id and matching the correct metadata: _*Example*_ // Users are allowed to subscribe and unsubscribe to the blog. service firebase.storage { match /users/{userId}/images/{imageName} { allow write: if userId == request.auth.uid && (imageName.matches('*.png$') || imageName.matches('*.jpg$')) && resource.mimeType.matches('^image/') } }
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<TestRulesetResponse> test(Projects_TestRequest request) async {
    final url = Uri.https(_host, '/v1/${request.name}/test');
    final response = await _client.post(url, body: request.body);
    return TestRulesetResponse.fromJson(response);
  }

  /// Closes the client and cleans up any resources associated with it.
  ///
  /// Once [close] is called, no other methods should be called.
  void close() => _client.close();
}

/// Service for the `releases` resource.
final class Releases {
  static const _host = 'firebaserules.googleapis.com';
  final ServiceClient _client;

  Releases({required http.Client client})
    : _client = ServiceClient(client: client);

  factory Releases.fromApiKey([String? apiKey]) {
    apiKey ??= _apiKeys.map(environmentVariable).nonNulls.firstOrNull;
    if (apiKey == null) {
      throw ArgumentError(
        'apiKey or one of these environment variables must '
        'be set to an API key: ${_apiKeys.join(", ")}',
      );
    }
    return Releases(client: auth.clientViaApiKey(apiKey));
  }

  /// Create a `Release`. Release names should reflect the developer's deployment practices. For example, the release name may include the environment name, application name, application version, or any other name meaningful to the developer. Once a `Release` refers to a `Ruleset`, the rules can be enforced by Firebase Rules-enabled services. More than one `Release` may be 'live' concurrently. Consider the following three `Release` names for `projects/foo` and the `Ruleset` to which they refer. Release Name -> Ruleset Name * projects/foo/releases/prod -> projects/foo/rulesets/uuid123 * projects/foo/releases/prod/beta -> projects/foo/rulesets/uuid123 * projects/foo/releases/prod/v23 -> projects/foo/rulesets/uuid456 The relationships reflect a `Ruleset` rollout in progress. The `prod` and `prod/beta` releases refer to the same `Ruleset`. However, `prod/v23` refers to a new `Ruleset`. The `Ruleset` reference for a `Release` may be updated using the UpdateRelease method.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<Release> create(Releases_CreateRequest request) async {
    final url = Uri.https(_host, '/v1/${request.name}/releases');
    final response = await _client.post(url, body: request.body);
    return Release.fromJson(response);
  }

  /// Delete a `Release` by resource name.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<Empty> delete(Releases_DeleteRequest request) async {
    final url = Uri.https(_host, '/v1/${request.name}');
    final response = await _client.delete(url);
    return Empty.fromJson(response);
  }

  /// Get a `Release` by name.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<Release> get(Releases_GetRequest request) async {
    final url = Uri.https(_host, '/v1/${request.name}');
    final response = await _client.get(url);
    return Release.fromJson(response);
  }

  /// Get the `Release` executable to use when enforcing rules.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GetReleaseExecutableResponse> getExecutable(
    Releases_GetExecutableRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.name}/getExecutable', {
      if (request.executableVersion != null)
        'executableVersion': request.executableVersion!.value,
    });
    final response = await _client.get(url);
    return GetReleaseExecutableResponse.fromJson(response);
  }

  /// List the `Release` values for a project. This list may optionally be filtered by `Release` name, `Ruleset` name, `TestSuite` name, or any combination thereof.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<ListReleasesResponse> list(Releases_ListRequest request) async {
    final url = Uri.https(_host, '/v1/${request.name}/releases', {
      if (request.filter != null) 'filter': request.filter!,
      if (request.pageSize != null) 'pageSize': '${request.pageSize}',
      if (request.pageToken != null) 'pageToken': request.pageToken!,
    });
    final response = await _client.get(url);
    return ListReleasesResponse.fromJson(response);
  }

  /// Update a `Release` via PATCH. Only updates to `ruleset_name` will be honored. `Release` rename is not supported. To create a `Release` use the CreateRelease method.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<Release> patch(Releases_PatchRequest request) async {
    final url = Uri.https(_host, '/v1/${request.name}');
    final response = await _client.patch(url, body: request.body);
    return Release.fromJson(response);
  }

  /// Closes the client and cleans up any resources associated with it.
  ///
  /// Once [close] is called, no other methods should be called.
  void close() => _client.close();
}

/// Service for the `rulesets` resource.
final class Rulesets {
  static const _host = 'firebaserules.googleapis.com';
  final ServiceClient _client;

  Rulesets({required http.Client client})
    : _client = ServiceClient(client: client);

  factory Rulesets.fromApiKey([String? apiKey]) {
    apiKey ??= _apiKeys.map(environmentVariable).nonNulls.firstOrNull;
    if (apiKey == null) {
      throw ArgumentError(
        'apiKey or one of these environment variables must '
        'be set to an API key: ${_apiKeys.join(", ")}',
      );
    }
    return Rulesets(client: auth.clientViaApiKey(apiKey));
  }

  /// Create a `Ruleset` from `Source`. The `Ruleset` is given a unique generated name which is returned to the caller. `Source` containing syntactic or semantics errors will result in an error response indicating the first error encountered. For a detailed view of `Source` issues, use TestRuleset.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<Ruleset> create(Rulesets_CreateRequest request) async {
    final url = Uri.https(_host, '/v1/${request.name}/rulesets');
    final response = await _client.post(url, body: request.body);
    return Ruleset.fromJson(response);
  }

  /// Delete a `Ruleset` by resource name. If the `Ruleset` is referenced by a `Release` the operation will fail.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<Empty> delete(Rulesets_DeleteRequest request) async {
    final url = Uri.https(_host, '/v1/${request.name}');
    final response = await _client.delete(url);
    return Empty.fromJson(response);
  }

  /// Get a `Ruleset` by name including the full `Source` contents.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<Ruleset> get(Rulesets_GetRequest request) async {
    final url = Uri.https(_host, '/v1/${request.name}');
    final response = await _client.get(url);
    return Ruleset.fromJson(response);
  }

  /// List `Ruleset` metadata only and optionally filter the results by `Ruleset` name. The full `Source` contents of a `Ruleset` may be retrieved with GetRuleset.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<ListRulesetsResponse> list(Rulesets_ListRequest request) async {
    final url = Uri.https(_host, '/v1/${request.name}/rulesets', {
      if (request.filter != null) 'filter': request.filter!,
      if (request.pageSize != null) 'pageSize': '${request.pageSize}',
      if (request.pageToken != null) 'pageToken': request.pageToken!,
    });
    final response = await _client.get(url);
    return ListRulesetsResponse.fromJson(response);
  }

  /// Closes the client and cleans up any resources associated with it.
  ///
  /// Once [close] is called, no other methods should be called.
  void close() => _client.close();
}

/// Arg matchers for the mock function.
final class Arg extends ProtoMessage {
  static const String fullyQualifiedName = '.Arg';

  /// Argument matches any value provided.
  final Empty? anyValue;

  /// Argument exactly matches value provided.
  final Value? exactValue;

  Arg({this.anyValue, this.exactValue}) : super(fullyQualifiedName);

  factory Arg.fromJson(Map<String, dynamic> json) {
    return Arg(
      anyValue: decode(json['anyValue'], Empty.fromJson),
      exactValue: decodeCustom(json['exactValue'], Value.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (anyValue != null) 'anyValue': anyValue!.toJson(),
      if (exactValue != null) 'exactValue': exactValue!.toJson(),
    };
  }

  @override
  String toString() => 'Arg()';
}

/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
final class Empty extends ProtoMessage {
  static const String fullyQualifiedName = '.Empty';

  Empty() : super(fullyQualifiedName);

  factory Empty.fromJson(Map<String, dynamic> json) {
    return Empty();
  }

  @override
  Object toJson() {
    return {};
  }

  @override
  String toString() => 'Empty()';
}

/// Describes where in a file an expression is found and what it was evaluated to over the course of its use.
final class ExpressionReport extends ProtoMessage {
  static const String fullyQualifiedName = '.ExpressionReport';

  /// Subexpressions
  final List<ExpressionReport>? children;

  /// Position of expression in original rules source.
  final SourcePosition? sourcePosition;

  /// Values that this expression evaluated to when encountered.
  final List<ValueCount>? values;

  ExpressionReport({this.children, this.sourcePosition, this.values})
    : super(fullyQualifiedName);

  factory ExpressionReport.fromJson(Map<String, dynamic> json) {
    return ExpressionReport(
      children: decodeListMessage(json['children'], ExpressionReport.fromJson),
      sourcePosition: decode(json['sourcePosition'], SourcePosition.fromJson),
      values: decodeListMessage(json['values'], ValueCount.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (children != null) 'children': encodeList(children),
      if (sourcePosition != null) 'sourcePosition': sourcePosition!.toJson(),
      if (values != null) 'values': encodeList(values),
    };
  }

  @override
  String toString() => 'ExpressionReport()';
}

/// `File` containing source content.
final class File extends ProtoMessage {
  static const String fullyQualifiedName = '.File';

  /// Required. Textual Content.
  final String? content;

  /// Fingerprint (e.g. github sha) associated with the `File`.
  final Uint8List? fingerprint;

  /// Required. File name.
  final String? name;

  File({this.content, this.fingerprint, this.name}) : super(fullyQualifiedName);

  factory File.fromJson(Map<String, dynamic> json) {
    return File(
      content: json['content'],
      fingerprint: decodeBytes(json['fingerprint']),
      name: json['name'],
    );
  }

  @override
  Object toJson() {
    return {
      if (content != null) 'content': content,
      if (fingerprint != null) 'fingerprint': encodeBytes(fingerprint),
      if (name != null) 'name': name,
    };
  }

  @override
  String toString() {
    final contents = [
      if (content != null) 'content=$content',
      if (fingerprint != null) 'fingerprint=$fingerprint',
      if (name != null) 'name=$name',
    ].join(',');
    return 'File($contents)';
  }
}

/// Represents a service-defined function call that was invoked during test execution.
final class FunctionCall extends ProtoMessage {
  static const String fullyQualifiedName = '.FunctionCall';

  /// The arguments that were provided to the function.
  final List<Value>? args;

  /// Name of the function invoked.
  final String? function;

  FunctionCall({this.args, this.function}) : super(fullyQualifiedName);

  factory FunctionCall.fromJson(Map<String, dynamic> json) {
    return FunctionCall(
      args: decodeListMessageCustom(json['args'], Value.fromJson),
      function: json['function'],
    );
  }

  @override
  Object toJson() {
    return {
      if (args != null) 'args': encodeList(args),
      if (function != null) 'function': function,
    };
  }

  @override
  String toString() {
    final contents = [if (function != null) 'function=$function'].join(',');
    return 'FunctionCall($contents)';
  }
}

/// Mock function definition. Mocks must refer to a function declared by the target service. The type of the function args and result will be inferred at test time. If either the arg or result values are not compatible with function type declaration, the request will be considered invalid. More than one `FunctionMock` may be provided for a given function name so long as the `Arg` matchers are distinct. There may be only one function for a given overload where all `Arg` values are `Arg.any_value`.
final class FunctionMock extends ProtoMessage {
  static const String fullyQualifiedName = '.FunctionMock';

  /// The list of `Arg` values to match. The order in which the arguments are provided is the order in which they must appear in the function invocation.
  final List<Arg>? args;

  /// The name of the function. The function name must match one provided by a service declaration.
  final String? function;

  /// The mock result of the function call.
  final Result? result;

  FunctionMock({this.args, this.function, this.result})
    : super(fullyQualifiedName);

  factory FunctionMock.fromJson(Map<String, dynamic> json) {
    return FunctionMock(
      args: decodeListMessage(json['args'], Arg.fromJson),
      function: json['function'],
      result: decode(json['result'], Result.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (args != null) 'args': encodeList(args),
      if (function != null) 'function': function,
      if (result != null) 'result': result!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [if (function != null) 'function=$function'].join(',');
    return 'FunctionMock($contents)';
  }
}

/// The response for FirebaseRulesService.GetReleaseExecutable
final class GetReleaseExecutableResponse extends ProtoMessage {
  static const String fullyQualifiedName = '.GetReleaseExecutableResponse';

  /// Executable view of the `Ruleset` referenced by the `Release`.
  final Uint8List? executable;

  /// The Rules runtime version of the executable.
  final GetReleaseExecutableResponse_ExecutableVersion? executableVersion;

  /// `Language` used to generate the executable bytes.
  final GetReleaseExecutableResponse_Language? language;

  /// `Ruleset` name associated with the `Release` executable.
  final String? rulesetName;

  /// Optional, indicates the freshness of the result. The response is guaranteed to be the latest within an interval up to the sync_time (inclusive).
  final Timestamp? syncTime;

  /// Timestamp for the most recent `Release.update_time`.
  final Timestamp? updateTime;

  GetReleaseExecutableResponse({
    this.executable,
    this.executableVersion,
    this.language,
    this.rulesetName,
    this.syncTime,
    this.updateTime,
  }) : super(fullyQualifiedName);

  factory GetReleaseExecutableResponse.fromJson(Map<String, dynamic> json) {
    return GetReleaseExecutableResponse(
      executable: decodeBytes(json['executable']),
      executableVersion: decodeEnum(
        json['executableVersion'],
        GetReleaseExecutableResponse_ExecutableVersion.fromJson,
      ),
      language: decodeEnum(
        json['language'],
        GetReleaseExecutableResponse_Language.fromJson,
      ),
      rulesetName: json['rulesetName'],
      syncTime: decodeCustom(json['syncTime'], Timestamp.fromJson),
      updateTime: decodeCustom(json['updateTime'], Timestamp.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (executable != null) 'executable': encodeBytes(executable),
      if (executableVersion != null)
        'executableVersion': executableVersion!.toJson(),
      if (language != null) 'language': language!.toJson(),
      if (rulesetName != null) 'rulesetName': rulesetName,
      if (syncTime != null) 'syncTime': syncTime!.toJson(),
      if (updateTime != null) 'updateTime': updateTime!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [
      if (executable != null) 'executable=$executable',
      if (executableVersion != null) 'executableVersion=$executableVersion',
      if (language != null) 'language=$language',
      if (rulesetName != null) 'rulesetName=$rulesetName',
    ].join(',');
    return 'GetReleaseExecutableResponse($contents)';
  }
}

/// The enumerated type for the `executableVersion` field.
final class GetReleaseExecutableResponse_ExecutableVersion extends ProtoEnum {
  /// Executable format unspecified. Defaults to FIREBASE_RULES_EXECUTABLE_V1
  static const releaseExecutableVersionUnspecified =
      GetReleaseExecutableResponse_ExecutableVersion(
        'RELEASE_EXECUTABLE_VERSION_UNSPECIFIED',
      );

  /// Firebase Rules syntax 'rules2' executable versions: Custom AST for use with Java clients.
  static const firebaseRulesExecutableV1 =
      GetReleaseExecutableResponse_ExecutableVersion(
        'FIREBASE_RULES_EXECUTABLE_V1',
      );

  /// CEL-based executable for use with C++ clients.
  static const firebaseRulesExecutableV2 =
      GetReleaseExecutableResponse_ExecutableVersion(
        'FIREBASE_RULES_EXECUTABLE_V2',
      );

  const GetReleaseExecutableResponse_ExecutableVersion(super.value);

  factory GetReleaseExecutableResponse_ExecutableVersion.fromJson(
    String json,
  ) => GetReleaseExecutableResponse_ExecutableVersion(json);

  @override
  String toString() => 'executableVersion.$value';
}

/// The enumerated type for the `language` field.
final class GetReleaseExecutableResponse_Language extends ProtoEnum {
  /// Language unspecified. Defaults to FIREBASE_RULES.
  static const languageUnspecified = GetReleaseExecutableResponse_Language(
    'LANGUAGE_UNSPECIFIED',
  );

  /// Firebase Rules language.
  static const firebaseRules = GetReleaseExecutableResponse_Language(
    'FIREBASE_RULES',
  );

  /// Event Flow triggers.
  static const eventFlowTriggers = GetReleaseExecutableResponse_Language(
    'EVENT_FLOW_TRIGGERS',
  );

  const GetReleaseExecutableResponse_Language(super.value);

  factory GetReleaseExecutableResponse_Language.fromJson(String json) =>
      GetReleaseExecutableResponse_Language(json);

  @override
  String toString() => 'language.$value';
}

/// Issues include warnings, errors, and deprecation notices.
final class Issue extends ProtoMessage {
  static const String fullyQualifiedName = '.Issue';

  /// Short error description.
  final String? description;

  /// The severity of the issue.
  final Issue_Severity? severity;

  /// Position of the issue in the `Source`.
  final SourcePosition? sourcePosition;

  Issue({this.description, this.severity, this.sourcePosition})
    : super(fullyQualifiedName);

  factory Issue.fromJson(Map<String, dynamic> json) {
    return Issue(
      description: json['description'],
      severity: decodeEnum(json['severity'], Issue_Severity.fromJson),
      sourcePosition: decode(json['sourcePosition'], SourcePosition.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (description != null) 'description': description,
      if (severity != null) 'severity': severity!.toJson(),
      if (sourcePosition != null) 'sourcePosition': sourcePosition!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [
      if (description != null) 'description=$description',
      if (severity != null) 'severity=$severity',
    ].join(',');
    return 'Issue($contents)';
  }
}

/// The enumerated type for the `severity` field.
final class Issue_Severity extends ProtoEnum {
  /// An unspecified severity.
  static const severityUnspecified = Issue_Severity('SEVERITY_UNSPECIFIED');

  /// Deprecation issue for statements and method that may no longer be supported or maintained.
  static const deprecation = Issue_Severity('DEPRECATION');

  /// Warnings such as: unused variables.
  static const warning = Issue_Severity('WARNING');

  /// Errors such as: unmatched curly braces or variable redefinition.
  static const error = Issue_Severity('ERROR');

  const Issue_Severity(super.value);

  factory Issue_Severity.fromJson(String json) => Issue_Severity(json);

  @override
  String toString() => 'severity.$value';
}

/// The response for FirebaseRulesService.ListReleases.
final class ListReleasesResponse extends ProtoMessage {
  static const String fullyQualifiedName = '.ListReleasesResponse';

  /// The pagination token to retrieve the next page of results. If the value is empty, no further results remain.
  final String? nextPageToken;

  /// List of `Release` instances.
  final List<Release>? releases;

  ListReleasesResponse({this.nextPageToken, this.releases})
    : super(fullyQualifiedName);

  factory ListReleasesResponse.fromJson(Map<String, dynamic> json) {
    return ListReleasesResponse(
      nextPageToken: json['nextPageToken'],
      releases: decodeListMessage(json['releases'], Release.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (nextPageToken != null) 'nextPageToken': nextPageToken,
      if (releases != null) 'releases': encodeList(releases),
    };
  }

  @override
  String toString() {
    final contents = [
      if (nextPageToken != null) 'nextPageToken=$nextPageToken',
    ].join(',');
    return 'ListReleasesResponse($contents)';
  }
}

/// The response for FirebaseRulesService.ListRulesets.
final class ListRulesetsResponse extends ProtoMessage {
  static const String fullyQualifiedName = '.ListRulesetsResponse';

  /// The pagination token to retrieve the next page of results. If the value is empty, no further results remain.
  final String? nextPageToken;

  /// List of `Ruleset` instances.
  final List<Ruleset>? rulesets;

  ListRulesetsResponse({this.nextPageToken, this.rulesets})
    : super(fullyQualifiedName);

  factory ListRulesetsResponse.fromJson(Map<String, dynamic> json) {
    return ListRulesetsResponse(
      nextPageToken: json['nextPageToken'],
      rulesets: decodeListMessage(json['rulesets'], Ruleset.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (nextPageToken != null) 'nextPageToken': nextPageToken,
      if (rulesets != null) 'rulesets': encodeList(rulesets),
    };
  }

  @override
  String toString() {
    final contents = [
      if (nextPageToken != null) 'nextPageToken=$nextPageToken',
    ].join(',');
    return 'ListRulesetsResponse($contents)';
  }
}

/// Metadata for a Ruleset.
final class Metadata extends ProtoMessage {
  static const String fullyQualifiedName = '.Metadata';

  /// Services that this ruleset has declarations for (e.g., "cloud.firestore"). There may be 0+ of these.
  final List<String>? services;

  Metadata({this.services}) : super(fullyQualifiedName);

  factory Metadata.fromJson(Map<String, dynamic> json) {
    return Metadata(services: decodeList(json['services']));
  }

  @override
  Object toJson() {
    return {if (services != null) 'services': services};
  }

  @override
  String toString() => 'Metadata()';
}

/// `Release` is a named reference to a `Ruleset`. Once a `Release` refers to a `Ruleset`, rules-enabled services will be able to enforce the `Ruleset`.
final class Release extends ProtoMessage {
  static const String fullyQualifiedName = '.Release';

  /// Output only. Time the release was created.
  final Timestamp? createTime;

  /// Required. Format: `projects/{project_id}/releases/{release_id}`
  final String? name;

  /// Required. Name of the `Ruleset` referred to by this `Release`. The `Ruleset` must exist for the `Release` to be created.
  final String? rulesetName;

  /// Output only. Time the release was updated.
  final Timestamp? updateTime;

  Release({this.createTime, this.name, this.rulesetName, this.updateTime})
    : super(fullyQualifiedName);

  factory Release.fromJson(Map<String, dynamic> json) {
    return Release(
      createTime: decodeCustom(json['createTime'], Timestamp.fromJson),
      name: json['name'],
      rulesetName: json['rulesetName'],
      updateTime: decodeCustom(json['updateTime'], Timestamp.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (createTime != null) 'createTime': createTime!.toJson(),
      if (name != null) 'name': name,
      if (rulesetName != null) 'rulesetName': rulesetName,
      if (updateTime != null) 'updateTime': updateTime!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [
      if (name != null) 'name=$name',
      if (rulesetName != null) 'rulesetName=$rulesetName',
    ].join(',');
    return 'Release($contents)';
  }
}

/// Possible result values from the function mock invocation.
final class Result extends ProtoMessage {
  static const String fullyQualifiedName = '.Result';

  /// The result is undefined, meaning the result could not be computed.
  final Empty? undefined;

  /// The result is an actual value. The type of the value must match that of the type declared by the service.
  final Value? value;

  Result({this.undefined, this.value}) : super(fullyQualifiedName);

  factory Result.fromJson(Map<String, dynamic> json) {
    return Result(
      undefined: decode(json['undefined'], Empty.fromJson),
      value: decodeCustom(json['value'], Value.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (undefined != null) 'undefined': undefined!.toJson(),
      if (value != null) 'value': value!.toJson(),
    };
  }

  @override
  String toString() => 'Result()';
}

/// `Ruleset` is an immutable copy of `Source` with a globally unique identifier and a creation time.
final class Ruleset extends ProtoMessage {
  static const String fullyQualifiedName = '.Ruleset';

  /// Immutable. Intended resource to which this Ruleset should be released. May be left blank to signify the resource associated with the default release. Expected format: firestore.googleapis.com/projects//databases/
  final String? attachmentPoint;

  /// Output only. Time the `Ruleset` was created.
  final Timestamp? createTime;

  /// Output only. The metadata for this ruleset.
  final Metadata? metadata;

  /// Output only. Name of the `Ruleset`. The ruleset_id is auto generated by the service. Format: `projects/{project_id}/rulesets/{ruleset_id}`
  final String? name;

  /// Required. `Source` for the `Ruleset`.
  final Source? source;

  Ruleset({
    this.attachmentPoint,
    this.createTime,
    this.metadata,
    this.name,
    this.source,
  }) : super(fullyQualifiedName);

  factory Ruleset.fromJson(Map<String, dynamic> json) {
    return Ruleset(
      attachmentPoint: json['attachmentPoint'],
      createTime: decodeCustom(json['createTime'], Timestamp.fromJson),
      metadata: decode(json['metadata'], Metadata.fromJson),
      name: json['name'],
      source: decode(json['source'], Source.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (attachmentPoint != null) 'attachmentPoint': attachmentPoint,
      if (createTime != null) 'createTime': createTime!.toJson(),
      if (metadata != null) 'metadata': metadata!.toJson(),
      if (name != null) 'name': name,
      if (source != null) 'source': source!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [
      if (attachmentPoint != null) 'attachmentPoint=$attachmentPoint',
      if (name != null) 'name=$name',
    ].join(',');
    return 'Ruleset($contents)';
  }
}

/// `Source` is one or more `File` messages comprising a logical set of rules.
final class Source extends ProtoMessage {
  static const String fullyQualifiedName = '.Source';

  /// Required. `File` set constituting the `Source` bundle.
  final List<File>? files;

  Source({this.files}) : super(fullyQualifiedName);

  factory Source.fromJson(Map<String, dynamic> json) {
    return Source(files: decodeListMessage(json['files'], File.fromJson));
  }

  @override
  Object toJson() {
    return {if (files != null) 'files': encodeList(files)};
  }

  @override
  String toString() => 'Source()';
}

/// Position in the `Source` content including its line, column number, and an index of the `File` in the `Source` message. Used for debug purposes.
final class SourcePosition extends ProtoMessage {
  static const String fullyQualifiedName = '.SourcePosition';

  /// First column on the source line associated with the source fragment.
  final int? column;

  /// Start position relative to the beginning of the file.
  final int? currentOffset;

  /// End position relative to the beginning of the file.
  final int? endOffset;

  /// Name of the `File`.
  final String? fileName;

  /// Line number of the source fragment. 1-based.
  final int? line;

  SourcePosition({
    this.column,
    this.currentOffset,
    this.endOffset,
    this.fileName,
    this.line,
  }) : super(fullyQualifiedName);

  factory SourcePosition.fromJson(Map<String, dynamic> json) {
    return SourcePosition(
      column: json['column'],
      currentOffset: json['currentOffset'],
      endOffset: json['endOffset'],
      fileName: json['fileName'],
      line: json['line'],
    );
  }

  @override
  Object toJson() {
    return {
      if (column != null) 'column': column,
      if (currentOffset != null) 'currentOffset': currentOffset,
      if (endOffset != null) 'endOffset': endOffset,
      if (fileName != null) 'fileName': fileName,
      if (line != null) 'line': line,
    };
  }

  @override
  String toString() {
    final contents = [
      if (column != null) 'column=$column',
      if (currentOffset != null) 'currentOffset=$currentOffset',
      if (endOffset != null) 'endOffset=$endOffset',
      if (fileName != null) 'fileName=$fileName',
      if (line != null) 'line=$line',
    ].join(',');
    return 'SourcePosition($contents)';
  }
}

/// `TestCase` messages provide the request context and an expectation as to whether the given context will be allowed or denied. Test cases may specify the `request`, `resource`, and `function_mocks` to mock a function call to a service-provided function. The `request` object represents context present at request-time. The `resource` is the value of the target resource as it appears in persistent storage before the request is executed.
final class TestCase extends ProtoMessage {
  static const String fullyQualifiedName = '.TestCase';

  /// Test expectation.
  final TestCase_Expectation? expectation;

  /// Specifies what should be included in the response.
  final TestCase_ExpressionReportLevel? expressionReportLevel;

  /// Optional function mocks for service-defined functions. If not set, any service defined function is expected to return an error, which may or may not influence the test outcome.
  final List<FunctionMock>? functionMocks;

  /// Specifies whether paths (such as request.path) are encoded and how.
  final TestCase_PathEncoding? pathEncoding;

  /// Request context. The exact format of the request context is service-dependent. See the appropriate service documentation for information about the supported fields and types on the request. Minimally, all services support the following fields and types: Request field | Type ---------------|----------------- auth.uid | `string` auth.token | `map` headers | `map` method | `string` params | `map` path | `string` time | `google.protobuf.Timestamp` If the request value is not well-formed for the service, the request will be rejected as an invalid argument.
  final Value? request;

  /// Optional resource value as it appears in persistent storage before the request is fulfilled. The resource type depends on the `request.path` value.
  final Value? resource;

  TestCase({
    this.expectation,
    this.expressionReportLevel,
    this.functionMocks,
    this.pathEncoding,
    this.request,
    this.resource,
  }) : super(fullyQualifiedName);

  factory TestCase.fromJson(Map<String, dynamic> json) {
    return TestCase(
      expectation: decodeEnum(
        json['expectation'],
        TestCase_Expectation.fromJson,
      ),
      expressionReportLevel: decodeEnum(
        json['expressionReportLevel'],
        TestCase_ExpressionReportLevel.fromJson,
      ),
      functionMocks: decodeListMessage(
        json['functionMocks'],
        FunctionMock.fromJson,
      ),
      pathEncoding: decodeEnum(
        json['pathEncoding'],
        TestCase_PathEncoding.fromJson,
      ),
      request: decodeCustom(json['request'], Value.fromJson),
      resource: decodeCustom(json['resource'], Value.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (expectation != null) 'expectation': expectation!.toJson(),
      if (expressionReportLevel != null)
        'expressionReportLevel': expressionReportLevel!.toJson(),
      if (functionMocks != null) 'functionMocks': encodeList(functionMocks),
      if (pathEncoding != null) 'pathEncoding': pathEncoding!.toJson(),
      if (request != null) 'request': request!.toJson(),
      if (resource != null) 'resource': resource!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [
      if (expectation != null) 'expectation=$expectation',
      if (expressionReportLevel != null)
        'expressionReportLevel=$expressionReportLevel',
      if (pathEncoding != null) 'pathEncoding=$pathEncoding',
    ].join(',');
    return 'TestCase($contents)';
  }
}

/// The enumerated type for the `expectation` field.
final class TestCase_Expectation extends ProtoEnum {
  /// Unspecified expectation.
  static const expectationUnspecified = TestCase_Expectation(
    'EXPECTATION_UNSPECIFIED',
  );

  /// Expect an allowed result.
  static const allow = TestCase_Expectation('ALLOW');

  /// Expect a denied result.
  static const deny = TestCase_Expectation('DENY');

  const TestCase_Expectation(super.value);

  factory TestCase_Expectation.fromJson(String json) =>
      TestCase_Expectation(json);

  @override
  String toString() => 'expectation.$value';
}

/// The enumerated type for the `expressionReportLevel` field.
final class TestCase_ExpressionReportLevel extends ProtoEnum {
  /// No level has been specified. Defaults to "NONE" behavior.
  static const levelUnspecified = TestCase_ExpressionReportLevel(
    'LEVEL_UNSPECIFIED',
  );

  /// Do not include any additional information.
  static const none = TestCase_ExpressionReportLevel('NONE');

  /// Include detailed reporting on expressions evaluated.
  static const full = TestCase_ExpressionReportLevel('FULL');

  /// Only include the expressions that were visited during evaluation.
  static const visited = TestCase_ExpressionReportLevel('VISITED');

  const TestCase_ExpressionReportLevel(super.value);

  factory TestCase_ExpressionReportLevel.fromJson(String json) =>
      TestCase_ExpressionReportLevel(json);

  @override
  String toString() => 'expressionReportLevel.$value';
}

/// The enumerated type for the `pathEncoding` field.
final class TestCase_PathEncoding extends ProtoEnum {
  /// No encoding has been specified. Defaults to "URL_ENCODED" behavior.
  static const encodingUnspecified = TestCase_PathEncoding(
    'ENCODING_UNSPECIFIED',
  );

  /// Treats path segments as URL encoded but with non-encoded separators ("/"). This is the default behavior.
  static const urlEncoded = TestCase_PathEncoding('URL_ENCODED');

  /// Treats total path as non-URL encoded e.g. raw.
  static const plain = TestCase_PathEncoding('PLAIN');

  const TestCase_PathEncoding(super.value);

  factory TestCase_PathEncoding.fromJson(String json) =>
      TestCase_PathEncoding(json);

  @override
  String toString() => 'pathEncoding.$value';
}

/// Test result message containing the state of the test as well as a description and source position for test failures.
final class TestResult extends ProtoMessage {
  static const String fullyQualifiedName = '.TestResult';

  /// Debug messages related to test execution issues encountered during evaluation. Debug messages may be related to too many or too few invocations of function mocks or to runtime errors that occur during evaluation. For example: ```Unable to read variable [name: "resource"]```
  final List<String>? debugMessages;

  /// Position in the `Source` or `Ruleset` where the principle runtime error occurs. Evaluation of an expression may result in an error. Rules are deny by default, so a `DENY` expectation when an error is generated is valid. When there is a `DENY` with an error, the `SourcePosition` is returned. E.g. `error_position { line: 19 column: 37 }`
  final SourcePosition? errorPosition;

  /// The mapping from expression in the ruleset AST to the values they were evaluated to. Partially-nested to mirror AST structure. Note that this field is actually tracking expressions and not permission statements in contrast to the "visited_expressions" field above. Literal expressions are omitted.
  final List<ExpressionReport>? expressionReports;

  /// The set of function calls made to service-defined methods. Function calls are included in the order in which they are encountered during evaluation, are provided for both mocked and unmocked functions, and included on the response regardless of the test `state`.
  final List<FunctionCall>? functionCalls;

  /// State of the test.
  final TestResult_State? state;

  /// The set of visited permission expressions for a given test. This returns the positions and evaluation results of all visited permission expressions which were relevant to the test case, e.g. ``` match /path { allow read if: } ``` For a detailed report of the intermediate evaluation states, see the `expression_reports` field
  final List<VisitedExpression>? visitedExpressions;

  TestResult({
    this.debugMessages,
    this.errorPosition,
    this.expressionReports,
    this.functionCalls,
    this.state,
    this.visitedExpressions,
  }) : super(fullyQualifiedName);

  factory TestResult.fromJson(Map<String, dynamic> json) {
    return TestResult(
      debugMessages: decodeList(json['debugMessages']),
      errorPosition: decode(json['errorPosition'], SourcePosition.fromJson),
      expressionReports: decodeListMessage(
        json['expressionReports'],
        ExpressionReport.fromJson,
      ),
      functionCalls: decodeListMessage(
        json['functionCalls'],
        FunctionCall.fromJson,
      ),
      state: decodeEnum(json['state'], TestResult_State.fromJson),
      visitedExpressions: decodeListMessage(
        json['visitedExpressions'],
        VisitedExpression.fromJson,
      ),
    );
  }

  @override
  Object toJson() {
    return {
      if (debugMessages != null) 'debugMessages': debugMessages,
      if (errorPosition != null) 'errorPosition': errorPosition!.toJson(),
      if (expressionReports != null)
        'expressionReports': encodeList(expressionReports),
      if (functionCalls != null) 'functionCalls': encodeList(functionCalls),
      if (state != null) 'state': state!.toJson(),
      if (visitedExpressions != null)
        'visitedExpressions': encodeList(visitedExpressions),
    };
  }

  @override
  String toString() {
    final contents = [if (state != null) 'state=$state'].join(',');
    return 'TestResult($contents)';
  }
}

/// The enumerated type for the `state` field.
final class TestResult_State extends ProtoEnum {
  /// Test state is not set.
  static const stateUnspecified = TestResult_State('STATE_UNSPECIFIED');

  /// Test is a success.
  static const success = TestResult_State('SUCCESS');

  /// Test is a failure.
  static const failure = TestResult_State('FAILURE');

  const TestResult_State(super.value);

  factory TestResult_State.fromJson(String json) => TestResult_State(json);

  @override
  String toString() => 'state.$value';
}

/// The request for FirebaseRulesService.TestRuleset.
final class TestRulesetRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.TestRulesetRequest';

  /// Optional. Optional `Source` to be checked for correctness. This field must not be set when the resource name refers to a `Ruleset`.
  final Source? source;

  /// Required. The tests to execute against the `Source`. When `Source` is provided inline, the test cases will only be run if the `Source` is syntactically and semantically valid. Inline `TestSuite` to run.
  final TestSuite? testSuite;

  TestRulesetRequest({this.source, this.testSuite}) : super(fullyQualifiedName);

  factory TestRulesetRequest.fromJson(Map<String, dynamic> json) {
    return TestRulesetRequest(
      source: decode(json['source'], Source.fromJson),
      testSuite: decode(json['testSuite'], TestSuite.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (source != null) 'source': source!.toJson(),
      if (testSuite != null) 'testSuite': testSuite!.toJson(),
    };
  }

  @override
  String toString() => 'TestRulesetRequest()';
}

/// The response for FirebaseRulesService.TestRuleset.
final class TestRulesetResponse extends ProtoMessage {
  static const String fullyQualifiedName = '.TestRulesetResponse';

  /// Syntactic and semantic `Source` issues of varying severity. Issues of `ERROR` severity will prevent tests from executing.
  final List<Issue>? issues;

  /// The set of test results given the test cases in the `TestSuite`. The results will appear in the same order as the test cases appear in the `TestSuite`.
  final List<TestResult>? testResults;

  TestRulesetResponse({this.issues, this.testResults})
    : super(fullyQualifiedName);

  factory TestRulesetResponse.fromJson(Map<String, dynamic> json) {
    return TestRulesetResponse(
      issues: decodeListMessage(json['issues'], Issue.fromJson),
      testResults: decodeListMessage(json['testResults'], TestResult.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (issues != null) 'issues': encodeList(issues),
      if (testResults != null) 'testResults': encodeList(testResults),
    };
  }

  @override
  String toString() => 'TestRulesetResponse()';
}

/// `TestSuite` is a collection of `TestCase` instances that validate the logical correctness of a `Ruleset`. The `TestSuite` may be referenced in-line within a `TestRuleset` invocation or as part of a `Release` object as a pre-release check.
final class TestSuite extends ProtoMessage {
  static const String fullyQualifiedName = '.TestSuite';

  /// Collection of test cases associated with the `TestSuite`.
  final List<TestCase>? testCases;

  TestSuite({this.testCases}) : super(fullyQualifiedName);

  factory TestSuite.fromJson(Map<String, dynamic> json) {
    return TestSuite(
      testCases: decodeListMessage(json['testCases'], TestCase.fromJson),
    );
  }

  @override
  Object toJson() {
    return {if (testCases != null) 'testCases': encodeList(testCases)};
  }

  @override
  String toString() => 'TestSuite()';
}

/// The request for FirebaseRulesService.UpdateRelease.
final class UpdateReleaseRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.UpdateReleaseRequest';

  /// Required. `Release` to update.
  final Release? release;

  /// Optional. Specifies which fields to update.
  final FieldMask? updateMask;

  UpdateReleaseRequest({this.release, this.updateMask})
    : super(fullyQualifiedName);

  factory UpdateReleaseRequest.fromJson(Map<String, dynamic> json) {
    return UpdateReleaseRequest(
      release: decode(json['release'], Release.fromJson),
      updateMask: decodeCustom(json['updateMask'], FieldMask.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (release != null) 'release': release!.toJson(),
      if (updateMask != null) 'updateMask': updateMask!.toJson(),
    };
  }

  @override
  String toString() => 'UpdateReleaseRequest()';
}

/// Tuple for how many times an Expression was evaluated to a particular ExpressionValue.
final class ValueCount extends ProtoMessage {
  static const String fullyQualifiedName = '.ValueCount';

  /// The amount of times that expression returned.
  final int? count;

  /// The return value of the expression
  final Value? value;

  ValueCount({this.count, this.value}) : super(fullyQualifiedName);

  factory ValueCount.fromJson(Map<String, dynamic> json) {
    return ValueCount(
      count: json['count'],
      value: decodeCustom(json['value'], Value.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (count != null) 'count': count,
      if (value != null) 'value': value!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [if (count != null) 'count=$count'].join(',');
    return 'ValueCount($contents)';
  }
}

/// Store the position and access outcome for an expression visited in rules.
final class VisitedExpression extends ProtoMessage {
  static const String fullyQualifiedName = '.VisitedExpression';

  /// Position in the `Source` or `Ruleset` where an expression was visited.
  final SourcePosition? sourcePosition;

  /// The evaluated value for the visited expression, e.g. true/false
  final Value? value;

  VisitedExpression({this.sourcePosition, this.value})
    : super(fullyQualifiedName);

  factory VisitedExpression.fromJson(Map<String, dynamic> json) {
    return VisitedExpression(
      sourcePosition: decode(json['sourcePosition'], SourcePosition.fromJson),
      value: decodeCustom(json['value'], Value.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (sourcePosition != null) 'sourcePosition': sourcePosition!.toJson(),
      if (value != null) 'value': value!.toJson(),
    };
  }

  @override
  String toString() => 'VisitedExpression()';
}

/// Synthetic request message for the [test()][.projects.test] method.
final class Projects_TestRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.projects.testRequest';

  /// Required. Tests may either provide `source` or a `Ruleset` resource name. For tests against `source`, the resource name must refer to the project: Format: `projects/{project_id}` For tests against a `Ruleset`, this must be the `Ruleset` resource name: Format: `projects/{project_id}/rulesets/{ruleset_id}`
  final String name;

  /// Synthetic request body field for the [test()][.projects.test] method.
  final TestRulesetRequest body;

  Projects_TestRequest({required this.name, required this.body})
    : super(fullyQualifiedName);

  factory Projects_TestRequest.fromJson(Map<String, dynamic> json) {
    return Projects_TestRequest(
      name: json['name'],
      body: decode(json['body'], TestRulesetRequest.fromJson)!,
    );
  }

  @override
  Object toJson() {
    return {'name': name, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'testRequest($contents)';
  }
}

/// Synthetic request message for the [create()][.releases.create] method.
final class Releases_CreateRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.releases.createRequest';

  /// Required. Resource name for the project which owns this `Release`. Format: `projects/{project_id}`
  final String name;

  /// Synthetic request body field for the [create()][.releases.create] method.
  final Release body;

  Releases_CreateRequest({required this.name, required this.body})
    : super(fullyQualifiedName);

  factory Releases_CreateRequest.fromJson(Map<String, dynamic> json) {
    return Releases_CreateRequest(
      name: json['name'],
      body: decode(json['body'], Release.fromJson)!,
    );
  }

  @override
  Object toJson() {
    return {'name': name, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'createRequest($contents)';
  }
}

/// Synthetic request message for the [delete()][.releases.delete] method.
final class Releases_DeleteRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.releases.deleteRequest';

  /// Required. Resource name for the `Release` to delete. Format: `projects/{project_id}/releases/{release_id}`
  final String name;

  Releases_DeleteRequest({required this.name}) : super(fullyQualifiedName);

  factory Releases_DeleteRequest.fromJson(Map<String, dynamic> json) {
    return Releases_DeleteRequest(name: json['name']);
  }

  @override
  Object toJson() {
    return {'name': name};
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'deleteRequest($contents)';
  }
}

/// Synthetic request message for the [get()][.releases.get] method.
final class Releases_GetRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.releases.getRequest';

  /// Required. Resource name of the `Release`. Format: `projects/{project_id}/releases/{release_id}`
  final String name;

  Releases_GetRequest({required this.name}) : super(fullyQualifiedName);

  factory Releases_GetRequest.fromJson(Map<String, dynamic> json) {
    return Releases_GetRequest(name: json['name']);
  }

  @override
  Object toJson() {
    return {'name': name};
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'getRequest($contents)';
  }
}

/// Synthetic request message for the [getExecutable()][.releases.getExecutable] method.
final class Releases_GetExecutableRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.releases.getExecutableRequest';

  /// Optional. The requested runtime executable version. Defaults to FIREBASE_RULES_EXECUTABLE_V1.
  final Releases_GetExecutableRequest_ExecutableVersion? executableVersion;

  /// Required. Resource name of the `Release`. Format: `projects/{project_id}/releases/{release_id}`
  final String name;

  Releases_GetExecutableRequest({this.executableVersion, required this.name})
    : super(fullyQualifiedName);

  factory Releases_GetExecutableRequest.fromJson(Map<String, dynamic> json) {
    return Releases_GetExecutableRequest(
      executableVersion: decodeEnum(
        json['executableVersion'],
        Releases_GetExecutableRequest_ExecutableVersion.fromJson,
      ),
      name: json['name'],
    );
  }

  @override
  Object toJson() {
    return {
      if (executableVersion != null)
        'executableVersion': executableVersion!.toJson(),
      'name': name,
    };
  }

  @override
  String toString() {
    final contents = [
      if (executableVersion != null) 'executableVersion=$executableVersion',
      'name=$name',
    ].join(',');
    return 'getExecutableRequest($contents)';
  }
}

/// The enumerated type for the `executableVersion` field.
final class Releases_GetExecutableRequest_ExecutableVersion extends ProtoEnum {
  /// Executable format unspecified. Defaults to FIREBASE_RULES_EXECUTABLE_V1
  static const releaseExecutableVersionUnspecified =
      Releases_GetExecutableRequest_ExecutableVersion(
        'RELEASE_EXECUTABLE_VERSION_UNSPECIFIED',
      );

  /// Firebase Rules syntax 'rules2' executable versions: Custom AST for use with Java clients.
  static const firebaseRulesExecutableV1 =
      Releases_GetExecutableRequest_ExecutableVersion(
        'FIREBASE_RULES_EXECUTABLE_V1',
      );

  /// CEL-based executable for use with C++ clients.
  static const firebaseRulesExecutableV2 =
      Releases_GetExecutableRequest_ExecutableVersion(
        'FIREBASE_RULES_EXECUTABLE_V2',
      );

  const Releases_GetExecutableRequest_ExecutableVersion(super.value);

  factory Releases_GetExecutableRequest_ExecutableVersion.fromJson(
    String json,
  ) => Releases_GetExecutableRequest_ExecutableVersion(json);

  @override
  String toString() => 'executableVersion.$value';
}

/// Synthetic request message for the [list()][.releases.list] method.
final class Releases_ListRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.releases.listRequest';

  /// Optional. `Release` filter. The list method supports filters with restrictions on the `Release.name`, and `Release.ruleset_name`. Example 1: A filter of 'name=prod*' might return `Release`s with names within 'projects/foo' prefixed with 'prod': Name -> Ruleset Name: * projects/foo/releases/prod -> projects/foo/rulesets/uuid1234 * projects/foo/releases/prod/v1 -> projects/foo/rulesets/uuid1234 * projects/foo/releases/prod/v2 -> projects/foo/rulesets/uuid8888 Example 2: A filter of `name=prod* ruleset_name=uuid1234` would return only `Release` instances for 'projects/foo' with names prefixed with 'prod' referring to the same `Ruleset` name of 'uuid1234': Name -> Ruleset Name: * projects/foo/releases/prod -> projects/foo/rulesets/1234 * projects/foo/releases/prod/v1 -> projects/foo/rulesets/1234 In the examples, the filter parameters refer to the search filters are relative to the project. Fully qualified prefixed may also be used.
  final String? filter;

  /// Required. Resource name for the project. Format: `projects/{project_id}`
  final String name;

  /// Optional. Page size to load. Maximum of 100. Defaults to 10. Note: `page_size` is just a hint and the service may choose to load fewer than `page_size` results due to the size of the output. To traverse all of the releases, the caller should iterate until the `page_token` on the response is empty.
  final int? pageSize;

  /// Optional. Next page token for the next batch of `Release` instances.
  final String? pageToken;

  Releases_ListRequest({
    this.filter,
    required this.name,
    this.pageSize,
    this.pageToken,
  }) : super(fullyQualifiedName);

  factory Releases_ListRequest.fromJson(Map<String, dynamic> json) {
    return Releases_ListRequest(
      filter: json['filter'],
      name: json['name'],
      pageSize: json['pageSize'],
      pageToken: json['pageToken'],
    );
  }

  @override
  Object toJson() {
    return {
      if (filter != null) 'filter': filter,
      'name': name,
      if (pageSize != null) 'pageSize': pageSize,
      if (pageToken != null) 'pageToken': pageToken,
    };
  }

  @override
  String toString() {
    final contents = [
      if (filter != null) 'filter=$filter',
      'name=$name',
      if (pageSize != null) 'pageSize=$pageSize',
      if (pageToken != null) 'pageToken=$pageToken',
    ].join(',');
    return 'listRequest($contents)';
  }
}

/// Synthetic request message for the [patch()][.releases.patch] method.
final class Releases_PatchRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.releases.patchRequest';

  /// Required. Resource name for the project which owns this `Release`. Format: `projects/{project_id}`
  final String name;

  /// Synthetic request body field for the [patch()][.releases.patch] method.
  final UpdateReleaseRequest body;

  Releases_PatchRequest({required this.name, required this.body})
    : super(fullyQualifiedName);

  factory Releases_PatchRequest.fromJson(Map<String, dynamic> json) {
    return Releases_PatchRequest(
      name: json['name'],
      body: decode(json['body'], UpdateReleaseRequest.fromJson)!,
    );
  }

  @override
  Object toJson() {
    return {'name': name, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'patchRequest($contents)';
  }
}

/// Synthetic request message for the [create()][.rulesets.create] method.
final class Rulesets_CreateRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.rulesets.createRequest';

  /// Required. Resource name for Project which owns this `Ruleset`. Format: `projects/{project_id}`
  final String name;

  /// Synthetic request body field for the [create()][.rulesets.create] method.
  final Ruleset body;

  Rulesets_CreateRequest({required this.name, required this.body})
    : super(fullyQualifiedName);

  factory Rulesets_CreateRequest.fromJson(Map<String, dynamic> json) {
    return Rulesets_CreateRequest(
      name: json['name'],
      body: decode(json['body'], Ruleset.fromJson)!,
    );
  }

  @override
  Object toJson() {
    return {'name': name, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'createRequest($contents)';
  }
}

/// Synthetic request message for the [delete()][.rulesets.delete] method.
final class Rulesets_DeleteRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.rulesets.deleteRequest';

  /// Required. Resource name for the ruleset to delete. Format: `projects/{project_id}/rulesets/{ruleset_id}`
  final String name;

  Rulesets_DeleteRequest({required this.name}) : super(fullyQualifiedName);

  factory Rulesets_DeleteRequest.fromJson(Map<String, dynamic> json) {
    return Rulesets_DeleteRequest(name: json['name']);
  }

  @override
  Object toJson() {
    return {'name': name};
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'deleteRequest($contents)';
  }
}

/// Synthetic request message for the [get()][.rulesets.get] method.
final class Rulesets_GetRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.rulesets.getRequest';

  /// Required. Resource name for the ruleset to get. Format: `projects/{project_id}/rulesets/{ruleset_id}`
  final String name;

  Rulesets_GetRequest({required this.name}) : super(fullyQualifiedName);

  factory Rulesets_GetRequest.fromJson(Map<String, dynamic> json) {
    return Rulesets_GetRequest(name: json['name']);
  }

  @override
  Object toJson() {
    return {'name': name};
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'getRequest($contents)';
  }
}

/// Synthetic request message for the [list()][.rulesets.list] method.
final class Rulesets_ListRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.rulesets.listRequest';

  /// Optional. `Ruleset` filter. The list method supports filters with restrictions on `Ruleset.name`. Filters on `Ruleset.create_time` should use the `date` function which parses strings that conform to the RFC 3339 date/time specifications. Example: `create_time > date("2017-01-01T00:00:00Z") AND name=UUID-*`
  final String? filter;

  /// Required. Resource name for the project. Format: `projects/{project_id}`
  final String name;

  /// Optional. Page size to load. Maximum of 100. Defaults to 10. Note: `page_size` is just a hint and the service may choose to load less than `page_size` due to the size of the output. To traverse all of the releases, caller should iterate until the `page_token` is empty.
  final int? pageSize;

  /// Optional. Next page token for loading the next batch of `Ruleset` instances.
  final String? pageToken;

  Rulesets_ListRequest({
    this.filter,
    required this.name,
    this.pageSize,
    this.pageToken,
  }) : super(fullyQualifiedName);

  factory Rulesets_ListRequest.fromJson(Map<String, dynamic> json) {
    return Rulesets_ListRequest(
      filter: json['filter'],
      name: json['name'],
      pageSize: json['pageSize'],
      pageToken: json['pageToken'],
    );
  }

  @override
  Object toJson() {
    return {
      if (filter != null) 'filter': filter,
      'name': name,
      if (pageSize != null) 'pageSize': pageSize,
      if (pageToken != null) 'pageToken': pageToken,
    };
  }

  @override
  String toString() {
    final contents = [
      if (filter != null) 'filter=$filter',
      'name=$name',
      if (pageSize != null) 'pageSize=$pageSize',
      if (pageToken != null) 'pageToken=$pageToken',
    ].join(',');
    return 'listRequest($contents)';
  }
}
