// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

/// The Google Cloud client for the Firebase App Check API.
///
/// Firebase App Check works alongside other Firebase services to help protect your backend resources from abuse, such as billing fraud or phishing.
library;

import 'package:google_cloud_gax/gax.dart';
import 'package:google_cloud_gax/src/encoding.dart';
import 'package:google_cloud_protobuf/protobuf.dart';
import 'package:googleapis_auth/auth_io.dart' as auth;
import 'package:http/http.dart' as http;

const _apiKeys = ["GOOGLE_API_KEY"];

/// Service for the `appAttestConfig` resource.
final class AppAttestConfig {
  static const _host = 'firebaseappcheck.googleapis.com';
  final ServiceClient _client;

  AppAttestConfig({required http.Client client})
    : _client = ServiceClient(client: client);

  factory AppAttestConfig.fromApiKey([String? apiKey]) {
    apiKey ??= _apiKeys.map(environmentVariable).nonNulls.firstOrNull;
    if (apiKey == null) {
      throw ArgumentError(
        'apiKey or one of these environment variables must '
        'be set to an API key: ${_apiKeys.join(", ")}',
      );
    }
    return AppAttestConfig(client: auth.clientViaApiKey(apiKey));
  }

  /// Atomically gets the AppAttestConfigs for the specified list of apps.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1BatchGetAppAttestConfigsResponse> batchGet(
    AppAttestConfig_BatchGetRequest request,
  ) async {
    final url = Uri.https(
      _host,
      '/v1/${request.parent}/apps/-/appAttestConfig:batchGet',
      {if (request.names != null) 'names': request.names!},
    );
    final response = await _client.get(url);
    return GoogleFirebaseAppcheckV1BatchGetAppAttestConfigsResponse.fromJson(
      response,
    );
  }

  /// Gets the AppAttestConfig for the specified app.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1AppAttestConfig> get(
    AppAttestConfig_GetRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.name}');
    final response = await _client.get(url);
    return GoogleFirebaseAppcheckV1AppAttestConfig.fromJson(response);
  }

  /// Updates the AppAttestConfig for the specified app. While this configuration is incomplete or invalid, the app will be unable to exchange AppAttest tokens for App Check tokens.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1AppAttestConfig> patch(
    AppAttestConfig_PatchRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.name}', {
      if (request.updateMask?.paths != null)
        'updateMask.paths': request.updateMask?.paths!,
    });
    final response = await _client.patch(url, body: request.body);
    return GoogleFirebaseAppcheckV1AppAttestConfig.fromJson(response);
  }

  /// Closes the client and cleans up any resources associated with it.
  ///
  /// Once [close] is called, no other methods should be called.
  void close() => _client.close();
}

/// Service for the `apps` resource.
final class Apps {
  static const _host = 'firebaseappcheck.googleapis.com';
  final ServiceClient _client;

  Apps({required http.Client client}) : _client = ServiceClient(client: client);

  factory Apps.fromApiKey([String? apiKey]) {
    apiKey ??= _apiKeys.map(environmentVariable).nonNulls.firstOrNull;
    if (apiKey == null) {
      throw ArgumentError(
        'apiKey or one of these environment variables must '
        'be set to an API key: ${_apiKeys.join(", ")}',
      );
    }
    return Apps(client: auth.clientViaApiKey(apiKey));
  }

  /// Accepts an App Attest assertion and an artifact previously obtained from ExchangeAppAttestAttestation and verifies those with Apple. If valid, returns an AppCheckToken.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1AppCheckToken> exchangeAppAttestAssertion(
    Apps_ExchangeAppAttestAssertionRequest request,
  ) async {
    final url = Uri.https(
      _host,
      '/v1/${request.app}/exchangeAppAttestAssertion',
    );
    final response = await _client.post(url, body: request.body);
    return GoogleFirebaseAppcheckV1AppCheckToken.fromJson(response);
  }

  /// Accepts an App Attest CBOR attestation and verifies it with Apple using your preconfigured team and bundle IDs. If valid, returns an attestation artifact that can later be exchanged for an AppCheckToken using ExchangeAppAttestAssertion. For convenience and performance, this method's response object will also contain an AppCheckToken (if the verification is successful).
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationResponse>
  exchangeAppAttestAttestation(
    Apps_ExchangeAppAttestAttestationRequest request,
  ) async {
    final url = Uri.https(
      _host,
      '/v1/${request.app}/exchangeAppAttestAttestation',
    );
    final response = await _client.post(url, body: request.body);
    return GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationResponse.fromJson(
      response,
    );
  }

  /// Validates a custom token signed using your project's Admin SDK service account credentials. If valid, returns an AppCheckToken.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1AppCheckToken> exchangeCustomToken(
    Apps_ExchangeCustomTokenRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.app}/exchangeCustomToken');
    final response = await _client.post(url, body: request.body);
    return GoogleFirebaseAppcheckV1AppCheckToken.fromJson(response);
  }

  /// Validates a debug token secret that you have previously created using CreateDebugToken. If valid, returns an AppCheckToken. Note that a restrictive quota is enforced on this method to prevent accidental exposure of the app to abuse.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1AppCheckToken> exchangeDebugToken(
    Apps_ExchangeDebugTokenRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.app}/exchangeDebugToken');
    final response = await _client.post(url, body: request.body);
    return GoogleFirebaseAppcheckV1AppCheckToken.fromJson(response);
  }

  /// Accepts a [`device_token`](https://developer.apple.com/documentation/devicecheck/dcdevice) issued by DeviceCheck, and attempts to validate it with Apple. If valid, returns an AppCheckToken.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1AppCheckToken> exchangeDeviceCheckToken(
    Apps_ExchangeDeviceCheckTokenRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.app}/exchangeDeviceCheckToken');
    final response = await _client.post(url, body: request.body);
    return GoogleFirebaseAppcheckV1AppCheckToken.fromJson(response);
  }

  /// Validates an [integrity verdict response token from Play Integrity](https://developer.android.com/google/play/integrity/verdict#decrypt-verify). If valid, returns an AppCheckToken.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1AppCheckToken> exchangePlayIntegrityToken(
    Apps_ExchangePlayIntegrityTokenRequest request,
  ) async {
    final url = Uri.https(
      _host,
      '/v1/${request.app}/exchangePlayIntegrityToken',
    );
    final response = await _client.post(url, body: request.body);
    return GoogleFirebaseAppcheckV1AppCheckToken.fromJson(response);
  }

  /// Validates a [reCAPTCHA Enterprise response token](https://cloud.google.com/recaptcha-enterprise/docs/create-assessment#retrieve_token). If valid, returns an AppCheckToken.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1AppCheckToken>
  exchangeRecaptchaEnterpriseToken(
    Apps_ExchangeRecaptchaEnterpriseTokenRequest request,
  ) async {
    final url = Uri.https(
      _host,
      '/v1/${request.app}/exchangeRecaptchaEnterpriseToken',
    );
    final response = await _client.post(url, body: request.body);
    return GoogleFirebaseAppcheckV1AppCheckToken.fromJson(response);
  }

  /// Validates a [reCAPTCHA v3 response token](https://developers.google.com/recaptcha/docs/v3). If valid, returns an AppCheckToken.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1AppCheckToken> exchangeRecaptchaV3Token(
    Apps_ExchangeRecaptchaV3TokenRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.app}/exchangeRecaptchaV3Token');
    final response = await _client.post(url, body: request.body);
    return GoogleFirebaseAppcheckV1AppCheckToken.fromJson(response);
  }

  /// Validates a [SafetyNet token](https://developer.android.com/training/safetynet/attestation#request-attestation-step). If valid, returns an AppCheckToken.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1AppCheckToken> exchangeSafetyNetToken(
    Apps_ExchangeSafetyNetTokenRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.app}/exchangeSafetyNetToken');
    final response = await _client.post(url, body: request.body);
    return GoogleFirebaseAppcheckV1AppCheckToken.fromJson(response);
  }

  /// Generates a challenge that protects the integrity of an immediately following call to ExchangeAppAttestAttestation or ExchangeAppAttestAssertion. A challenge should not be reused for multiple calls.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1GenerateAppAttestChallengeResponse>
  generateAppAttestChallenge(
    Apps_GenerateAppAttestChallengeRequest request,
  ) async {
    final url = Uri.https(
      _host,
      '/v1/${request.app}/generateAppAttestChallenge',
    );
    final response = await _client.post(url, body: request.body);
    return GoogleFirebaseAppcheckV1GenerateAppAttestChallengeResponse.fromJson(
      response,
    );
  }

  /// Generates a challenge that protects the integrity of an immediately following integrity verdict request to the Play Integrity API. The next call to ExchangePlayIntegrityToken using the resulting integrity token will verify the presence and validity of the challenge. A challenge should not be reused for multiple calls.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1GeneratePlayIntegrityChallengeResponse>
  generatePlayIntegrityChallenge(
    Apps_GeneratePlayIntegrityChallengeRequest request,
  ) async {
    final url = Uri.https(
      _host,
      '/v1/${request.app}/generatePlayIntegrityChallenge',
    );
    final response = await _client.post(url, body: request.body);
    return GoogleFirebaseAppcheckV1GeneratePlayIntegrityChallengeResponse.fromJson(
      response,
    );
  }

  /// Closes the client and cleans up any resources associated with it.
  ///
  /// Once [close] is called, no other methods should be called.
  void close() => _client.close();
}

/// Service for the `debugTokens` resource.
final class DebugTokens {
  static const _host = 'firebaseappcheck.googleapis.com';
  final ServiceClient _client;

  DebugTokens({required http.Client client})
    : _client = ServiceClient(client: client);

  factory DebugTokens.fromApiKey([String? apiKey]) {
    apiKey ??= _apiKeys.map(environmentVariable).nonNulls.firstOrNull;
    if (apiKey == null) {
      throw ArgumentError(
        'apiKey or one of these environment variables must '
        'be set to an API key: ${_apiKeys.join(", ")}',
      );
    }
    return DebugTokens(client: auth.clientViaApiKey(apiKey));
  }

  /// Creates a new DebugToken for the specified app. For security reasons, after the creation operation completes, the `token` field cannot be updated or retrieved, but you can revoke the debug token using DeleteDebugToken. Each app can have a maximum of 20 debug tokens.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1DebugToken> create(
    DebugTokens_CreateRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.parent}/debugTokens');
    final response = await _client.post(url, body: request.body);
    return GoogleFirebaseAppcheckV1DebugToken.fromJson(response);
  }

  /// Deletes the specified DebugToken. A deleted debug token cannot be used to exchange for an App Check token. Use this method when you suspect the secret `token` has been compromised or when you no longer need the debug token.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleProtobufEmpty> delete(DebugTokens_DeleteRequest request) async {
    final url = Uri.https(_host, '/v1/${request.name}');
    final response = await _client.delete(url);
    return GoogleProtobufEmpty.fromJson(response);
  }

  /// Gets the specified DebugToken. For security reasons, the `token` field is never populated in the response.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1DebugToken> get(
    DebugTokens_GetRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.name}');
    final response = await _client.get(url);
    return GoogleFirebaseAppcheckV1DebugToken.fromJson(response);
  }

  /// Lists all DebugTokens for the specified app. For security reasons, the `token` field is never populated in the response.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1ListDebugTokensResponse> list(
    DebugTokens_ListRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.parent}/debugTokens', {
      if (request.pageSize != null) 'pageSize': '${request.pageSize}',
      if (request.pageToken != null) 'pageToken': request.pageToken!,
    });
    final response = await _client.get(url);
    return GoogleFirebaseAppcheckV1ListDebugTokensResponse.fromJson(response);
  }

  /// Updates the specified DebugToken. For security reasons, the `token` field cannot be updated, nor will it be populated in the response, but you can revoke the debug token using DeleteDebugToken.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1DebugToken> patch(
    DebugTokens_PatchRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.name}', {
      if (request.updateMask?.paths != null)
        'updateMask.paths': request.updateMask?.paths!,
    });
    final response = await _client.patch(url, body: request.body);
    return GoogleFirebaseAppcheckV1DebugToken.fromJson(response);
  }

  /// Closes the client and cleans up any resources associated with it.
  ///
  /// Once [close] is called, no other methods should be called.
  void close() => _client.close();
}

/// Service for the `deviceCheckConfig` resource.
final class DeviceCheckConfig {
  static const _host = 'firebaseappcheck.googleapis.com';
  final ServiceClient _client;

  DeviceCheckConfig({required http.Client client})
    : _client = ServiceClient(client: client);

  factory DeviceCheckConfig.fromApiKey([String? apiKey]) {
    apiKey ??= _apiKeys.map(environmentVariable).nonNulls.firstOrNull;
    if (apiKey == null) {
      throw ArgumentError(
        'apiKey or one of these environment variables must '
        'be set to an API key: ${_apiKeys.join(", ")}',
      );
    }
    return DeviceCheckConfig(client: auth.clientViaApiKey(apiKey));
  }

  /// Atomically gets the DeviceCheckConfigs for the specified list of apps. For security reasons, the `private_key` field is never populated in the response.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1BatchGetDeviceCheckConfigsResponse> batchGet(
    DeviceCheckConfig_BatchGetRequest request,
  ) async {
    final url = Uri.https(
      _host,
      '/v1/${request.parent}/apps/-/deviceCheckConfig:batchGet',
      {if (request.names != null) 'names': request.names!},
    );
    final response = await _client.get(url);
    return GoogleFirebaseAppcheckV1BatchGetDeviceCheckConfigsResponse.fromJson(
      response,
    );
  }

  /// Gets the DeviceCheckConfig for the specified app. For security reasons, the `private_key` field is never populated in the response.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1DeviceCheckConfig> get(
    DeviceCheckConfig_GetRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.name}');
    final response = await _client.get(url);
    return GoogleFirebaseAppcheckV1DeviceCheckConfig.fromJson(response);
  }

  /// Updates the DeviceCheckConfig for the specified app. While this configuration is incomplete or invalid, the app will be unable to exchange DeviceCheck tokens for App Check tokens. For security reasons, the `private_key` field is never populated in the response.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1DeviceCheckConfig> patch(
    DeviceCheckConfig_PatchRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.name}', {
      if (request.updateMask?.paths != null)
        'updateMask.paths': request.updateMask?.paths!,
    });
    final response = await _client.patch(url, body: request.body);
    return GoogleFirebaseAppcheckV1DeviceCheckConfig.fromJson(response);
  }

  /// Closes the client and cleans up any resources associated with it.
  ///
  /// Once [close] is called, no other methods should be called.
  void close() => _client.close();
}

/// Service for the `jwks` resource.
final class Jwks {
  static const _host = 'firebaseappcheck.googleapis.com';
  final ServiceClient _client;

  Jwks({required http.Client client}) : _client = ServiceClient(client: client);

  factory Jwks.fromApiKey([String? apiKey]) {
    apiKey ??= _apiKeys.map(environmentVariable).nonNulls.firstOrNull;
    if (apiKey == null) {
      throw ArgumentError(
        'apiKey or one of these environment variables must '
        'be set to an API key: ${_apiKeys.join(", ")}',
      );
    }
    return Jwks(client: auth.clientViaApiKey(apiKey));
  }

  /// Returns a public JWK set as specified by [RFC 7517](https://tools.ietf.org/html/rfc7517) that can be used to verify App Check tokens. Exactly one of the public keys in the returned set will successfully validate any App Check token that is currently valid.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1PublicJwkSet> get(
    Jwks_GetRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.name}');
    final response = await _client.get(url);
    return GoogleFirebaseAppcheckV1PublicJwkSet.fromJson(response);
  }

  /// Closes the client and cleans up any resources associated with it.
  ///
  /// Once [close] is called, no other methods should be called.
  void close() => _client.close();
}

/// Service for the `oauthClients` resource.
final class OauthClients {
  static const _host = 'firebaseappcheck.googleapis.com';
  final ServiceClient _client;

  OauthClients({required http.Client client})
    : _client = ServiceClient(client: client);

  factory OauthClients.fromApiKey([String? apiKey]) {
    apiKey ??= _apiKeys.map(environmentVariable).nonNulls.firstOrNull;
    if (apiKey == null) {
      throw ArgumentError(
        'apiKey or one of these environment variables must '
        'be set to an API key: ${_apiKeys.join(", ")}',
      );
    }
    return OauthClients(client: auth.clientViaApiKey(apiKey));
  }

  /// Accepts an App Attest assertion and an artifact previously obtained from ExchangeAppAttestAttestation and verifies those with Apple. If valid, returns an AppCheckToken.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1AppCheckToken> exchangeAppAttestAssertion(
    OauthClients_ExchangeAppAttestAssertionRequest request,
  ) async {
    final url = Uri.https(
      _host,
      '/v1/${request.app}/exchangeAppAttestAssertion',
    );
    final response = await _client.post(url, body: request.body);
    return GoogleFirebaseAppcheckV1AppCheckToken.fromJson(response);
  }

  /// Accepts an App Attest CBOR attestation and verifies it with Apple using your preconfigured team and bundle IDs. If valid, returns an attestation artifact that can later be exchanged for an AppCheckToken using ExchangeAppAttestAssertion. For convenience and performance, this method's response object will also contain an AppCheckToken (if the verification is successful).
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationResponse>
  exchangeAppAttestAttestation(
    OauthClients_ExchangeAppAttestAttestationRequest request,
  ) async {
    final url = Uri.https(
      _host,
      '/v1/${request.app}/exchangeAppAttestAttestation',
    );
    final response = await _client.post(url, body: request.body);
    return GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationResponse.fromJson(
      response,
    );
  }

  /// Validates a debug token secret that you have previously created using CreateDebugToken. If valid, returns an AppCheckToken. Note that a restrictive quota is enforced on this method to prevent accidental exposure of the app to abuse.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1AppCheckToken> exchangeDebugToken(
    OauthClients_ExchangeDebugTokenRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.app}/exchangeDebugToken');
    final response = await _client.post(url, body: request.body);
    return GoogleFirebaseAppcheckV1AppCheckToken.fromJson(response);
  }

  /// Generates a challenge that protects the integrity of an immediately following call to ExchangeAppAttestAttestation or ExchangeAppAttestAssertion. A challenge should not be reused for multiple calls.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1GenerateAppAttestChallengeResponse>
  generateAppAttestChallenge(
    OauthClients_GenerateAppAttestChallengeRequest request,
  ) async {
    final url = Uri.https(
      _host,
      '/v1/${request.app}/generateAppAttestChallenge',
    );
    final response = await _client.post(url, body: request.body);
    return GoogleFirebaseAppcheckV1GenerateAppAttestChallengeResponse.fromJson(
      response,
    );
  }

  /// Closes the client and cleans up any resources associated with it.
  ///
  /// Once [close] is called, no other methods should be called.
  void close() => _client.close();
}

/// Service for the `playIntegrityConfig` resource.
final class PlayIntegrityConfig {
  static const _host = 'firebaseappcheck.googleapis.com';
  final ServiceClient _client;

  PlayIntegrityConfig({required http.Client client})
    : _client = ServiceClient(client: client);

  factory PlayIntegrityConfig.fromApiKey([String? apiKey]) {
    apiKey ??= _apiKeys.map(environmentVariable).nonNulls.firstOrNull;
    if (apiKey == null) {
      throw ArgumentError(
        'apiKey or one of these environment variables must '
        'be set to an API key: ${_apiKeys.join(", ")}',
      );
    }
    return PlayIntegrityConfig(client: auth.clientViaApiKey(apiKey));
  }

  /// Atomically gets the PlayIntegrityConfigs for the specified list of apps.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1BatchGetPlayIntegrityConfigsResponse> batchGet(
    PlayIntegrityConfig_BatchGetRequest request,
  ) async {
    final url = Uri.https(
      _host,
      '/v1/${request.parent}/apps/-/playIntegrityConfig:batchGet',
      {if (request.names != null) 'names': request.names!},
    );
    final response = await _client.get(url);
    return GoogleFirebaseAppcheckV1BatchGetPlayIntegrityConfigsResponse.fromJson(
      response,
    );
  }

  /// Gets the PlayIntegrityConfig for the specified app.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1PlayIntegrityConfig> get(
    PlayIntegrityConfig_GetRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.name}');
    final response = await _client.get(url);
    return GoogleFirebaseAppcheckV1PlayIntegrityConfig.fromJson(response);
  }

  /// Updates the PlayIntegrityConfig for the specified app. While this configuration is incomplete or invalid, the app will be unable to exchange Play Integrity tokens for App Check tokens.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1PlayIntegrityConfig> patch(
    PlayIntegrityConfig_PatchRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.name}', {
      if (request.updateMask?.paths != null)
        'updateMask.paths': request.updateMask?.paths!,
    });
    final response = await _client.patch(url, body: request.body);
    return GoogleFirebaseAppcheckV1PlayIntegrityConfig.fromJson(response);
  }

  /// Closes the client and cleans up any resources associated with it.
  ///
  /// Once [close] is called, no other methods should be called.
  void close() => _client.close();
}

/// Service for the `recaptchaEnterpriseConfig` resource.
final class RecaptchaEnterpriseConfig {
  static const _host = 'firebaseappcheck.googleapis.com';
  final ServiceClient _client;

  RecaptchaEnterpriseConfig({required http.Client client})
    : _client = ServiceClient(client: client);

  factory RecaptchaEnterpriseConfig.fromApiKey([String? apiKey]) {
    apiKey ??= _apiKeys.map(environmentVariable).nonNulls.firstOrNull;
    if (apiKey == null) {
      throw ArgumentError(
        'apiKey or one of these environment variables must '
        'be set to an API key: ${_apiKeys.join(", ")}',
      );
    }
    return RecaptchaEnterpriseConfig(client: auth.clientViaApiKey(apiKey));
  }

  /// Atomically gets the RecaptchaEnterpriseConfigs for the specified list of apps.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1BatchGetRecaptchaEnterpriseConfigsResponse>
  batchGet(RecaptchaEnterpriseConfig_BatchGetRequest request) async {
    final url = Uri.https(
      _host,
      '/v1/${request.parent}/apps/-/recaptchaEnterpriseConfig:batchGet',
      {if (request.names != null) 'names': request.names!},
    );
    final response = await _client.get(url);
    return GoogleFirebaseAppcheckV1BatchGetRecaptchaEnterpriseConfigsResponse.fromJson(
      response,
    );
  }

  /// Gets the RecaptchaEnterpriseConfig for the specified app.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfig> get(
    RecaptchaEnterpriseConfig_GetRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.name}');
    final response = await _client.get(url);
    return GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfig.fromJson(response);
  }

  /// Updates the RecaptchaEnterpriseConfig for the specified app. While this configuration is incomplete or invalid, the app will be unable to exchange reCAPTCHA Enterprise tokens for App Check tokens.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfig> patch(
    RecaptchaEnterpriseConfig_PatchRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.name}', {
      if (request.updateMask?.paths != null)
        'updateMask.paths': request.updateMask?.paths!,
    });
    final response = await _client.patch(url, body: request.body);
    return GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfig.fromJson(response);
  }

  /// Closes the client and cleans up any resources associated with it.
  ///
  /// Once [close] is called, no other methods should be called.
  void close() => _client.close();
}

/// Service for the `recaptchaV3Config` resource.
final class RecaptchaV3Config {
  static const _host = 'firebaseappcheck.googleapis.com';
  final ServiceClient _client;

  RecaptchaV3Config({required http.Client client})
    : _client = ServiceClient(client: client);

  factory RecaptchaV3Config.fromApiKey([String? apiKey]) {
    apiKey ??= _apiKeys.map(environmentVariable).nonNulls.firstOrNull;
    if (apiKey == null) {
      throw ArgumentError(
        'apiKey or one of these environment variables must '
        'be set to an API key: ${_apiKeys.join(", ")}',
      );
    }
    return RecaptchaV3Config(client: auth.clientViaApiKey(apiKey));
  }

  /// Atomically gets the RecaptchaV3Configs for the specified list of apps. For security reasons, the `site_secret` field is never populated in the response.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1BatchGetRecaptchaV3ConfigsResponse> batchGet(
    RecaptchaV3Config_BatchGetRequest request,
  ) async {
    final url = Uri.https(
      _host,
      '/v1/${request.parent}/apps/-/recaptchaV3Config:batchGet',
      {if (request.names != null) 'names': request.names!},
    );
    final response = await _client.get(url);
    return GoogleFirebaseAppcheckV1BatchGetRecaptchaV3ConfigsResponse.fromJson(
      response,
    );
  }

  /// Gets the RecaptchaV3Config for the specified app. For security reasons, the `site_secret` field is never populated in the response.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1RecaptchaV3Config> get(
    RecaptchaV3Config_GetRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.name}');
    final response = await _client.get(url);
    return GoogleFirebaseAppcheckV1RecaptchaV3Config.fromJson(response);
  }

  /// Updates the RecaptchaV3Config for the specified app. While this configuration is incomplete or invalid, the app will be unable to exchange reCAPTCHA V3 tokens for App Check tokens. For security reasons, the `site_secret` field is never populated in the response.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1RecaptchaV3Config> patch(
    RecaptchaV3Config_PatchRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.name}', {
      if (request.updateMask?.paths != null)
        'updateMask.paths': request.updateMask?.paths!,
    });
    final response = await _client.patch(url, body: request.body);
    return GoogleFirebaseAppcheckV1RecaptchaV3Config.fromJson(response);
  }

  /// Closes the client and cleans up any resources associated with it.
  ///
  /// Once [close] is called, no other methods should be called.
  void close() => _client.close();
}

/// Service for the `resourcePolicies` resource.
final class ResourcePolicies {
  static const _host = 'firebaseappcheck.googleapis.com';
  final ServiceClient _client;

  ResourcePolicies({required http.Client client})
    : _client = ServiceClient(client: client);

  factory ResourcePolicies.fromApiKey([String? apiKey]) {
    apiKey ??= _apiKeys.map(environmentVariable).nonNulls.firstOrNull;
    if (apiKey == null) {
      throw ArgumentError(
        'apiKey or one of these environment variables must '
        'be set to an API key: ${_apiKeys.join(", ")}',
      );
    }
    return ResourcePolicies(client: auth.clientViaApiKey(apiKey));
  }

  /// Atomically updates the specified ResourcePolicy configurations.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1BatchUpdateResourcePoliciesResponse>
  batchUpdate(ResourcePolicies_BatchUpdateRequest request) async {
    final url = Uri.https(
      _host,
      '/v1/${request.parent}/resourcePolicies:batchUpdate',
    );
    final response = await _client.post(url, body: request.body);
    return GoogleFirebaseAppcheckV1BatchUpdateResourcePoliciesResponse.fromJson(
      response,
    );
  }

  /// Creates the specified ResourcePolicy configuration.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1ResourcePolicy> create(
    ResourcePolicies_CreateRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.parent}/resourcePolicies');
    final response = await _client.post(url, body: request.body);
    return GoogleFirebaseAppcheckV1ResourcePolicy.fromJson(response);
  }

  /// Deletes the specified ResourcePolicy configuration.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleProtobufEmpty> delete(
    ResourcePolicies_DeleteRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.name}', {
      if (request.etag != null) 'etag': request.etag!,
    });
    final response = await _client.delete(url);
    return GoogleProtobufEmpty.fromJson(response);
  }

  /// Gets the requested ResourcePolicy configuration.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1ResourcePolicy> get(
    ResourcePolicies_GetRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.name}');
    final response = await _client.get(url);
    return GoogleFirebaseAppcheckV1ResourcePolicy.fromJson(response);
  }

  /// Lists all ResourcePolicy configurations for the specified project and service.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1ListResourcePoliciesResponse> list(
    ResourcePolicies_ListRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.parent}/resourcePolicies', {
      if (request.filter != null) 'filter': request.filter!,
      if (request.pageSize != null) 'pageSize': '${request.pageSize}',
      if (request.pageToken != null) 'pageToken': request.pageToken!,
    });
    final response = await _client.get(url);
    return GoogleFirebaseAppcheckV1ListResourcePoliciesResponse.fromJson(
      response,
    );
  }

  /// Updates the specified ResourcePolicy configuration.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1ResourcePolicy> patch(
    ResourcePolicies_PatchRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.name}', {
      if (request.updateMask?.paths != null)
        'updateMask.paths': request.updateMask?.paths!,
    });
    final response = await _client.patch(url, body: request.body);
    return GoogleFirebaseAppcheckV1ResourcePolicy.fromJson(response);
  }

  /// Closes the client and cleans up any resources associated with it.
  ///
  /// Once [close] is called, no other methods should be called.
  void close() => _client.close();
}

/// Service for the `safetyNetConfig` resource.
final class SafetyNetConfig {
  static const _host = 'firebaseappcheck.googleapis.com';
  final ServiceClient _client;

  SafetyNetConfig({required http.Client client})
    : _client = ServiceClient(client: client);

  factory SafetyNetConfig.fromApiKey([String? apiKey]) {
    apiKey ??= _apiKeys.map(environmentVariable).nonNulls.firstOrNull;
    if (apiKey == null) {
      throw ArgumentError(
        'apiKey or one of these environment variables must '
        'be set to an API key: ${_apiKeys.join(", ")}',
      );
    }
    return SafetyNetConfig(client: auth.clientViaApiKey(apiKey));
  }

  /// Atomically gets the SafetyNetConfigs for the specified list of apps.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1BatchGetSafetyNetConfigsResponse> batchGet(
    SafetyNetConfig_BatchGetRequest request,
  ) async {
    final url = Uri.https(
      _host,
      '/v1/${request.parent}/apps/-/safetyNetConfig:batchGet',
      {if (request.names != null) 'names': request.names!},
    );
    final response = await _client.get(url);
    return GoogleFirebaseAppcheckV1BatchGetSafetyNetConfigsResponse.fromJson(
      response,
    );
  }

  /// Gets the SafetyNetConfig for the specified app.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1SafetyNetConfig> get(
    SafetyNetConfig_GetRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.name}');
    final response = await _client.get(url);
    return GoogleFirebaseAppcheckV1SafetyNetConfig.fromJson(response);
  }

  /// Updates the SafetyNetConfig for the specified app. While this configuration is incomplete or invalid, the app will be unable to exchange SafetyNet tokens for App Check tokens.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1SafetyNetConfig> patch(
    SafetyNetConfig_PatchRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.name}', {
      if (request.updateMask?.paths != null)
        'updateMask.paths': request.updateMask?.paths!,
    });
    final response = await _client.patch(url, body: request.body);
    return GoogleFirebaseAppcheckV1SafetyNetConfig.fromJson(response);
  }

  /// Closes the client and cleans up any resources associated with it.
  ///
  /// Once [close] is called, no other methods should be called.
  void close() => _client.close();
}

/// Service for the `services` resource.
final class Services {
  static const _host = 'firebaseappcheck.googleapis.com';
  final ServiceClient _client;

  Services({required http.Client client})
    : _client = ServiceClient(client: client);

  factory Services.fromApiKey([String? apiKey]) {
    apiKey ??= _apiKeys.map(environmentVariable).nonNulls.firstOrNull;
    if (apiKey == null) {
      throw ArgumentError(
        'apiKey or one of these environment variables must '
        'be set to an API key: ${_apiKeys.join(", ")}',
      );
    }
    return Services(client: auth.clientViaApiKey(apiKey));
  }

  /// Atomically updates the specified Service configurations.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1BatchUpdateServicesResponse> batchUpdate(
    Services_BatchUpdateRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.parent}/services:batchUpdate');
    final response = await _client.post(url, body: request.body);
    return GoogleFirebaseAppcheckV1BatchUpdateServicesResponse.fromJson(
      response,
    );
  }

  /// Gets the Service configuration for the specified service name.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1Service> get(
    Services_GetRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.name}');
    final response = await _client.get(url);
    return GoogleFirebaseAppcheckV1Service.fromJson(response);
  }

  /// Lists all Service configurations for the specified project. Only Services which were explicitly configured using UpdateService or BatchUpdateServices will be returned.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1ListServicesResponse> list(
    Services_ListRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.parent}/services', {
      if (request.pageSize != null) 'pageSize': '${request.pageSize}',
      if (request.pageToken != null) 'pageToken': request.pageToken!,
    });
    final response = await _client.get(url);
    return GoogleFirebaseAppcheckV1ListServicesResponse.fromJson(response);
  }

  /// Updates the specified Service configuration.
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<GoogleFirebaseAppcheckV1Service> patch(
    Services_PatchRequest request,
  ) async {
    final url = Uri.https(_host, '/v1/${request.name}', {
      if (request.updateMask?.paths != null)
        'updateMask.paths': request.updateMask?.paths!,
    });
    final response = await _client.patch(url, body: request.body);
    return GoogleFirebaseAppcheckV1Service.fromJson(response);
  }

  /// Closes the client and cleans up any resources associated with it.
  ///
  /// Once [close] is called, no other methods should be called.
  void close() => _client.close();
}

/// An app's App Attest configuration object. This configuration controls certain properties of the `AppCheckToken` returned by ExchangeAppAttestAttestation and ExchangeAppAttestAssertion, such as its ttl. Note that the Team ID registered with your app is used as part of the validation process. Please register it via the Firebase Console or programmatically via the [Firebase Management Service](https://firebase.google.com/docs/projects/api/reference/rest/v11/projects.iosApps/patch).
final class GoogleFirebaseAppcheckV1AppAttestConfig extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1AppAttestConfig';

  /// Required. The relative resource name of the App Attest configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/appAttestConfig ```
  final String? name;

  /// Specifies the duration for which App Check tokens exchanged from App Attest artifacts will be valid. If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
  final Duration? tokenTtl;

  GoogleFirebaseAppcheckV1AppAttestConfig({this.name, this.tokenTtl})
    : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1AppAttestConfig.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1AppAttestConfig(
      name: json['name'],
      tokenTtl: decodeCustom(json['tokenTtl'], Duration.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (name != null) 'name': name,
      if (tokenTtl != null) 'tokenTtl': tokenTtl!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [if (name != null) 'name=$name'].join(',');
    return 'GoogleFirebaseAppcheckV1AppAttestConfig($contents)';
  }
}

/// Encapsulates an *App Check token*, which are used to access backend services protected by App Check.
final class GoogleFirebaseAppcheckV1AppCheckToken extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1AppCheckToken';

  /// The App Check token. App Check tokens are signed [JWTs](https://tools.ietf.org/html/rfc7519) containing claims that identify the attested app and GCP project. This token is used to access Google services protected by App Check. These tokens can also be [verified by your own custom backends](https://firebase.google.com/docs/app-check/custom-resource-backend) using the Firebase Admin SDK or third-party libraries.
  final String? token;

  /// The duration from the time this token is minted until its expiration. This field is intended to ease client-side token management, since the client may have clock skew, but is still able to accurately measure a duration.
  final Duration? ttl;

  GoogleFirebaseAppcheckV1AppCheckToken({this.token, this.ttl})
    : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1AppCheckToken.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1AppCheckToken(
      token: json['token'],
      ttl: decodeCustom(json['ttl'], Duration.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (token != null) 'token': token,
      if (ttl != null) 'ttl': ttl!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [if (token != null) 'token=$token'].join(',');
    return 'GoogleFirebaseAppcheckV1AppCheckToken($contents)';
  }
}

/// Response message for the BatchGetAppAttestConfigs method.
final class GoogleFirebaseAppcheckV1BatchGetAppAttestConfigsResponse
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1BatchGetAppAttestConfigsResponse';

  /// AppAttestConfigs retrieved.
  final List<GoogleFirebaseAppcheckV1AppAttestConfig>? configs;

  GoogleFirebaseAppcheckV1BatchGetAppAttestConfigsResponse({this.configs})
    : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1BatchGetAppAttestConfigsResponse.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1BatchGetAppAttestConfigsResponse(
      configs: decodeListMessage(
        json['configs'],
        GoogleFirebaseAppcheckV1AppAttestConfig.fromJson,
      ),
    );
  }

  @override
  Object toJson() {
    return {if (configs != null) 'configs': encodeList(configs)};
  }

  @override
  String toString() =>
      'GoogleFirebaseAppcheckV1BatchGetAppAttestConfigsResponse()';
}

/// Response message for the BatchGetDeviceCheckConfigs method.
final class GoogleFirebaseAppcheckV1BatchGetDeviceCheckConfigsResponse
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1BatchGetDeviceCheckConfigsResponse';

  /// DeviceCheckConfigs retrieved.
  final List<GoogleFirebaseAppcheckV1DeviceCheckConfig>? configs;

  GoogleFirebaseAppcheckV1BatchGetDeviceCheckConfigsResponse({this.configs})
    : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1BatchGetDeviceCheckConfigsResponse.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1BatchGetDeviceCheckConfigsResponse(
      configs: decodeListMessage(
        json['configs'],
        GoogleFirebaseAppcheckV1DeviceCheckConfig.fromJson,
      ),
    );
  }

  @override
  Object toJson() {
    return {if (configs != null) 'configs': encodeList(configs)};
  }

  @override
  String toString() =>
      'GoogleFirebaseAppcheckV1BatchGetDeviceCheckConfigsResponse()';
}

/// Response message for the BatchGetPlayIntegrityConfigs method.
final class GoogleFirebaseAppcheckV1BatchGetPlayIntegrityConfigsResponse
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1BatchGetPlayIntegrityConfigsResponse';

  /// PlayIntegrityConfigs retrieved.
  final List<GoogleFirebaseAppcheckV1PlayIntegrityConfig>? configs;

  GoogleFirebaseAppcheckV1BatchGetPlayIntegrityConfigsResponse({this.configs})
    : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1BatchGetPlayIntegrityConfigsResponse.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1BatchGetPlayIntegrityConfigsResponse(
      configs: decodeListMessage(
        json['configs'],
        GoogleFirebaseAppcheckV1PlayIntegrityConfig.fromJson,
      ),
    );
  }

  @override
  Object toJson() {
    return {if (configs != null) 'configs': encodeList(configs)};
  }

  @override
  String toString() =>
      'GoogleFirebaseAppcheckV1BatchGetPlayIntegrityConfigsResponse()';
}

/// Response message for the BatchGetRecaptchaEnterpriseConfigs method.
final class GoogleFirebaseAppcheckV1BatchGetRecaptchaEnterpriseConfigsResponse
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1BatchGetRecaptchaEnterpriseConfigsResponse';

  /// RecaptchaEnterpriseConfigs retrieved.
  final List<GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfig>? configs;

  GoogleFirebaseAppcheckV1BatchGetRecaptchaEnterpriseConfigsResponse({
    this.configs,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1BatchGetRecaptchaEnterpriseConfigsResponse.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1BatchGetRecaptchaEnterpriseConfigsResponse(
      configs: decodeListMessage(
        json['configs'],
        GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfig.fromJson,
      ),
    );
  }

  @override
  Object toJson() {
    return {if (configs != null) 'configs': encodeList(configs)};
  }

  @override
  String toString() =>
      'GoogleFirebaseAppcheckV1BatchGetRecaptchaEnterpriseConfigsResponse()';
}

/// Response message for the BatchGetRecaptchaV3Configs method.
final class GoogleFirebaseAppcheckV1BatchGetRecaptchaV3ConfigsResponse
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1BatchGetRecaptchaV3ConfigsResponse';

  /// RecaptchaV3Configs retrieved.
  final List<GoogleFirebaseAppcheckV1RecaptchaV3Config>? configs;

  GoogleFirebaseAppcheckV1BatchGetRecaptchaV3ConfigsResponse({this.configs})
    : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1BatchGetRecaptchaV3ConfigsResponse.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1BatchGetRecaptchaV3ConfigsResponse(
      configs: decodeListMessage(
        json['configs'],
        GoogleFirebaseAppcheckV1RecaptchaV3Config.fromJson,
      ),
    );
  }

  @override
  Object toJson() {
    return {if (configs != null) 'configs': encodeList(configs)};
  }

  @override
  String toString() =>
      'GoogleFirebaseAppcheckV1BatchGetRecaptchaV3ConfigsResponse()';
}

/// Response message for the BatchGetSafetyNetConfigs method.
final class GoogleFirebaseAppcheckV1BatchGetSafetyNetConfigsResponse
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1BatchGetSafetyNetConfigsResponse';

  /// SafetyNetConfigs retrieved.
  final List<GoogleFirebaseAppcheckV1SafetyNetConfig>? configs;

  GoogleFirebaseAppcheckV1BatchGetSafetyNetConfigsResponse({this.configs})
    : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1BatchGetSafetyNetConfigsResponse.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1BatchGetSafetyNetConfigsResponse(
      configs: decodeListMessage(
        json['configs'],
        GoogleFirebaseAppcheckV1SafetyNetConfig.fromJson,
      ),
    );
  }

  @override
  Object toJson() {
    return {if (configs != null) 'configs': encodeList(configs)};
  }

  @override
  String toString() =>
      'GoogleFirebaseAppcheckV1BatchGetSafetyNetConfigsResponse()';
}

/// Request message for the BatchUpdateResourcePolicies method.
final class GoogleFirebaseAppcheckV1BatchUpdateResourcePoliciesRequest
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1BatchUpdateResourcePoliciesRequest';

  /// Required. The request messages specifying the ResourcePolicy objects to update. A maximum of 100 objects can be updated in a batch.
  final List<GoogleFirebaseAppcheckV1UpdateResourcePolicyRequest>? requests;

  /// Optional. A comma-separated list of names of fields in the ResourcePolicy objects to update. Example: `enforcement_mode`. If this field is present, the `update_mask` field in the UpdateResourcePolicyRequest messages must all match this field, or the entire batch fails and no updates will be committed.
  final FieldMask? updateMask;

  GoogleFirebaseAppcheckV1BatchUpdateResourcePoliciesRequest({
    this.requests,
    this.updateMask,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1BatchUpdateResourcePoliciesRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1BatchUpdateResourcePoliciesRequest(
      requests: decodeListMessage(
        json['requests'],
        GoogleFirebaseAppcheckV1UpdateResourcePolicyRequest.fromJson,
      ),
      updateMask: decodeCustom(json['updateMask'], FieldMask.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (requests != null) 'requests': encodeList(requests),
      if (updateMask != null) 'updateMask': updateMask!.toJson(),
    };
  }

  @override
  String toString() =>
      'GoogleFirebaseAppcheckV1BatchUpdateResourcePoliciesRequest()';
}

/// Response message for the BatchUpdateResourcePolicies method.
final class GoogleFirebaseAppcheckV1BatchUpdateResourcePoliciesResponse
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1BatchUpdateResourcePoliciesResponse';

  /// ResourcePolicy objects after the updates have been applied.
  final List<GoogleFirebaseAppcheckV1ResourcePolicy>? resourcePolicies;

  GoogleFirebaseAppcheckV1BatchUpdateResourcePoliciesResponse({
    this.resourcePolicies,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1BatchUpdateResourcePoliciesResponse.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1BatchUpdateResourcePoliciesResponse(
      resourcePolicies: decodeListMessage(
        json['resourcePolicies'],
        GoogleFirebaseAppcheckV1ResourcePolicy.fromJson,
      ),
    );
  }

  @override
  Object toJson() {
    return {
      if (resourcePolicies != null)
        'resourcePolicies': encodeList(resourcePolicies),
    };
  }

  @override
  String toString() =>
      'GoogleFirebaseAppcheckV1BatchUpdateResourcePoliciesResponse()';
}

/// Request message for the BatchUpdateServices method.
final class GoogleFirebaseAppcheckV1BatchUpdateServicesRequest
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1BatchUpdateServicesRequest';

  /// Required. The request messages specifying the Services to update. A maximum of 100 objects can be updated in a batch.
  final List<GoogleFirebaseAppcheckV1UpdateServiceRequest>? requests;

  /// Optional. A comma-separated list of names of fields in the Services to update. Example: `display_name`. If the `update_mask` field is set in both this request and any of the UpdateServiceRequest messages, they must match or the entire batch fails and no updates will be committed.
  final FieldMask? updateMask;

  GoogleFirebaseAppcheckV1BatchUpdateServicesRequest({
    this.requests,
    this.updateMask,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1BatchUpdateServicesRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1BatchUpdateServicesRequest(
      requests: decodeListMessage(
        json['requests'],
        GoogleFirebaseAppcheckV1UpdateServiceRequest.fromJson,
      ),
      updateMask: decodeCustom(json['updateMask'], FieldMask.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (requests != null) 'requests': encodeList(requests),
      if (updateMask != null) 'updateMask': updateMask!.toJson(),
    };
  }

  @override
  String toString() => 'GoogleFirebaseAppcheckV1BatchUpdateServicesRequest()';
}

/// Response message for the BatchUpdateServices method.
final class GoogleFirebaseAppcheckV1BatchUpdateServicesResponse
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1BatchUpdateServicesResponse';

  /// Service objects after the updates have been applied.
  final List<GoogleFirebaseAppcheckV1Service>? services;

  GoogleFirebaseAppcheckV1BatchUpdateServicesResponse({this.services})
    : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1BatchUpdateServicesResponse.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1BatchUpdateServicesResponse(
      services: decodeListMessage(
        json['services'],
        GoogleFirebaseAppcheckV1Service.fromJson,
      ),
    );
  }

  @override
  Object toJson() {
    return {if (services != null) 'services': encodeList(services)};
  }

  @override
  String toString() => 'GoogleFirebaseAppcheckV1BatchUpdateServicesResponse()';
}

/// A *debug token* is a secret used during the development or integration testing of an app. It essentially allows the development or integration testing to bypass app attestation while still allowing App Check to enforce protection on supported production Firebase services.
final class GoogleFirebaseAppcheckV1DebugToken extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1DebugToken';

  /// Required. A human readable display name used to identify this debug token.
  final String? displayName;

  /// Required. The relative resource name of the debug token, in the format: ``` projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
  final String? name;

  /// Required. Input only. Immutable. The secret token itself. Must be provided during creation, and must be a UUID4, case insensitive. This field is immutable once set, and cannot be provided during an UpdateDebugToken request. You can, however, delete this debug token using DeleteDebugToken to revoke it. For security reasons, this field will never be populated in any response.
  final String? token;

  /// Output only. Timestamp when this debug token was most recently updated.
  final Timestamp? updateTime;

  GoogleFirebaseAppcheckV1DebugToken({
    this.displayName,
    this.name,
    this.token,
    this.updateTime,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1DebugToken.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1DebugToken(
      displayName: json['displayName'],
      name: json['name'],
      token: json['token'],
      updateTime: decodeCustom(json['updateTime'], Timestamp.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (displayName != null) 'displayName': displayName,
      if (name != null) 'name': name,
      if (token != null) 'token': token,
      if (updateTime != null) 'updateTime': updateTime!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [
      if (displayName != null) 'displayName=$displayName',
      if (name != null) 'name=$name',
      if (token != null) 'token=$token',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1DebugToken($contents)';
  }
}

/// An app's DeviceCheck configuration object. This configuration is used by ExchangeDeviceCheckToken to validate device tokens issued to apps by DeviceCheck. It also controls certain properties of the returned `AppCheckToken`, such as its ttl. Note that the Team ID registered with your app is used as part of the validation process. Please register it via the Firebase Console or programmatically via the [Firebase Management Service](https://firebase.google.com/docs/projects/api/reference/rest/v11/projects.iosApps/patch).
final class GoogleFirebaseAppcheckV1DeviceCheckConfig extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1DeviceCheckConfig';

  /// Required. The key identifier of a private key enabled with DeviceCheck, created in your Apple Developer account.
  final String? keyId;

  /// Required. The relative resource name of the DeviceCheck configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/deviceCheckConfig ```
  final String? name;

  /// Required. Input only. The contents of the private key (`.p8`) file associated with the key specified by `key_id`. For security reasons, this field will never be populated in any response.
  final String? privateKey;

  /// Output only. Whether the `private_key` field was previously set. Since we will never return the `private_key` field, this field is the only way to find out whether it was previously set.
  final bool? privateKeySet;

  /// Specifies the duration for which App Check tokens exchanged from DeviceCheck tokens will be valid. If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
  final Duration? tokenTtl;

  GoogleFirebaseAppcheckV1DeviceCheckConfig({
    this.keyId,
    this.name,
    this.privateKey,
    this.privateKeySet,
    this.tokenTtl,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1DeviceCheckConfig.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1DeviceCheckConfig(
      keyId: json['keyId'],
      name: json['name'],
      privateKey: json['privateKey'],
      privateKeySet: json['privateKeySet'],
      tokenTtl: decodeCustom(json['tokenTtl'], Duration.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (keyId != null) 'keyId': keyId,
      if (name != null) 'name': name,
      if (privateKey != null) 'privateKey': privateKey,
      if (privateKeySet != null) 'privateKeySet': privateKeySet,
      if (tokenTtl != null) 'tokenTtl': tokenTtl!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [
      if (keyId != null) 'keyId=$keyId',
      if (name != null) 'name=$name',
      if (privateKey != null) 'privateKey=$privateKey',
      if (privateKeySet != null) 'privateKeySet=$privateKeySet',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1DeviceCheckConfig($contents)';
  }
}

/// Request message for the ExchangeAppAttestAssertion method.
final class GoogleFirebaseAppcheckV1ExchangeAppAttestAssertionRequest
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1ExchangeAppAttestAssertionRequest';

  /// Required. The artifact returned by a previous call to ExchangeAppAttestAttestation.
  final Uint8List? artifact;

  /// Required. The CBOR-encoded assertion returned by the client-side App Attest API.
  final Uint8List? assertion;

  /// Required. A one-time challenge returned by an immediately prior call to GenerateAppAttestChallenge.
  final Uint8List? challenge;

  /// Specifies whether this attestation is for use in a *limited use* (`true`) or *session based* (`false`) context. To enable this attestation to be used with the *replay protection* feature, set this to `true`. The default value is `false`.
  final bool? limitedUse;

  GoogleFirebaseAppcheckV1ExchangeAppAttestAssertionRequest({
    this.artifact,
    this.assertion,
    this.challenge,
    this.limitedUse,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1ExchangeAppAttestAssertionRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1ExchangeAppAttestAssertionRequest(
      artifact: decodeBytes(json['artifact']),
      assertion: decodeBytes(json['assertion']),
      challenge: decodeBytes(json['challenge']),
      limitedUse: json['limitedUse'],
    );
  }

  @override
  Object toJson() {
    return {
      if (artifact != null) 'artifact': encodeBytes(artifact),
      if (assertion != null) 'assertion': encodeBytes(assertion),
      if (challenge != null) 'challenge': encodeBytes(challenge),
      if (limitedUse != null) 'limitedUse': limitedUse,
    };
  }

  @override
  String toString() {
    final contents = [
      if (artifact != null) 'artifact=$artifact',
      if (assertion != null) 'assertion=$assertion',
      if (challenge != null) 'challenge=$challenge',
      if (limitedUse != null) 'limitedUse=$limitedUse',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1ExchangeAppAttestAssertionRequest($contents)';
  }
}

/// Request message for the ExchangeAppAttestAttestation method.
final class GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationRequest
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationRequest';

  /// Required. The App Attest statement returned by the client-side App Attest API. This is a base64url encoded CBOR object in the JSON response.
  final Uint8List? attestationStatement;

  /// Required. A one-time challenge returned by an immediately prior call to GenerateAppAttestChallenge.
  final Uint8List? challenge;

  /// Required. The key ID generated by App Attest for the client app.
  final Uint8List? keyId;

  /// Specifies whether this attestation is for use in a *limited use* (`true`) or *session based* (`false`) context. To enable this attestation to be used with the *replay protection* feature, set this to `true`. The default value is `false`.
  final bool? limitedUse;

  GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationRequest({
    this.attestationStatement,
    this.challenge,
    this.keyId,
    this.limitedUse,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationRequest(
      attestationStatement: decodeBytes(json['attestationStatement']),
      challenge: decodeBytes(json['challenge']),
      keyId: decodeBytes(json['keyId']),
      limitedUse: json['limitedUse'],
    );
  }

  @override
  Object toJson() {
    return {
      if (attestationStatement != null)
        'attestationStatement': encodeBytes(attestationStatement),
      if (challenge != null) 'challenge': encodeBytes(challenge),
      if (keyId != null) 'keyId': encodeBytes(keyId),
      if (limitedUse != null) 'limitedUse': limitedUse,
    };
  }

  @override
  String toString() {
    final contents = [
      if (attestationStatement != null)
        'attestationStatement=$attestationStatement',
      if (challenge != null) 'challenge=$challenge',
      if (keyId != null) 'keyId=$keyId',
      if (limitedUse != null) 'limitedUse=$limitedUse',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationRequest($contents)';
  }
}

/// Response message for the ExchangeAppAttestAttestation method.
final class GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationResponse
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationResponse';

  /// Encapsulates an App Check token.
  final GoogleFirebaseAppcheckV1AppCheckToken? appCheckToken;

  /// An artifact that can be used in future calls to ExchangeAppAttestAssertion.
  final Uint8List? artifact;

  GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationResponse({
    this.appCheckToken,
    this.artifact,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationResponse.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationResponse(
      appCheckToken: decode(
        json['appCheckToken'],
        GoogleFirebaseAppcheckV1AppCheckToken.fromJson,
      ),
      artifact: decodeBytes(json['artifact']),
    );
  }

  @override
  Object toJson() {
    return {
      if (appCheckToken != null) 'appCheckToken': appCheckToken!.toJson(),
      if (artifact != null) 'artifact': encodeBytes(artifact),
    };
  }

  @override
  String toString() {
    final contents = [if (artifact != null) 'artifact=$artifact'].join(',');
    return 'GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationResponse($contents)';
  }
}

/// Request message for the ExchangeCustomToken method.
final class GoogleFirebaseAppcheckV1ExchangeCustomTokenRequest
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1ExchangeCustomTokenRequest';

  /// Required. A custom token signed using your project's Admin SDK service account credentials.
  final String? customToken;

  /// Specifies whether this attestation is for use in a *limited use* (`true`) or *session based* (`false`) context. To enable this attestation to be used with the *replay protection* feature, set this to `true`. The default value is `false`.
  final bool? limitedUse;

  GoogleFirebaseAppcheckV1ExchangeCustomTokenRequest({
    this.customToken,
    this.limitedUse,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1ExchangeCustomTokenRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1ExchangeCustomTokenRequest(
      customToken: json['customToken'],
      limitedUse: json['limitedUse'],
    );
  }

  @override
  Object toJson() {
    return {
      if (customToken != null) 'customToken': customToken,
      if (limitedUse != null) 'limitedUse': limitedUse,
    };
  }

  @override
  String toString() {
    final contents = [
      if (customToken != null) 'customToken=$customToken',
      if (limitedUse != null) 'limitedUse=$limitedUse',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1ExchangeCustomTokenRequest($contents)';
  }
}

/// Request message for the ExchangeDebugToken method.
final class GoogleFirebaseAppcheckV1ExchangeDebugTokenRequest
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1ExchangeDebugTokenRequest';

  /// Required. A debug token secret. This string must match a debug token secret previously created using CreateDebugToken.
  final String? debugToken;

  /// Specifies whether this attestation is for use in a *limited use* (`true`) or *session based* (`false`) context. To enable this attestation to be used with the *replay protection* feature, set this to `true`. The default value is `false`.
  final bool? limitedUse;

  GoogleFirebaseAppcheckV1ExchangeDebugTokenRequest({
    this.debugToken,
    this.limitedUse,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1ExchangeDebugTokenRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1ExchangeDebugTokenRequest(
      debugToken: json['debugToken'],
      limitedUse: json['limitedUse'],
    );
  }

  @override
  Object toJson() {
    return {
      if (debugToken != null) 'debugToken': debugToken,
      if (limitedUse != null) 'limitedUse': limitedUse,
    };
  }

  @override
  String toString() {
    final contents = [
      if (debugToken != null) 'debugToken=$debugToken',
      if (limitedUse != null) 'limitedUse=$limitedUse',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1ExchangeDebugTokenRequest($contents)';
  }
}

/// Request message for the ExchangeDeviceCheckToken method.
final class GoogleFirebaseAppcheckV1ExchangeDeviceCheckTokenRequest
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1ExchangeDeviceCheckTokenRequest';

  /// Required. The `device_token` as returned by Apple's client-side [DeviceCheck API](https://developer.apple.com/documentation/devicecheck/dcdevice). This is the base64 encoded `Data` (Swift) or `NSData` (ObjC) object.
  final String? deviceToken;

  /// Specifies whether this attestation is for use in a *limited use* (`true`) or *session based* (`false`) context. To enable this attestation to be used with the *replay protection* feature, set this to `true`. The default value is `false`.
  final bool? limitedUse;

  GoogleFirebaseAppcheckV1ExchangeDeviceCheckTokenRequest({
    this.deviceToken,
    this.limitedUse,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1ExchangeDeviceCheckTokenRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1ExchangeDeviceCheckTokenRequest(
      deviceToken: json['deviceToken'],
      limitedUse: json['limitedUse'],
    );
  }

  @override
  Object toJson() {
    return {
      if (deviceToken != null) 'deviceToken': deviceToken,
      if (limitedUse != null) 'limitedUse': limitedUse,
    };
  }

  @override
  String toString() {
    final contents = [
      if (deviceToken != null) 'deviceToken=$deviceToken',
      if (limitedUse != null) 'limitedUse=$limitedUse',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1ExchangeDeviceCheckTokenRequest($contents)';
  }
}

/// Request message for the ExchangePlayIntegrityToken method.
final class GoogleFirebaseAppcheckV1ExchangePlayIntegrityTokenRequest
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1ExchangePlayIntegrityTokenRequest';

  /// Specifies whether this attestation is for use in a *limited use* (`true`) or *session based* (`false`) context. To enable this attestation to be used with the *replay protection* feature, set this to `true`. The default value is `false`.
  final bool? limitedUse;

  /// Required. The [integrity verdict response token from Play Integrity](https://developer.android.com/google/play/integrity/verdict#decrypt-verify) issued to your app.
  final String? playIntegrityToken;

  GoogleFirebaseAppcheckV1ExchangePlayIntegrityTokenRequest({
    this.limitedUse,
    this.playIntegrityToken,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1ExchangePlayIntegrityTokenRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1ExchangePlayIntegrityTokenRequest(
      limitedUse: json['limitedUse'],
      playIntegrityToken: json['playIntegrityToken'],
    );
  }

  @override
  Object toJson() {
    return {
      if (limitedUse != null) 'limitedUse': limitedUse,
      if (playIntegrityToken != null) 'playIntegrityToken': playIntegrityToken,
    };
  }

  @override
  String toString() {
    final contents = [
      if (limitedUse != null) 'limitedUse=$limitedUse',
      if (playIntegrityToken != null) 'playIntegrityToken=$playIntegrityToken',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1ExchangePlayIntegrityTokenRequest($contents)';
  }
}

/// Request message for the ExchangeRecaptchaEnterpriseToken method.
final class GoogleFirebaseAppcheckV1ExchangeRecaptchaEnterpriseTokenRequest
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1ExchangeRecaptchaEnterpriseTokenRequest';

  /// Specifies whether this attestation is for use in a *limited use* (`true`) or *session based* (`false`) context. To enable this attestation to be used with the *replay protection* feature, set this to `true`. The default value is `false`.
  final bool? limitedUse;

  /// Required. The reCAPTCHA token as returned by the [reCAPTCHA Enterprise JavaScript API](https://cloud.google.com/recaptcha-enterprise/docs/instrument-web-pages).
  final String? recaptchaEnterpriseToken;

  GoogleFirebaseAppcheckV1ExchangeRecaptchaEnterpriseTokenRequest({
    this.limitedUse,
    this.recaptchaEnterpriseToken,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1ExchangeRecaptchaEnterpriseTokenRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1ExchangeRecaptchaEnterpriseTokenRequest(
      limitedUse: json['limitedUse'],
      recaptchaEnterpriseToken: json['recaptchaEnterpriseToken'],
    );
  }

  @override
  Object toJson() {
    return {
      if (limitedUse != null) 'limitedUse': limitedUse,
      if (recaptchaEnterpriseToken != null)
        'recaptchaEnterpriseToken': recaptchaEnterpriseToken,
    };
  }

  @override
  String toString() {
    final contents = [
      if (limitedUse != null) 'limitedUse=$limitedUse',
      if (recaptchaEnterpriseToken != null)
        'recaptchaEnterpriseToken=$recaptchaEnterpriseToken',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1ExchangeRecaptchaEnterpriseTokenRequest($contents)';
  }
}

/// Request message for the ExchangeRecaptchaV3Token method.
final class GoogleFirebaseAppcheckV1ExchangeRecaptchaV3TokenRequest
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1ExchangeRecaptchaV3TokenRequest';

  /// Specifies whether this attestation is for use in a *limited use* (`true`) or *session based* (`false`) context. To enable this attestation to be used with the *replay protection* feature, set this to `true`. The default value is `false`.
  final bool? limitedUse;

  /// Required. The reCAPTCHA token as returned by the [reCAPTCHA v3 JavaScript API](https://developers.google.com/recaptcha/docs/v3).
  final String? recaptchaV3Token;

  GoogleFirebaseAppcheckV1ExchangeRecaptchaV3TokenRequest({
    this.limitedUse,
    this.recaptchaV3Token,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1ExchangeRecaptchaV3TokenRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1ExchangeRecaptchaV3TokenRequest(
      limitedUse: json['limitedUse'],
      recaptchaV3Token: json['recaptchaV3Token'],
    );
  }

  @override
  Object toJson() {
    return {
      if (limitedUse != null) 'limitedUse': limitedUse,
      if (recaptchaV3Token != null) 'recaptchaV3Token': recaptchaV3Token,
    };
  }

  @override
  String toString() {
    final contents = [
      if (limitedUse != null) 'limitedUse=$limitedUse',
      if (recaptchaV3Token != null) 'recaptchaV3Token=$recaptchaV3Token',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1ExchangeRecaptchaV3TokenRequest($contents)';
  }
}

/// Request message for the ExchangeSafetyNetToken method.
final class GoogleFirebaseAppcheckV1ExchangeSafetyNetTokenRequest
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1ExchangeSafetyNetTokenRequest';

  /// Required. The [SafetyNet attestation response](https://developer.android.com/training/safetynet/attestation#request-attestation-step) issued to your app.
  final String? safetyNetToken;

  GoogleFirebaseAppcheckV1ExchangeSafetyNetTokenRequest({this.safetyNetToken})
    : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1ExchangeSafetyNetTokenRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1ExchangeSafetyNetTokenRequest(
      safetyNetToken: json['safetyNetToken'],
    );
  }

  @override
  Object toJson() {
    return {if (safetyNetToken != null) 'safetyNetToken': safetyNetToken};
  }

  @override
  String toString() {
    final contents = [
      if (safetyNetToken != null) 'safetyNetToken=$safetyNetToken',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1ExchangeSafetyNetTokenRequest($contents)';
  }
}

/// Request message for the GenerateAppAttestChallenge method.
final class GoogleFirebaseAppcheckV1GenerateAppAttestChallengeRequest
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1GenerateAppAttestChallengeRequest';

  GoogleFirebaseAppcheckV1GenerateAppAttestChallengeRequest()
    : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1GenerateAppAttestChallengeRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1GenerateAppAttestChallengeRequest();
  }

  @override
  Object toJson() {
    return {};
  }

  @override
  String toString() =>
      'GoogleFirebaseAppcheckV1GenerateAppAttestChallengeRequest()';
}

/// Response message for the GenerateAppAttestChallenge method.
final class GoogleFirebaseAppcheckV1GenerateAppAttestChallengeResponse
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1GenerateAppAttestChallengeResponse';

  /// A one-time use challenge for the client to pass to the App Attest API.
  final Uint8List? challenge;

  /// The duration from the time this challenge is minted until its expiration. This field is intended to ease client-side token management, since the client may have clock skew, but is still able to accurately measure a duration.
  final Duration? ttl;

  GoogleFirebaseAppcheckV1GenerateAppAttestChallengeResponse({
    this.challenge,
    this.ttl,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1GenerateAppAttestChallengeResponse.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1GenerateAppAttestChallengeResponse(
      challenge: decodeBytes(json['challenge']),
      ttl: decodeCustom(json['ttl'], Duration.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (challenge != null) 'challenge': encodeBytes(challenge),
      if (ttl != null) 'ttl': ttl!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [if (challenge != null) 'challenge=$challenge'].join(',');
    return 'GoogleFirebaseAppcheckV1GenerateAppAttestChallengeResponse($contents)';
  }
}

/// Request message for the GeneratePlayIntegrityChallenge method.
final class GoogleFirebaseAppcheckV1GeneratePlayIntegrityChallengeRequest
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1GeneratePlayIntegrityChallengeRequest';

  GoogleFirebaseAppcheckV1GeneratePlayIntegrityChallengeRequest()
    : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1GeneratePlayIntegrityChallengeRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1GeneratePlayIntegrityChallengeRequest();
  }

  @override
  Object toJson() {
    return {};
  }

  @override
  String toString() =>
      'GoogleFirebaseAppcheckV1GeneratePlayIntegrityChallengeRequest()';
}

/// Response message for the GeneratePlayIntegrityChallenge method.
final class GoogleFirebaseAppcheckV1GeneratePlayIntegrityChallengeResponse
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1GeneratePlayIntegrityChallengeResponse';

  /// A one-time use [challenge](https://developer.android.com/google/play/integrity/verdict#protect-against-replay-attacks) for the client to pass to the Play Integrity API.
  final String? challenge;

  /// The duration from the time this challenge is minted until its expiration. This field is intended to ease client-side token management, since the client may have clock skew, but is still able to accurately measure a duration.
  final Duration? ttl;

  GoogleFirebaseAppcheckV1GeneratePlayIntegrityChallengeResponse({
    this.challenge,
    this.ttl,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1GeneratePlayIntegrityChallengeResponse.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1GeneratePlayIntegrityChallengeResponse(
      challenge: json['challenge'],
      ttl: decodeCustom(json['ttl'], Duration.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (challenge != null) 'challenge': challenge,
      if (ttl != null) 'ttl': ttl!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [if (challenge != null) 'challenge=$challenge'].join(',');
    return 'GoogleFirebaseAppcheckV1GeneratePlayIntegrityChallengeResponse($contents)';
  }
}

/// Response message for the ListDebugTokens method.
final class GoogleFirebaseAppcheckV1ListDebugTokensResponse
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1ListDebugTokensResponse';

  /// The DebugTokens retrieved.
  final List<GoogleFirebaseAppcheckV1DebugToken>? debugTokens;

  /// If the result list is too large to fit in a single response, then a token is returned. If the string is empty or omitted, then this response is the last page of results. This token can be used in a subsequent call to ListDebugTokens to find the next group of DebugTokens. Page tokens are short-lived and should not be persisted.
  final String? nextPageToken;

  GoogleFirebaseAppcheckV1ListDebugTokensResponse({
    this.debugTokens,
    this.nextPageToken,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1ListDebugTokensResponse.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1ListDebugTokensResponse(
      debugTokens: decodeListMessage(
        json['debugTokens'],
        GoogleFirebaseAppcheckV1DebugToken.fromJson,
      ),
      nextPageToken: json['nextPageToken'],
    );
  }

  @override
  Object toJson() {
    return {
      if (debugTokens != null) 'debugTokens': encodeList(debugTokens),
      if (nextPageToken != null) 'nextPageToken': nextPageToken,
    };
  }

  @override
  String toString() {
    final contents = [
      if (nextPageToken != null) 'nextPageToken=$nextPageToken',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1ListDebugTokensResponse($contents)';
  }
}

/// Response message for the ListResourcePolicies method.
final class GoogleFirebaseAppcheckV1ListResourcePoliciesResponse
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1ListResourcePoliciesResponse';

  /// If the result list is too large to fit in a single response, then a token is returned. If the string is empty or omitted, then this response is the last page of results. This token can be used in a subsequent call to ListResourcePolicies to find the next group of ResourcePolicy objects. Page tokens are short-lived and should not be persisted.
  final String? nextPageToken;

  /// The ResourcePolicy objects retrieved.
  final List<GoogleFirebaseAppcheckV1ResourcePolicy>? resourcePolicies;

  GoogleFirebaseAppcheckV1ListResourcePoliciesResponse({
    this.nextPageToken,
    this.resourcePolicies,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1ListResourcePoliciesResponse.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1ListResourcePoliciesResponse(
      nextPageToken: json['nextPageToken'],
      resourcePolicies: decodeListMessage(
        json['resourcePolicies'],
        GoogleFirebaseAppcheckV1ResourcePolicy.fromJson,
      ),
    );
  }

  @override
  Object toJson() {
    return {
      if (nextPageToken != null) 'nextPageToken': nextPageToken,
      if (resourcePolicies != null)
        'resourcePolicies': encodeList(resourcePolicies),
    };
  }

  @override
  String toString() {
    final contents = [
      if (nextPageToken != null) 'nextPageToken=$nextPageToken',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1ListResourcePoliciesResponse($contents)';
  }
}

/// Response message for the ListServices method.
final class GoogleFirebaseAppcheckV1ListServicesResponse extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1ListServicesResponse';

  /// If the result list is too large to fit in a single response, then a token is returned. If the string is empty or omitted, then this response is the last page of results. This token can be used in a subsequent call to ListServices to find the next group of Services. Page tokens are short-lived and should not be persisted.
  final String? nextPageToken;

  /// The Services retrieved.
  final List<GoogleFirebaseAppcheckV1Service>? services;

  GoogleFirebaseAppcheckV1ListServicesResponse({
    this.nextPageToken,
    this.services,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1ListServicesResponse.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1ListServicesResponse(
      nextPageToken: json['nextPageToken'],
      services: decodeListMessage(
        json['services'],
        GoogleFirebaseAppcheckV1Service.fromJson,
      ),
    );
  }

  @override
  Object toJson() {
    return {
      if (nextPageToken != null) 'nextPageToken': nextPageToken,
      if (services != null) 'services': encodeList(services),
    };
  }

  @override
  String toString() {
    final contents = [
      if (nextPageToken != null) 'nextPageToken=$nextPageToken',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1ListServicesResponse($contents)';
  }
}

/// An app's Play Integrity configuration object. This configuration controls certain properties of the `AppCheckToken` returned by ExchangePlayIntegrityToken, such as its ttl. Note that your registered SHA-256 certificate fingerprints are used to validate tokens issued by the Play Integrity API; please register them via the Firebase Console or programmatically via the [Firebase Management Service](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.androidApps.sha/create).
final class GoogleFirebaseAppcheckV1PlayIntegrityConfig extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1PlayIntegrityConfig';

  /// Specifies account requirements for Android devices running your app. These settings correspond to requirements on the [**account details** field](https://developer.android.com/google/play/integrity/verdicts#account-details-field) obtained from the Play Integrity API. See the [default responses table](https://developer.android.com/google/play/integrity/setup#default) for a quick summary. The default values for these settings work for most apps, and are recommended.
  final GoogleFirebaseAppcheckV1PlayIntegrityConfigAccountDetails?
  accountDetails;

  /// Specifies application integrity requirements for Android devices running your app. These settings correspond to requirements on the [**application integrity** field](https://developer.android.com/google/play/integrity/verdicts#application-integrity-field) obtained from the Play Integrity API. See the [default responses table](https://developer.android.com/google/play/integrity/setup#default) for a quick summary. The default values for these settings work for most apps, and are recommended.
  final GoogleFirebaseAppcheckV1PlayIntegrityConfigAppIntegrity? appIntegrity;

  /// Specifies device integrity requirements for Android devices running your app. These settings correspond to requirements on the [**device integrity** field](https://developer.android.com/google/play/integrity/verdicts#device-integrity-field) obtained from the Play Integrity API. See the [default responses table](https://developer.android.com/google/play/integrity/setup#default) for a quick summary. Warning: There are also [conditional](https://developer.android.com/google/play/integrity/setup#conditional) as well as [optional](https://developer.android.com/google/play/integrity/setup#optional_device_information) responses that you can receive, but requires additional explicit opt-in from you. The App Check API is **not** responsible for any such opt-ins. The default values for these settings work for most apps, and are recommended.
  final GoogleFirebaseAppcheckV1PlayIntegrityConfigDeviceIntegrity?
  deviceIntegrity;

  /// Required. The relative resource name of the Play Integrity configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/playIntegrityConfig ```
  final String? name;

  /// Specifies the duration for which App Check tokens exchanged from Play Integrity tokens will be valid. If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
  final Duration? tokenTtl;

  GoogleFirebaseAppcheckV1PlayIntegrityConfig({
    this.accountDetails,
    this.appIntegrity,
    this.deviceIntegrity,
    this.name,
    this.tokenTtl,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1PlayIntegrityConfig.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1PlayIntegrityConfig(
      accountDetails: decode(
        json['accountDetails'],
        GoogleFirebaseAppcheckV1PlayIntegrityConfigAccountDetails.fromJson,
      ),
      appIntegrity: decode(
        json['appIntegrity'],
        GoogleFirebaseAppcheckV1PlayIntegrityConfigAppIntegrity.fromJson,
      ),
      deviceIntegrity: decode(
        json['deviceIntegrity'],
        GoogleFirebaseAppcheckV1PlayIntegrityConfigDeviceIntegrity.fromJson,
      ),
      name: json['name'],
      tokenTtl: decodeCustom(json['tokenTtl'], Duration.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (accountDetails != null) 'accountDetails': accountDetails!.toJson(),
      if (appIntegrity != null) 'appIntegrity': appIntegrity!.toJson(),
      if (deviceIntegrity != null) 'deviceIntegrity': deviceIntegrity!.toJson(),
      if (name != null) 'name': name,
      if (tokenTtl != null) 'tokenTtl': tokenTtl!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [if (name != null) 'name=$name'].join(',');
    return 'GoogleFirebaseAppcheckV1PlayIntegrityConfig($contents)';
  }
}

/// A settings object specifying account requirements for Android devices running your app. These settings correspond to requirements on the [**account details** field](https://developer.android.com/google/play/integrity/verdicts#account-details-field) obtained from the Play Integrity API. See the [default responses table](https://developer.android.com/google/play/integrity/setup#default) for a quick summary. The default values for these settings work for most apps, and are recommended.
final class GoogleFirebaseAppcheckV1PlayIntegrityConfigAccountDetails
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1PlayIntegrityConfigAccountDetails';

  /// Specifies whether the caller must have received the [`LICENSED` verdict](https://developer.android.com/google/play/integrity/verdicts#account-details-field). For additional details about scenarios where your users will receive this `LICENSED` label, see [the default responses table](https://developer.android.com/google/play/integrity/setup#default). If set to `true`, apps without the `LICENSED` app licensing verdict will be rejected. If set to `false`, any app licensing verdict is allowed. The default value is `false`.
  final bool? requireLicensed;

  GoogleFirebaseAppcheckV1PlayIntegrityConfigAccountDetails({
    this.requireLicensed,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1PlayIntegrityConfigAccountDetails.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1PlayIntegrityConfigAccountDetails(
      requireLicensed: json['requireLicensed'],
    );
  }

  @override
  Object toJson() {
    return {if (requireLicensed != null) 'requireLicensed': requireLicensed};
  }

  @override
  String toString() {
    final contents = [
      if (requireLicensed != null) 'requireLicensed=$requireLicensed',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1PlayIntegrityConfigAccountDetails($contents)';
  }
}

/// A settings object specifying application integrity requirements for Android devices running your app. These settings correspond to requirements on the [**application integrity** field](https://developer.android.com/google/play/integrity/verdicts#application-integrity-field) obtained from the Play Integrity API. See the [default responses table](https://developer.android.com/google/play/integrity/setup#default) for a quick summary. The default values for these settings work for most apps, and are recommended.
final class GoogleFirebaseAppcheckV1PlayIntegrityConfigAppIntegrity
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1PlayIntegrityConfigAppIntegrity';

  /// Specifies whether your running app is allowed to have the `UNRECOGNIZED_VERSION` [app recognition verdict](https://developer.android.com/google/play/integrity/verdicts#application-integrity-field). Note that the app recognition verdict `PLAY_RECOGNIZED` is a strong, comprehensive integrity signal that takes into account various other signals, including conditional and optional device integrity responses that you have opted into. If your app is published off-Play, this field should be set to `true` to allow instances of your app installed from off-Play sources to function. If set to `false`, only `PLAY_RECOGNIZED` verdicts are allowed, and both `UNRECOGNIZED_VERSION` and `UNEVALUATED` will be rejected. If set to `true`, any app recognition verdict is allowed. The default value is `false`.
  final bool? allowUnrecognizedVersion;

  GoogleFirebaseAppcheckV1PlayIntegrityConfigAppIntegrity({
    this.allowUnrecognizedVersion,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1PlayIntegrityConfigAppIntegrity.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1PlayIntegrityConfigAppIntegrity(
      allowUnrecognizedVersion: json['allowUnrecognizedVersion'],
    );
  }

  @override
  Object toJson() {
    return {
      if (allowUnrecognizedVersion != null)
        'allowUnrecognizedVersion': allowUnrecognizedVersion,
    };
  }

  @override
  String toString() {
    final contents = [
      if (allowUnrecognizedVersion != null)
        'allowUnrecognizedVersion=$allowUnrecognizedVersion',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1PlayIntegrityConfigAppIntegrity($contents)';
  }
}

/// A settings object specifying device integrity requirements for Android devices running your app. These settings correspond to requirements on the [**device integrity** field](https://developer.android.com/google/play/integrity/verdicts#device-integrity-field) obtained from the Play Integrity API. See the [default responses table](https://developer.android.com/google/play/integrity/setup#default) for a quick summary. Warning: There are also [conditional](https://developer.android.com/google/play/integrity/setup#conditional) as well as [optional](https://developer.android.com/google/play/integrity/setup#optional_device_information) responses that you can receive, but requires additional explicit opt-in from you. The App Check API is **not** responsible for any such opt-ins. The default values for these settings work for most apps, and are recommended.
final class GoogleFirebaseAppcheckV1PlayIntegrityConfigDeviceIntegrity
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1PlayIntegrityConfigDeviceIntegrity';

  /// Specifies the minimum device integrity level in order for the device to be considered valid. Any device with a device recognition verdict lower than this level will be rejected. If this is unspecified, the default level is `NO_INTEGRITY`.
  final GoogleFirebaseAppcheckV1PlayIntegrityConfigDeviceIntegrity_MinDeviceRecognitionLevel?
  minDeviceRecognitionLevel;

  GoogleFirebaseAppcheckV1PlayIntegrityConfigDeviceIntegrity({
    this.minDeviceRecognitionLevel,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1PlayIntegrityConfigDeviceIntegrity.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1PlayIntegrityConfigDeviceIntegrity(
      minDeviceRecognitionLevel: decodeEnum(
        json['minDeviceRecognitionLevel'],
        GoogleFirebaseAppcheckV1PlayIntegrityConfigDeviceIntegrity_MinDeviceRecognitionLevel
            .fromJson,
      ),
    );
  }

  @override
  Object toJson() {
    return {
      if (minDeviceRecognitionLevel != null)
        'minDeviceRecognitionLevel': minDeviceRecognitionLevel!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [
      if (minDeviceRecognitionLevel != null)
        'minDeviceRecognitionLevel=$minDeviceRecognitionLevel',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1PlayIntegrityConfigDeviceIntegrity($contents)';
  }
}

/// The enumerated type for the `minDeviceRecognitionLevel` field.
final class GoogleFirebaseAppcheckV1PlayIntegrityConfigDeviceIntegrity_MinDeviceRecognitionLevel
    extends ProtoEnum {
  /// Default value. Do not specify this value directly. When this default value is detected in a configuration, the `NO_INTEGRITY` default level takes effect.
  static const deviceRecognitionLevelUnspecified =
      GoogleFirebaseAppcheckV1PlayIntegrityConfigDeviceIntegrity_MinDeviceRecognitionLevel(
        'DEVICE_RECOGNITION_LEVEL_UNSPECIFIED',
      );

  /// If this level is set, no explicit device integrity label requirements will be checked. However, because Play Integrity's other features may perform (and require) their own intrinsic device integrity checks, your `app_integrity` and `account_details` settings may still cause some device integrity checks to be performed.
  static const noIntegrity =
      GoogleFirebaseAppcheckV1PlayIntegrityConfigDeviceIntegrity_MinDeviceRecognitionLevel(
        'NO_INTEGRITY',
      );

  /// This level corresponds to the `MEETS_BASIC_INTEGRITY` [optional device recognition label](https://developer.android.com/google/play/integrity/verdicts#optional-device-labels). This value represents the most basic level of device integrity, and is the minimum allowed in App Check's standard implementation of Play Integrity. Warning: Because this is an optional response, you **must** first explicitly [opt in your app in the Play Console](https://developer.android.com/google/play/integrity/setup#optional) in order to receive this label. Without this opt-in, **your app may break** for any user whose device is eligible for `MEETS_BASIC_INTEGRITY` but not `MEETS_DEVICE_INTEGRITY`. This API is **not** responsible for any such opt-ins.
  static const meetsBasicIntegrity =
      GoogleFirebaseAppcheckV1PlayIntegrityConfigDeviceIntegrity_MinDeviceRecognitionLevel(
        'MEETS_BASIC_INTEGRITY',
      );

  /// This level corresponds to the `MEETS_DEVICE_INTEGRITY` [device recognition verdict](https://developer.android.com/google/play/integrity/verdicts#device-integrity-field). Any app integrated with Play Integrity will automatically be eligible to receive this label without any additional action from you. At this level, devices that have the `MEETS_BASIC_INTEGRITY` label but **not** the `MEETS_DEVICE_INTEGRITY` label will be rejected.
  static const meetsDeviceIntegrity =
      GoogleFirebaseAppcheckV1PlayIntegrityConfigDeviceIntegrity_MinDeviceRecognitionLevel(
        'MEETS_DEVICE_INTEGRITY',
      );

  /// This level corresponds to the `MEETS_STRONG_INTEGRITY` [optional device recognition label](https://developer.android.com/google/play/integrity/verdicts#optional-device-labels). This value represents the highest level of device integrity. At this level, devices that have the `MEETS_BASIC_INTEGRITY` or `MEETS_DEVICE_INTEGRITY` but **not** the `MEETS_STRONG_INTEGRITY` label will be rejected. Warning: Because this is an optional response, you **must** first explicitly [opt in your app in the Play Console](https://developer.android.com/google/play/integrity/setup#optional) in order to receive this label. Without this opt-in, **your app may break** for any user whose device is eligible for `MEETS_STRONG_INTEGRITY`. This API is **not** responsible for any such opt-ins.
  static const meetsStrongIntegrity =
      GoogleFirebaseAppcheckV1PlayIntegrityConfigDeviceIntegrity_MinDeviceRecognitionLevel(
        'MEETS_STRONG_INTEGRITY',
      );

  const GoogleFirebaseAppcheckV1PlayIntegrityConfigDeviceIntegrity_MinDeviceRecognitionLevel(
    super.value,
  );

  factory GoogleFirebaseAppcheckV1PlayIntegrityConfigDeviceIntegrity_MinDeviceRecognitionLevel.fromJson(
    String json,
  ) =>
      GoogleFirebaseAppcheckV1PlayIntegrityConfigDeviceIntegrity_MinDeviceRecognitionLevel(
        json,
      );

  @override
  String toString() => 'minDeviceRecognitionLevel.$value';
}

/// A JWK as specified by [section 4 of RFC 7517](https://tools.ietf.org/html/rfc7517#section-4) and [section 6.3.1 of RFC 7518](https://tools.ietf.org/html/rfc7518#section-6.3.1).
final class GoogleFirebaseAppcheckV1PublicJwk extends ProtoMessage {
  static const String fullyQualifiedName = '.GoogleFirebaseAppcheckV1PublicJwk';

  /// See [section 4.4 of RFC 7517](https://tools.ietf.org/html/rfc7517#section-4.4).
  final String? alg;

  /// See [section 6.3.1.2 of RFC 7518](https://tools.ietf.org/html/rfc7518#section-6.3.1.2).
  final String? e;

  /// See [section 4.5 of RFC 7517](https://tools.ietf.org/html/rfc7517#section-4.5).
  final String? kid;

  /// See [section 4.1 of RFC 7517](https://tools.ietf.org/html/rfc7517#section-4.1).
  final String? kty;

  /// See [section 6.3.1.1 of RFC 7518](https://tools.ietf.org/html/rfc7518#section-6.3.1.1).
  final String? n;

  /// See [section 4.2 of RFC 7517](https://tools.ietf.org/html/rfc7517#section-4.2).
  final String? use;

  GoogleFirebaseAppcheckV1PublicJwk({
    this.alg,
    this.e,
    this.kid,
    this.kty,
    this.n,
    this.use,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1PublicJwk.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1PublicJwk(
      alg: json['alg'],
      e: json['e'],
      kid: json['kid'],
      kty: json['kty'],
      n: json['n'],
      use: json['use'],
    );
  }

  @override
  Object toJson() {
    return {
      if (alg != null) 'alg': alg,
      if (e != null) 'e': e,
      if (kid != null) 'kid': kid,
      if (kty != null) 'kty': kty,
      if (n != null) 'n': n,
      if (use != null) 'use': use,
    };
  }

  @override
  String toString() {
    final contents = [
      if (alg != null) 'alg=$alg',
      if (e != null) 'e=$e',
      if (kid != null) 'kid=$kid',
      if (kty != null) 'kty=$kty',
      if (n != null) 'n=$n',
      if (use != null) 'use=$use',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1PublicJwk($contents)';
  }
}

/// The currently active set of public keys that can be used to verify App Check tokens. This object is a JWK set as specified by [section 5 of RFC 7517](https://tools.ietf.org/html/rfc7517#section-5). For security, the response **must not** be cached for longer than six hours.
final class GoogleFirebaseAppcheckV1PublicJwkSet extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1PublicJwkSet';

  /// The set of public keys. See [section 5.1 of RFC 7517](https://tools.ietf.org/html/rfc7517#section-5).
  final List<GoogleFirebaseAppcheckV1PublicJwk>? keys;

  GoogleFirebaseAppcheckV1PublicJwkSet({this.keys}) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1PublicJwkSet.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1PublicJwkSet(
      keys: decodeListMessage(
        json['keys'],
        GoogleFirebaseAppcheckV1PublicJwk.fromJson,
      ),
    );
  }

  @override
  Object toJson() {
    return {if (keys != null) 'keys': encodeList(keys)};
  }

  @override
  String toString() => 'GoogleFirebaseAppcheckV1PublicJwkSet()';
}

/// An app's reCAPTCHA Enterprise configuration object. This configuration is used by ExchangeRecaptchaEnterpriseToken to validate reCAPTCHA tokens issued to apps by reCAPTCHA Enterprise. It also controls certain properties of the returned `AppCheckToken`, such as its ttl.
final class GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfig
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfig';

  /// Required. The relative resource name of the reCAPTCHA Enterprise configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig ```
  final String? name;

  /// Specifies risk tolerance and requirements for your application. These settings correspond to requirements on the [**`riskAnalysis`**](https://cloud.google.com/recaptcha/docs/interpret-assessment-website#interpret_assessment) tuple in the assessment obtained from reCAPTCHA Enterprise. The default values for these settings work for most apps, and are recommended.
  final GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfigRiskAnalysis?
  riskAnalysis;

  /// The score-based site key [created in reCAPTCHA Enterprise](https://cloud.google.com/recaptcha-enterprise/docs/create-key#creating_a_site_key) used to [invoke reCAPTCHA and generate the reCAPTCHA tokens](https://cloud.google.com/recaptcha-enterprise/docs/instrument-web-pages) for your application. Important: This is *not* the `site_secret` (as it is in reCAPTCHA v3), but rather your score-based reCAPTCHA Enterprise site key.
  final String? siteKey;

  /// Specifies the duration for which App Check tokens exchanged from reCAPTCHA Enterprise tokens will be valid. If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
  final Duration? tokenTtl;

  GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfig({
    this.name,
    this.riskAnalysis,
    this.siteKey,
    this.tokenTtl,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfig.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfig(
      name: json['name'],
      riskAnalysis: decode(
        json['riskAnalysis'],
        GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfigRiskAnalysis.fromJson,
      ),
      siteKey: json['siteKey'],
      tokenTtl: decodeCustom(json['tokenTtl'], Duration.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (name != null) 'name': name,
      if (riskAnalysis != null) 'riskAnalysis': riskAnalysis!.toJson(),
      if (siteKey != null) 'siteKey': siteKey,
      if (tokenTtl != null) 'tokenTtl': tokenTtl!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [
      if (name != null) 'name=$name',
      if (siteKey != null) 'siteKey=$siteKey',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfig($contents)';
  }
}

/// A settings object specifying risk tolerance and requirements for your application. These settings correspond to requirements on the [**`riskAnalysis`**](https://cloud.google.com/recaptcha/docs/interpret-assessment-website#interpret_assessment) tuple in the assessment obtained from reCAPTCHA Enterprise. The default values for these settings work for most apps, and are recommended.
final class GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfigRiskAnalysis
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfigRiskAnalysis';

  /// Specifies a minimum score required for a reCAPTCHA token to be considered valid. If its score is greater than or equal to this value, it will be accepted; otherwise, it will be rejected. The value must be between 0.0 and 1.0. The default value is 0.5.
  final double? minValidScore;

  GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfigRiskAnalysis({
    this.minValidScore,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfigRiskAnalysis.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfigRiskAnalysis(
      minValidScore: decodeDouble(json['minValidScore']),
    );
  }

  @override
  Object toJson() {
    return {
      if (minValidScore != null) 'minValidScore': encodeDouble(minValidScore),
    };
  }

  @override
  String toString() {
    final contents = [
      if (minValidScore != null) 'minValidScore=$minValidScore',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfigRiskAnalysis($contents)';
  }
}

/// An app's reCAPTCHA v3 configuration object. This configuration is used by ExchangeRecaptchaV3Token to validate reCAPTCHA tokens issued to apps by reCAPTCHA v3. It also controls certain properties of the returned `AppCheckToken`, such as its ttl.
final class GoogleFirebaseAppcheckV1RecaptchaV3Config extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1RecaptchaV3Config';

  /// Specifies a minimum score required for a reCAPTCHA token to be considered valid. If its score is greater than or equal to this value, it will be accepted; otherwise, it will be rejected. The value must be between 0.0 and 1.0. The default value is 0.5.
  final double? minValidScore;

  /// Required. The relative resource name of the reCAPTCHA v3 configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/recaptchaV3Config ```
  final String? name;

  /// Required. Input only. The site secret used to identify your service for reCAPTCHA v3 verification. For security reasons, this field will never be populated in any response.
  final String? siteSecret;

  /// Output only. Whether the `site_secret` field was previously set. Since we will never return the `site_secret` field, this field is the only way to find out whether it was previously set.
  final bool? siteSecretSet;

  /// Specifies the duration for which App Check tokens exchanged from reCAPTCHA tokens will be valid. If unset, a default value of 1 day is assumed. Must be between 30 minutes and 7 days, inclusive.
  final Duration? tokenTtl;

  GoogleFirebaseAppcheckV1RecaptchaV3Config({
    this.minValidScore,
    this.name,
    this.siteSecret,
    this.siteSecretSet,
    this.tokenTtl,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1RecaptchaV3Config.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1RecaptchaV3Config(
      minValidScore: decodeDouble(json['minValidScore']),
      name: json['name'],
      siteSecret: json['siteSecret'],
      siteSecretSet: json['siteSecretSet'],
      tokenTtl: decodeCustom(json['tokenTtl'], Duration.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (minValidScore != null) 'minValidScore': encodeDouble(minValidScore),
      if (name != null) 'name': name,
      if (siteSecret != null) 'siteSecret': siteSecret,
      if (siteSecretSet != null) 'siteSecretSet': siteSecretSet,
      if (tokenTtl != null) 'tokenTtl': tokenTtl!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [
      if (minValidScore != null) 'minValidScore=$minValidScore',
      if (name != null) 'name=$name',
      if (siteSecret != null) 'siteSecret=$siteSecret',
      if (siteSecretSet != null) 'siteSecretSet=$siteSecretSet',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1RecaptchaV3Config($contents)';
  }
}

/// App Check enforcement policy for a specific resource of a Google service supported by App Check. Note that this policy will override the service-level configuration.
final class GoogleFirebaseAppcheckV1ResourcePolicy extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1ResourcePolicy';

  /// Required. The App Check enforcement mode for this resource. This will override the EnforcementMode setting on the service.
  final GoogleFirebaseAppcheckV1ResourcePolicy_EnforcementMode? enforcementMode;

  /// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. This etag is strongly validated as defined by RFC 7232.
  final String? etag;

  /// Required. Identifier. The relative name of the resource policy object, in the format: ``` projects/{project_number}/services/{service_id}/resourcePolicies/{resource_policy_id} ``` Note that the `service_id` element must be a supported service ID. Currently, the following service IDs are supported: * `oauth2.googleapis.com` (Google Identity for iOS) `resource_policy_id` is a system-generated UID.
  final String? name;

  /// Required. Service specific name of the resource object to which this policy applies, in the format: * **iOS OAuth clients** (Google Identity for iOS): `//oauth2.googleapis.com/projects/{project_number}/oauthClients/{oauth_client_id}` Note that the resource must belong to the service specified in the `name` and be from the same project as this policy, but the resource is allowed to be missing at the time of creation of this policy; in that case, we make a best-effort attempt at respecting this policy, but it may not have any effect until the resource is fully created.
  final String? targetResource;

  /// Output only. Timestamp when this resource policy configuration object was most recently updated.
  final Timestamp? updateTime;

  GoogleFirebaseAppcheckV1ResourcePolicy({
    this.enforcementMode,
    this.etag,
    this.name,
    this.targetResource,
    this.updateTime,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1ResourcePolicy.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1ResourcePolicy(
      enforcementMode: decodeEnum(
        json['enforcementMode'],
        GoogleFirebaseAppcheckV1ResourcePolicy_EnforcementMode.fromJson,
      ),
      etag: json['etag'],
      name: json['name'],
      targetResource: json['targetResource'],
      updateTime: decodeCustom(json['updateTime'], Timestamp.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (enforcementMode != null) 'enforcementMode': enforcementMode!.toJson(),
      if (etag != null) 'etag': etag,
      if (name != null) 'name': name,
      if (targetResource != null) 'targetResource': targetResource,
      if (updateTime != null) 'updateTime': updateTime!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [
      if (enforcementMode != null) 'enforcementMode=$enforcementMode',
      if (etag != null) 'etag=$etag',
      if (name != null) 'name=$name',
      if (targetResource != null) 'targetResource=$targetResource',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1ResourcePolicy($contents)';
  }
}

/// The enumerated type for the `enforcementMode` field.
final class GoogleFirebaseAppcheckV1ResourcePolicy_EnforcementMode
    extends ProtoEnum {
  /// Firebase App Check is not enforced for the service, nor are App Check metrics collected. Though the service is not protected by App Check in this mode, other applicable protections, such as user authorization, are still enforced. An unconfigured service is in this mode by default.
  static const off = GoogleFirebaseAppcheckV1ResourcePolicy_EnforcementMode(
    'OFF',
  );

  /// Firebase App Check is not enforced for the service. App Check metrics are collected to help you decide when to turn on enforcement for the service. Though the service is not protected by App Check in this mode, other applicable protections, such as user authorization, are still enforced. Some services require certain conditions to be met before they will work with App Check, such as requiring you to upgrade to a specific service tier. Until those requirements are met for a service, this `UNENFORCED` setting will have no effect and App Check will not work with that service.
  static const unenforced =
      GoogleFirebaseAppcheckV1ResourcePolicy_EnforcementMode('UNENFORCED');

  /// Firebase App Check is enforced for the service. The service will reject any request that attempts to access your project's resources if it does not have valid App Check token attached, with some exceptions depending on the service; for example, some services will still allow requests bearing the developer's privileged service account credentials without an App Check token. App Check metrics continue to be collected to help you detect issues with your App Check integration and monitor the composition of your callers. While the service is protected by App Check, other applicable protections, such as user authorization, continue to be enforced at the same time. Use caution when choosing to enforce App Check on a Firebase service. If your users have not updated to an App Check capable version of your app, their apps will no longer be able to use your Firebase services that are enforcing App Check. App Check metrics can help you decide whether to enforce App Check on your Firebase services. If your app has not launched yet, you should enable enforcement immediately, since there are no outdated clients in use. Some services require certain conditions to be met before they will work with App Check, such as requiring you to upgrade to a specific service tier. Until those requirements are met for a service, this `ENFORCED` setting will have no effect and App Check will not work with that service.
  static const enforced =
      GoogleFirebaseAppcheckV1ResourcePolicy_EnforcementMode('ENFORCED');

  const GoogleFirebaseAppcheckV1ResourcePolicy_EnforcementMode(super.value);

  factory GoogleFirebaseAppcheckV1ResourcePolicy_EnforcementMode.fromJson(
    String json,
  ) => GoogleFirebaseAppcheckV1ResourcePolicy_EnforcementMode(json);

  @override
  String toString() => 'enforcementMode.$value';
}

/// An app's SafetyNet configuration object. This configuration controls certain properties of the `AppCheckToken` returned by ExchangeSafetyNetToken, such as its ttl. Note that your registered SHA-256 certificate fingerprints are used to validate tokens issued by SafetyNet; please register them via the Firebase Console or programmatically via the [Firebase Management Service](https://firebase.google.com/docs/projects/api/reference/rest/v11/projects.androidApps.sha/create).
final class GoogleFirebaseAppcheckV1SafetyNetConfig extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1SafetyNetConfig';

  /// Required. The relative resource name of the SafetyNet configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/safetyNetConfig ```
  final String? name;

  /// Specifies the duration for which App Check tokens exchanged from SafetyNet tokens will be valid. If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
  final Duration? tokenTtl;

  GoogleFirebaseAppcheckV1SafetyNetConfig({this.name, this.tokenTtl})
    : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1SafetyNetConfig.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1SafetyNetConfig(
      name: json['name'],
      tokenTtl: decodeCustom(json['tokenTtl'], Duration.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (name != null) 'name': name,
      if (tokenTtl != null) 'tokenTtl': tokenTtl!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [if (name != null) 'name=$name'].join(',');
    return 'GoogleFirebaseAppcheckV1SafetyNetConfig($contents)';
  }
}

/// The enforcement configuration for a Firebase service supported by App Check.
final class GoogleFirebaseAppcheckV1Service extends ProtoMessage {
  static const String fullyQualifiedName = '.GoogleFirebaseAppcheckV1Service';

  /// Required. The App Check enforcement mode for this service.
  final GoogleFirebaseAppcheckV1Service_EnforcementMode? enforcementMode;

  /// Required. The relative resource name of the service configuration object, in the format: ``` projects/{project_number}/services/{service_id} ``` Note that the `service_id` element must be a supported service ID. Currently, the following service IDs are supported: * `firebasestorage.googleapis.com` (Cloud Storage for Firebase) * `firebasedatabase.googleapis.com` (Firebase Realtime Database) * `firestore.googleapis.com` (Cloud Firestore) * `oauth2.googleapis.com` (Google Identity for iOS)
  final String? name;

  GoogleFirebaseAppcheckV1Service({this.enforcementMode, this.name})
    : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1Service.fromJson(Map<String, dynamic> json) {
    return GoogleFirebaseAppcheckV1Service(
      enforcementMode: decodeEnum(
        json['enforcementMode'],
        GoogleFirebaseAppcheckV1Service_EnforcementMode.fromJson,
      ),
      name: json['name'],
    );
  }

  @override
  Object toJson() {
    return {
      if (enforcementMode != null) 'enforcementMode': enforcementMode!.toJson(),
      if (name != null) 'name': name,
    };
  }

  @override
  String toString() {
    final contents = [
      if (enforcementMode != null) 'enforcementMode=$enforcementMode',
      if (name != null) 'name=$name',
    ].join(',');
    return 'GoogleFirebaseAppcheckV1Service($contents)';
  }
}

/// The enumerated type for the `enforcementMode` field.
final class GoogleFirebaseAppcheckV1Service_EnforcementMode extends ProtoEnum {
  /// Firebase App Check is not enforced for the service, nor are App Check metrics collected. Though the service is not protected by App Check in this mode, other applicable protections, such as user authorization, are still enforced. An unconfigured service is in this mode by default.
  static const off = GoogleFirebaseAppcheckV1Service_EnforcementMode('OFF');

  /// Firebase App Check is not enforced for the service. App Check metrics are collected to help you decide when to turn on enforcement for the service. Though the service is not protected by App Check in this mode, other applicable protections, such as user authorization, are still enforced. Some services require certain conditions to be met before they will work with App Check, such as requiring you to upgrade to a specific service tier. Until those requirements are met for a service, this `UNENFORCED` setting will have no effect and App Check will not work with that service.
  static const unenforced = GoogleFirebaseAppcheckV1Service_EnforcementMode(
    'UNENFORCED',
  );

  /// Firebase App Check is enforced for the service. The service will reject any request that attempts to access your project's resources if it does not have valid App Check token attached, with some exceptions depending on the service; for example, some services will still allow requests bearing the developer's privileged service account credentials without an App Check token. App Check metrics continue to be collected to help you detect issues with your App Check integration and monitor the composition of your callers. While the service is protected by App Check, other applicable protections, such as user authorization, continue to be enforced at the same time. Use caution when choosing to enforce App Check on a Firebase service. If your users have not updated to an App Check capable version of your app, their apps will no longer be able to use your Firebase services that are enforcing App Check. App Check metrics can help you decide whether to enforce App Check on your Firebase services. If your app has not launched yet, you should enable enforcement immediately, since there are no outdated clients in use. Some services require certain conditions to be met before they will work with App Check, such as requiring you to upgrade to a specific service tier. Until those requirements are met for a service, this `ENFORCED` setting will have no effect and App Check will not work with that service.
  static const enforced = GoogleFirebaseAppcheckV1Service_EnforcementMode(
    'ENFORCED',
  );

  const GoogleFirebaseAppcheckV1Service_EnforcementMode(super.value);

  factory GoogleFirebaseAppcheckV1Service_EnforcementMode.fromJson(
    String json,
  ) => GoogleFirebaseAppcheckV1Service_EnforcementMode(json);

  @override
  String toString() => 'enforcementMode.$value';
}

/// Request message for the UpdateResourcePolicy method as well as an individual update message for the BatchUpdateResourcePolicies method.
final class GoogleFirebaseAppcheckV1UpdateResourcePolicyRequest
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1UpdateResourcePolicyRequest';

  /// Required. The ResourcePolicy to update. The ResourcePolicy's `name` field is used to identify the ResourcePolicy to be updated, in the format: ``` projects/{project_number}/services/{service_id}/resourcePolicies/{resource_policy_id} ``` Note that the `service_id` element must be a supported service ID. Currently, the following service IDs are supported: * `oauth2.googleapis.com` (Google Identity for iOS)
  final GoogleFirebaseAppcheckV1ResourcePolicy? resourcePolicy;

  /// Required. A comma-separated list of names of fields in the ResourcePolicy to update. Example: `enforcement_mode`.
  final FieldMask? updateMask;

  GoogleFirebaseAppcheckV1UpdateResourcePolicyRequest({
    this.resourcePolicy,
    this.updateMask,
  }) : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1UpdateResourcePolicyRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1UpdateResourcePolicyRequest(
      resourcePolicy: decode(
        json['resourcePolicy'],
        GoogleFirebaseAppcheckV1ResourcePolicy.fromJson,
      ),
      updateMask: decodeCustom(json['updateMask'], FieldMask.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (resourcePolicy != null) 'resourcePolicy': resourcePolicy!.toJson(),
      if (updateMask != null) 'updateMask': updateMask!.toJson(),
    };
  }

  @override
  String toString() => 'GoogleFirebaseAppcheckV1UpdateResourcePolicyRequest()';
}

/// Request message for the UpdateService method as well as an individual update message for the BatchUpdateServices method.
final class GoogleFirebaseAppcheckV1UpdateServiceRequest extends ProtoMessage {
  static const String fullyQualifiedName =
      '.GoogleFirebaseAppcheckV1UpdateServiceRequest';

  /// Required. The Service to update. The Service's `name` field is used to identify the Service to be updated, in the format: ``` projects/{project_number}/services/{service_id} ``` Note that the `service_id` element must be a supported service ID. Currently, the following service IDs are supported: * `firebasestorage.googleapis.com` (Cloud Storage for Firebase) * `firebasedatabase.googleapis.com` (Firebase Realtime Database) * `firestore.googleapis.com` (Cloud Firestore) * `oauth2.googleapis.com` (Google Identity for iOS)
  final GoogleFirebaseAppcheckV1Service? service;

  /// Required. A comma-separated list of names of fields in the Service to update. Example: `enforcement_mode`.
  final FieldMask? updateMask;

  GoogleFirebaseAppcheckV1UpdateServiceRequest({this.service, this.updateMask})
    : super(fullyQualifiedName);

  factory GoogleFirebaseAppcheckV1UpdateServiceRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return GoogleFirebaseAppcheckV1UpdateServiceRequest(
      service: decode(
        json['service'],
        GoogleFirebaseAppcheckV1Service.fromJson,
      ),
      updateMask: decodeCustom(json['updateMask'], FieldMask.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (service != null) 'service': service!.toJson(),
      if (updateMask != null) 'updateMask': updateMask!.toJson(),
    };
  }

  @override
  String toString() => 'GoogleFirebaseAppcheckV1UpdateServiceRequest()';
}

/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
final class GoogleProtobufEmpty extends ProtoMessage {
  static const String fullyQualifiedName = '.GoogleProtobufEmpty';

  GoogleProtobufEmpty() : super(fullyQualifiedName);

  factory GoogleProtobufEmpty.fromJson(Map<String, dynamic> json) {
    return GoogleProtobufEmpty();
  }

  @override
  Object toJson() {
    return {};
  }

  @override
  String toString() => 'GoogleProtobufEmpty()';
}

/// Synthetic request message for the [get()][.jwks.get] method.
final class Jwks_GetRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.jwks.getRequest';

  /// Required. The relative resource name to the public JWK set. Must always be exactly the string `jwks`.
  final String name;

  Jwks_GetRequest({required this.name}) : super(fullyQualifiedName);

  factory Jwks_GetRequest.fromJson(Map<String, dynamic> json) {
    return Jwks_GetRequest(name: json['name']);
  }

  @override
  Object toJson() {
    return {'name': name};
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'getRequest($contents)';
  }
}

/// Synthetic request message for the [exchangeAppAttestAssertion()][.oauthClients.exchangeAppAttestAssertion] method.
final class OauthClients_ExchangeAppAttestAssertionRequest
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.oauthClients.exchangeAppAttestAssertionRequest';

  /// Required. The relative resource name of the iOS app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
  final String app;

  /// Synthetic request body field for the [exchangeAppAttestAssertion()][.oauthClients.exchangeAppAttestAssertion] method.
  final GoogleFirebaseAppcheckV1ExchangeAppAttestAssertionRequest body;

  OauthClients_ExchangeAppAttestAssertionRequest({
    required this.app,
    required this.body,
  }) : super(fullyQualifiedName);

  factory OauthClients_ExchangeAppAttestAssertionRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return OauthClients_ExchangeAppAttestAssertionRequest(
      app: json['app'],
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1ExchangeAppAttestAssertionRequest.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {'app': app, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['app=$app'].join(',');
    return 'exchangeAppAttestAssertionRequest($contents)';
  }
}

/// Synthetic request message for the [exchangeAppAttestAttestation()][.oauthClients.exchangeAppAttestAttestation] method.
final class OauthClients_ExchangeAppAttestAttestationRequest
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.oauthClients.exchangeAppAttestAttestationRequest';

  /// Required. The relative resource name of the iOS app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
  final String app;

  /// Synthetic request body field for the [exchangeAppAttestAttestation()][.oauthClients.exchangeAppAttestAttestation] method.
  final GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationRequest body;

  OauthClients_ExchangeAppAttestAttestationRequest({
    required this.app,
    required this.body,
  }) : super(fullyQualifiedName);

  factory OauthClients_ExchangeAppAttestAttestationRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return OauthClients_ExchangeAppAttestAttestationRequest(
      app: json['app'],
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationRequest.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {'app': app, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['app=$app'].join(',');
    return 'exchangeAppAttestAttestationRequest($contents)';
  }
}

/// Synthetic request message for the [exchangeDebugToken()][.oauthClients.exchangeDebugToken] method.
final class OauthClients_ExchangeDebugTokenRequest extends ProtoMessage {
  static const String fullyQualifiedName =
      '.oauthClients.exchangeDebugTokenRequest';

  /// Required. The relative resource name of the app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
  final String app;

  /// Synthetic request body field for the [exchangeDebugToken()][.oauthClients.exchangeDebugToken] method.
  final GoogleFirebaseAppcheckV1ExchangeDebugTokenRequest body;

  OauthClients_ExchangeDebugTokenRequest({
    required this.app,
    required this.body,
  }) : super(fullyQualifiedName);

  factory OauthClients_ExchangeDebugTokenRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return OauthClients_ExchangeDebugTokenRequest(
      app: json['app'],
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1ExchangeDebugTokenRequest.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {'app': app, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['app=$app'].join(',');
    return 'exchangeDebugTokenRequest($contents)';
  }
}

/// Synthetic request message for the [generateAppAttestChallenge()][.oauthClients.generateAppAttestChallenge] method.
final class OauthClients_GenerateAppAttestChallengeRequest
    extends ProtoMessage {
  static const String fullyQualifiedName =
      '.oauthClients.generateAppAttestChallengeRequest';

  /// Required. The relative resource name of the iOS app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
  final String app;

  /// Synthetic request body field for the [generateAppAttestChallenge()][.oauthClients.generateAppAttestChallenge] method.
  final GoogleFirebaseAppcheckV1GenerateAppAttestChallengeRequest body;

  OauthClients_GenerateAppAttestChallengeRequest({
    required this.app,
    required this.body,
  }) : super(fullyQualifiedName);

  factory OauthClients_GenerateAppAttestChallengeRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return OauthClients_GenerateAppAttestChallengeRequest(
      app: json['app'],
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1GenerateAppAttestChallengeRequest.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {'app': app, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['app=$app'].join(',');
    return 'generateAppAttestChallengeRequest($contents)';
  }
}

/// Synthetic request message for the [exchangeAppAttestAssertion()][.apps.exchangeAppAttestAssertion] method.
final class Apps_ExchangeAppAttestAssertionRequest extends ProtoMessage {
  static const String fullyQualifiedName =
      '.apps.exchangeAppAttestAssertionRequest';

  /// Required. The relative resource name of the iOS app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
  final String app;

  /// Synthetic request body field for the [exchangeAppAttestAssertion()][.apps.exchangeAppAttestAssertion] method.
  final GoogleFirebaseAppcheckV1ExchangeAppAttestAssertionRequest body;

  Apps_ExchangeAppAttestAssertionRequest({
    required this.app,
    required this.body,
  }) : super(fullyQualifiedName);

  factory Apps_ExchangeAppAttestAssertionRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return Apps_ExchangeAppAttestAssertionRequest(
      app: json['app'],
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1ExchangeAppAttestAssertionRequest.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {'app': app, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['app=$app'].join(',');
    return 'exchangeAppAttestAssertionRequest($contents)';
  }
}

/// Synthetic request message for the [exchangeAppAttestAttestation()][.apps.exchangeAppAttestAttestation] method.
final class Apps_ExchangeAppAttestAttestationRequest extends ProtoMessage {
  static const String fullyQualifiedName =
      '.apps.exchangeAppAttestAttestationRequest';

  /// Required. The relative resource name of the iOS app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
  final String app;

  /// Synthetic request body field for the [exchangeAppAttestAttestation()][.apps.exchangeAppAttestAttestation] method.
  final GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationRequest body;

  Apps_ExchangeAppAttestAttestationRequest({
    required this.app,
    required this.body,
  }) : super(fullyQualifiedName);

  factory Apps_ExchangeAppAttestAttestationRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return Apps_ExchangeAppAttestAttestationRequest(
      app: json['app'],
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationRequest.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {'app': app, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['app=$app'].join(',');
    return 'exchangeAppAttestAttestationRequest($contents)';
  }
}

/// Synthetic request message for the [exchangeCustomToken()][.apps.exchangeCustomToken] method.
final class Apps_ExchangeCustomTokenRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.apps.exchangeCustomTokenRequest';

  /// Required. The relative resource name of the app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
  final String app;

  /// Synthetic request body field for the [exchangeCustomToken()][.apps.exchangeCustomToken] method.
  final GoogleFirebaseAppcheckV1ExchangeCustomTokenRequest body;

  Apps_ExchangeCustomTokenRequest({required this.app, required this.body})
    : super(fullyQualifiedName);

  factory Apps_ExchangeCustomTokenRequest.fromJson(Map<String, dynamic> json) {
    return Apps_ExchangeCustomTokenRequest(
      app: json['app'],
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1ExchangeCustomTokenRequest.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {'app': app, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['app=$app'].join(',');
    return 'exchangeCustomTokenRequest($contents)';
  }
}

/// Synthetic request message for the [exchangeDebugToken()][.apps.exchangeDebugToken] method.
final class Apps_ExchangeDebugTokenRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.apps.exchangeDebugTokenRequest';

  /// Required. The relative resource name of the app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
  final String app;

  /// Synthetic request body field for the [exchangeDebugToken()][.apps.exchangeDebugToken] method.
  final GoogleFirebaseAppcheckV1ExchangeDebugTokenRequest body;

  Apps_ExchangeDebugTokenRequest({required this.app, required this.body})
    : super(fullyQualifiedName);

  factory Apps_ExchangeDebugTokenRequest.fromJson(Map<String, dynamic> json) {
    return Apps_ExchangeDebugTokenRequest(
      app: json['app'],
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1ExchangeDebugTokenRequest.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {'app': app, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['app=$app'].join(',');
    return 'exchangeDebugTokenRequest($contents)';
  }
}

/// Synthetic request message for the [exchangeDeviceCheckToken()][.apps.exchangeDeviceCheckToken] method.
final class Apps_ExchangeDeviceCheckTokenRequest extends ProtoMessage {
  static const String fullyQualifiedName =
      '.apps.exchangeDeviceCheckTokenRequest';

  /// Required. The relative resource name of the iOS app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
  final String app;

  /// Synthetic request body field for the [exchangeDeviceCheckToken()][.apps.exchangeDeviceCheckToken] method.
  final GoogleFirebaseAppcheckV1ExchangeDeviceCheckTokenRequest body;

  Apps_ExchangeDeviceCheckTokenRequest({required this.app, required this.body})
    : super(fullyQualifiedName);

  factory Apps_ExchangeDeviceCheckTokenRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return Apps_ExchangeDeviceCheckTokenRequest(
      app: json['app'],
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1ExchangeDeviceCheckTokenRequest.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {'app': app, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['app=$app'].join(',');
    return 'exchangeDeviceCheckTokenRequest($contents)';
  }
}

/// Synthetic request message for the [exchangePlayIntegrityToken()][.apps.exchangePlayIntegrityToken] method.
final class Apps_ExchangePlayIntegrityTokenRequest extends ProtoMessage {
  static const String fullyQualifiedName =
      '.apps.exchangePlayIntegrityTokenRequest';

  /// Required. The relative resource name of the Android app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
  final String app;

  /// Synthetic request body field for the [exchangePlayIntegrityToken()][.apps.exchangePlayIntegrityToken] method.
  final GoogleFirebaseAppcheckV1ExchangePlayIntegrityTokenRequest body;

  Apps_ExchangePlayIntegrityTokenRequest({
    required this.app,
    required this.body,
  }) : super(fullyQualifiedName);

  factory Apps_ExchangePlayIntegrityTokenRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return Apps_ExchangePlayIntegrityTokenRequest(
      app: json['app'],
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1ExchangePlayIntegrityTokenRequest.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {'app': app, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['app=$app'].join(',');
    return 'exchangePlayIntegrityTokenRequest($contents)';
  }
}

/// Synthetic request message for the [exchangeRecaptchaEnterpriseToken()][.apps.exchangeRecaptchaEnterpriseToken] method.
final class Apps_ExchangeRecaptchaEnterpriseTokenRequest extends ProtoMessage {
  static const String fullyQualifiedName =
      '.apps.exchangeRecaptchaEnterpriseTokenRequest';

  /// Required. The relative resource name of the web app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
  final String app;

  /// Synthetic request body field for the [exchangeRecaptchaEnterpriseToken()][.apps.exchangeRecaptchaEnterpriseToken] method.
  final GoogleFirebaseAppcheckV1ExchangeRecaptchaEnterpriseTokenRequest body;

  Apps_ExchangeRecaptchaEnterpriseTokenRequest({
    required this.app,
    required this.body,
  }) : super(fullyQualifiedName);

  factory Apps_ExchangeRecaptchaEnterpriseTokenRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return Apps_ExchangeRecaptchaEnterpriseTokenRequest(
      app: json['app'],
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1ExchangeRecaptchaEnterpriseTokenRequest
            .fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {'app': app, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['app=$app'].join(',');
    return 'exchangeRecaptchaEnterpriseTokenRequest($contents)';
  }
}

/// Synthetic request message for the [exchangeRecaptchaV3Token()][.apps.exchangeRecaptchaV3Token] method.
final class Apps_ExchangeRecaptchaV3TokenRequest extends ProtoMessage {
  static const String fullyQualifiedName =
      '.apps.exchangeRecaptchaV3TokenRequest';

  /// Required. The relative resource name of the web app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
  final String app;

  /// Synthetic request body field for the [exchangeRecaptchaV3Token()][.apps.exchangeRecaptchaV3Token] method.
  final GoogleFirebaseAppcheckV1ExchangeRecaptchaV3TokenRequest body;

  Apps_ExchangeRecaptchaV3TokenRequest({required this.app, required this.body})
    : super(fullyQualifiedName);

  factory Apps_ExchangeRecaptchaV3TokenRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return Apps_ExchangeRecaptchaV3TokenRequest(
      app: json['app'],
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1ExchangeRecaptchaV3TokenRequest.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {'app': app, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['app=$app'].join(',');
    return 'exchangeRecaptchaV3TokenRequest($contents)';
  }
}

/// Synthetic request message for the [exchangeSafetyNetToken()][.apps.exchangeSafetyNetToken] method.
final class Apps_ExchangeSafetyNetTokenRequest extends ProtoMessage {
  static const String fullyQualifiedName =
      '.apps.exchangeSafetyNetTokenRequest';

  /// Required. The relative resource name of the Android app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
  final String app;

  /// Synthetic request body field for the [exchangeSafetyNetToken()][.apps.exchangeSafetyNetToken] method.
  final GoogleFirebaseAppcheckV1ExchangeSafetyNetTokenRequest body;

  Apps_ExchangeSafetyNetTokenRequest({required this.app, required this.body})
    : super(fullyQualifiedName);

  factory Apps_ExchangeSafetyNetTokenRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return Apps_ExchangeSafetyNetTokenRequest(
      app: json['app'],
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1ExchangeSafetyNetTokenRequest.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {'app': app, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['app=$app'].join(',');
    return 'exchangeSafetyNetTokenRequest($contents)';
  }
}

/// Synthetic request message for the [generateAppAttestChallenge()][.apps.generateAppAttestChallenge] method.
final class Apps_GenerateAppAttestChallengeRequest extends ProtoMessage {
  static const String fullyQualifiedName =
      '.apps.generateAppAttestChallengeRequest';

  /// Required. The relative resource name of the iOS app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
  final String app;

  /// Synthetic request body field for the [generateAppAttestChallenge()][.apps.generateAppAttestChallenge] method.
  final GoogleFirebaseAppcheckV1GenerateAppAttestChallengeRequest body;

  Apps_GenerateAppAttestChallengeRequest({
    required this.app,
    required this.body,
  }) : super(fullyQualifiedName);

  factory Apps_GenerateAppAttestChallengeRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return Apps_GenerateAppAttestChallengeRequest(
      app: json['app'],
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1GenerateAppAttestChallengeRequest.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {'app': app, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['app=$app'].join(',');
    return 'generateAppAttestChallengeRequest($contents)';
  }
}

/// Synthetic request message for the [generatePlayIntegrityChallenge()][.apps.generatePlayIntegrityChallenge] method.
final class Apps_GeneratePlayIntegrityChallengeRequest extends ProtoMessage {
  static const String fullyQualifiedName =
      '.apps.generatePlayIntegrityChallengeRequest';

  /// Required. The relative resource name of the app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.
  final String app;

  /// Synthetic request body field for the [generatePlayIntegrityChallenge()][.apps.generatePlayIntegrityChallenge] method.
  final GoogleFirebaseAppcheckV1GeneratePlayIntegrityChallengeRequest body;

  Apps_GeneratePlayIntegrityChallengeRequest({
    required this.app,
    required this.body,
  }) : super(fullyQualifiedName);

  factory Apps_GeneratePlayIntegrityChallengeRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return Apps_GeneratePlayIntegrityChallengeRequest(
      app: json['app'],
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1GeneratePlayIntegrityChallengeRequest.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {'app': app, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['app=$app'].join(',');
    return 'generatePlayIntegrityChallengeRequest($contents)';
  }
}

/// Synthetic request message for the [batchGet()][.appAttestConfig.batchGet] method.
final class AppAttestConfig_BatchGetRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.appAttestConfig.batchGetRequest';

  /// Required. The relative resource names of the AppAttestConfigs to retrieve, in the format ``` projects/{project_number}/apps/{app_id}/appAttestConfig ``` A maximum of 100 objects can be retrieved in a batch.
  final String? names;

  /// Required. The parent project name shared by all AppAttestConfigs being retrieved, in the format ``` projects/{project_number} ``` The parent collection in the `name` field of any resource being retrieved must match this field, or the entire batch fails.
  final String parent;

  AppAttestConfig_BatchGetRequest({this.names, required this.parent})
    : super(fullyQualifiedName);

  factory AppAttestConfig_BatchGetRequest.fromJson(Map<String, dynamic> json) {
    return AppAttestConfig_BatchGetRequest(
      names: json['names'],
      parent: json['parent'],
    );
  }

  @override
  Object toJson() {
    return {if (names != null) 'names': names, 'parent': parent};
  }

  @override
  String toString() {
    final contents = [
      if (names != null) 'names=$names',
      'parent=$parent',
    ].join(',');
    return 'batchGetRequest($contents)';
  }
}

/// Synthetic request message for the [get()][.appAttestConfig.get] method.
final class AppAttestConfig_GetRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.appAttestConfig.getRequest';

  /// Required. The relative resource name of the AppAttestConfig, in the format: ``` projects/{project_number}/apps/{app_id}/appAttestConfig ```
  final String name;

  AppAttestConfig_GetRequest({required this.name}) : super(fullyQualifiedName);

  factory AppAttestConfig_GetRequest.fromJson(Map<String, dynamic> json) {
    return AppAttestConfig_GetRequest(name: json['name']);
  }

  @override
  Object toJson() {
    return {'name': name};
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'getRequest($contents)';
  }
}

/// Synthetic request message for the [patch()][.appAttestConfig.patch] method.
final class AppAttestConfig_PatchRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.appAttestConfig.patchRequest';

  /// Required. The relative resource name of the App Attest configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/appAttestConfig ```
  final String name;

  /// Required. A comma-separated list of names of fields in the AppAttestConfig to update. Example: `token_ttl`.
  final FieldMask? updateMask;

  /// Synthetic request body field for the [patch()][.appAttestConfig.patch] method.
  final GoogleFirebaseAppcheckV1AppAttestConfig body;

  AppAttestConfig_PatchRequest({
    required this.name,
    this.updateMask,
    required this.body,
  }) : super(fullyQualifiedName);

  factory AppAttestConfig_PatchRequest.fromJson(Map<String, dynamic> json) {
    return AppAttestConfig_PatchRequest(
      name: json['name'],
      updateMask: decodeCustom(json['updateMask'], FieldMask.fromJson),
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1AppAttestConfig.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {
      'name': name,
      if (updateMask != null) 'updateMask': updateMask!.toJson(),
      'body': body.toJson(),
    };
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'patchRequest($contents)';
  }
}

/// Synthetic request message for the [create()][.debugTokens.create] method.
final class DebugTokens_CreateRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.debugTokens.createRequest';

  /// Required. The relative resource name of the parent app in which the specified DebugToken will be created, in the format: ``` projects/{project_number}/apps/{app_id} ```
  final String parent;

  /// Synthetic request body field for the [create()][.debugTokens.create] method.
  final GoogleFirebaseAppcheckV1DebugToken body;

  DebugTokens_CreateRequest({required this.parent, required this.body})
    : super(fullyQualifiedName);

  factory DebugTokens_CreateRequest.fromJson(Map<String, dynamic> json) {
    return DebugTokens_CreateRequest(
      parent: json['parent'],
      body: decode(json['body'], GoogleFirebaseAppcheckV1DebugToken.fromJson)!,
    );
  }

  @override
  Object toJson() {
    return {'parent': parent, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['parent=$parent'].join(',');
    return 'createRequest($contents)';
  }
}

/// Synthetic request message for the [delete()][.debugTokens.delete] method.
final class DebugTokens_DeleteRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.debugTokens.deleteRequest';

  /// Required. The relative resource name of the DebugToken to delete, in the format: ``` projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
  final String name;

  DebugTokens_DeleteRequest({required this.name}) : super(fullyQualifiedName);

  factory DebugTokens_DeleteRequest.fromJson(Map<String, dynamic> json) {
    return DebugTokens_DeleteRequest(name: json['name']);
  }

  @override
  Object toJson() {
    return {'name': name};
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'deleteRequest($contents)';
  }
}

/// Synthetic request message for the [get()][.debugTokens.get] method.
final class DebugTokens_GetRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.debugTokens.getRequest';

  /// Required. The relative resource name of the debug token, in the format: ``` projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
  final String name;

  DebugTokens_GetRequest({required this.name}) : super(fullyQualifiedName);

  factory DebugTokens_GetRequest.fromJson(Map<String, dynamic> json) {
    return DebugTokens_GetRequest(name: json['name']);
  }

  @override
  Object toJson() {
    return {'name': name};
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'getRequest($contents)';
  }
}

/// Synthetic request message for the [list()][.debugTokens.list] method.
final class DebugTokens_ListRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.debugTokens.listRequest';

  /// The maximum number of DebugTokens to return in the response. Note that an app can have at most 20 debug tokens. The server may return fewer than this at its own discretion. If no value is specified (or too large a value is specified), the server will impose its own limit.
  final int? pageSize;

  /// Token returned from a previous call to ListDebugTokens indicating where in the set of DebugTokens to resume listing. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to ListDebugTokens must match the call that provided the page token; if they do not match, the result is undefined.
  final String? pageToken;

  /// Required. The relative resource name of the parent app for which to list each associated DebugToken, in the format: ``` projects/{project_number}/apps/{app_id} ```
  final String parent;

  DebugTokens_ListRequest({this.pageSize, this.pageToken, required this.parent})
    : super(fullyQualifiedName);

  factory DebugTokens_ListRequest.fromJson(Map<String, dynamic> json) {
    return DebugTokens_ListRequest(
      pageSize: json['pageSize'],
      pageToken: json['pageToken'],
      parent: json['parent'],
    );
  }

  @override
  Object toJson() {
    return {
      if (pageSize != null) 'pageSize': pageSize,
      if (pageToken != null) 'pageToken': pageToken,
      'parent': parent,
    };
  }

  @override
  String toString() {
    final contents = [
      if (pageSize != null) 'pageSize=$pageSize',
      if (pageToken != null) 'pageToken=$pageToken',
      'parent=$parent',
    ].join(',');
    return 'listRequest($contents)';
  }
}

/// Synthetic request message for the [patch()][.debugTokens.patch] method.
final class DebugTokens_PatchRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.debugTokens.patchRequest';

  /// Required. The relative resource name of the debug token, in the format: ``` projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
  final String name;

  /// Required. A comma-separated list of names of fields in the DebugToken to update. Example: `display_name`.
  final FieldMask? updateMask;

  /// Synthetic request body field for the [patch()][.debugTokens.patch] method.
  final GoogleFirebaseAppcheckV1DebugToken body;

  DebugTokens_PatchRequest({
    required this.name,
    this.updateMask,
    required this.body,
  }) : super(fullyQualifiedName);

  factory DebugTokens_PatchRequest.fromJson(Map<String, dynamic> json) {
    return DebugTokens_PatchRequest(
      name: json['name'],
      updateMask: decodeCustom(json['updateMask'], FieldMask.fromJson),
      body: decode(json['body'], GoogleFirebaseAppcheckV1DebugToken.fromJson)!,
    );
  }

  @override
  Object toJson() {
    return {
      'name': name,
      if (updateMask != null) 'updateMask': updateMask!.toJson(),
      'body': body.toJson(),
    };
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'patchRequest($contents)';
  }
}

/// Synthetic request message for the [batchGet()][.deviceCheckConfig.batchGet] method.
final class DeviceCheckConfig_BatchGetRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.deviceCheckConfig.batchGetRequest';

  /// Required. The relative resource names of the DeviceCheckConfigs to retrieve, in the format ``` projects/{project_number}/apps/{app_id}/deviceCheckConfig ``` A maximum of 100 objects can be retrieved in a batch.
  final String? names;

  /// Required. The parent project name shared by all DeviceCheckConfigs being retrieved, in the format ``` projects/{project_number} ``` The parent collection in the `name` field of any resource being retrieved must match this field, or the entire batch fails.
  final String parent;

  DeviceCheckConfig_BatchGetRequest({this.names, required this.parent})
    : super(fullyQualifiedName);

  factory DeviceCheckConfig_BatchGetRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return DeviceCheckConfig_BatchGetRequest(
      names: json['names'],
      parent: json['parent'],
    );
  }

  @override
  Object toJson() {
    return {if (names != null) 'names': names, 'parent': parent};
  }

  @override
  String toString() {
    final contents = [
      if (names != null) 'names=$names',
      'parent=$parent',
    ].join(',');
    return 'batchGetRequest($contents)';
  }
}

/// Synthetic request message for the [get()][.deviceCheckConfig.get] method.
final class DeviceCheckConfig_GetRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.deviceCheckConfig.getRequest';

  /// Required. The relative resource name of the DeviceCheckConfig, in the format: ``` projects/{project_number}/apps/{app_id}/deviceCheckConfig ```
  final String name;

  DeviceCheckConfig_GetRequest({required this.name})
    : super(fullyQualifiedName);

  factory DeviceCheckConfig_GetRequest.fromJson(Map<String, dynamic> json) {
    return DeviceCheckConfig_GetRequest(name: json['name']);
  }

  @override
  Object toJson() {
    return {'name': name};
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'getRequest($contents)';
  }
}

/// Synthetic request message for the [patch()][.deviceCheckConfig.patch] method.
final class DeviceCheckConfig_PatchRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.deviceCheckConfig.patchRequest';

  /// Required. The relative resource name of the DeviceCheck configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/deviceCheckConfig ```
  final String name;

  /// Required. A comma-separated list of names of fields in the DeviceCheckConfig to update. Example: `key_id,private_key`.
  final FieldMask? updateMask;

  /// Synthetic request body field for the [patch()][.deviceCheckConfig.patch] method.
  final GoogleFirebaseAppcheckV1DeviceCheckConfig body;

  DeviceCheckConfig_PatchRequest({
    required this.name,
    this.updateMask,
    required this.body,
  }) : super(fullyQualifiedName);

  factory DeviceCheckConfig_PatchRequest.fromJson(Map<String, dynamic> json) {
    return DeviceCheckConfig_PatchRequest(
      name: json['name'],
      updateMask: decodeCustom(json['updateMask'], FieldMask.fromJson),
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1DeviceCheckConfig.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {
      'name': name,
      if (updateMask != null) 'updateMask': updateMask!.toJson(),
      'body': body.toJson(),
    };
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'patchRequest($contents)';
  }
}

/// Synthetic request message for the [batchGet()][.playIntegrityConfig.batchGet] method.
final class PlayIntegrityConfig_BatchGetRequest extends ProtoMessage {
  static const String fullyQualifiedName =
      '.playIntegrityConfig.batchGetRequest';

  /// Required. The relative resource names of the PlayIntegrityConfigs to retrieve, in the format ``` projects/{project_number}/apps/{app_id}/playIntegrityConfig ``` A maximum of 100 objects can be retrieved in a batch.
  final String? names;

  /// Required. The parent project name shared by all PlayIntegrityConfigs being retrieved, in the format ``` projects/{project_number} ``` The parent collection in the `name` field of any resource being retrieved must match this field, or the entire batch fails.
  final String parent;

  PlayIntegrityConfig_BatchGetRequest({this.names, required this.parent})
    : super(fullyQualifiedName);

  factory PlayIntegrityConfig_BatchGetRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return PlayIntegrityConfig_BatchGetRequest(
      names: json['names'],
      parent: json['parent'],
    );
  }

  @override
  Object toJson() {
    return {if (names != null) 'names': names, 'parent': parent};
  }

  @override
  String toString() {
    final contents = [
      if (names != null) 'names=$names',
      'parent=$parent',
    ].join(',');
    return 'batchGetRequest($contents)';
  }
}

/// Synthetic request message for the [get()][.playIntegrityConfig.get] method.
final class PlayIntegrityConfig_GetRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.playIntegrityConfig.getRequest';

  /// Required. The relative resource name of the PlayIntegrityConfig, in the format: ``` projects/{project_number}/apps/{app_id}/playIntegrityConfig ```
  final String name;

  PlayIntegrityConfig_GetRequest({required this.name})
    : super(fullyQualifiedName);

  factory PlayIntegrityConfig_GetRequest.fromJson(Map<String, dynamic> json) {
    return PlayIntegrityConfig_GetRequest(name: json['name']);
  }

  @override
  Object toJson() {
    return {'name': name};
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'getRequest($contents)';
  }
}

/// Synthetic request message for the [patch()][.playIntegrityConfig.patch] method.
final class PlayIntegrityConfig_PatchRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.playIntegrityConfig.patchRequest';

  /// Required. The relative resource name of the Play Integrity configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/playIntegrityConfig ```
  final String name;

  /// Required. A comma-separated list of names of fields in the PlayIntegrityConfig to update. Example: `token_ttl`.
  final FieldMask? updateMask;

  /// Synthetic request body field for the [patch()][.playIntegrityConfig.patch] method.
  final GoogleFirebaseAppcheckV1PlayIntegrityConfig body;

  PlayIntegrityConfig_PatchRequest({
    required this.name,
    this.updateMask,
    required this.body,
  }) : super(fullyQualifiedName);

  factory PlayIntegrityConfig_PatchRequest.fromJson(Map<String, dynamic> json) {
    return PlayIntegrityConfig_PatchRequest(
      name: json['name'],
      updateMask: decodeCustom(json['updateMask'], FieldMask.fromJson),
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1PlayIntegrityConfig.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {
      'name': name,
      if (updateMask != null) 'updateMask': updateMask!.toJson(),
      'body': body.toJson(),
    };
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'patchRequest($contents)';
  }
}

/// Synthetic request message for the [batchGet()][.recaptchaEnterpriseConfig.batchGet] method.
final class RecaptchaEnterpriseConfig_BatchGetRequest extends ProtoMessage {
  static const String fullyQualifiedName =
      '.recaptchaEnterpriseConfig.batchGetRequest';

  /// Required. The relative resource names of the RecaptchaEnterpriseConfigs to retrieve, in the format: ``` projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig ``` A maximum of 100 objects can be retrieved in a batch.
  final String? names;

  /// Required. The parent project name shared by all RecaptchaEnterpriseConfigs being retrieved, in the format ``` projects/{project_number} ``` The parent collection in the `name` field of any resource being retrieved must match this field, or the entire batch fails.
  final String parent;

  RecaptchaEnterpriseConfig_BatchGetRequest({this.names, required this.parent})
    : super(fullyQualifiedName);

  factory RecaptchaEnterpriseConfig_BatchGetRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return RecaptchaEnterpriseConfig_BatchGetRequest(
      names: json['names'],
      parent: json['parent'],
    );
  }

  @override
  Object toJson() {
    return {if (names != null) 'names': names, 'parent': parent};
  }

  @override
  String toString() {
    final contents = [
      if (names != null) 'names=$names',
      'parent=$parent',
    ].join(',');
    return 'batchGetRequest($contents)';
  }
}

/// Synthetic request message for the [get()][.recaptchaEnterpriseConfig.get] method.
final class RecaptchaEnterpriseConfig_GetRequest extends ProtoMessage {
  static const String fullyQualifiedName =
      '.recaptchaEnterpriseConfig.getRequest';

  /// Required. The relative resource name of the RecaptchaEnterpriseConfig, in the format: ``` projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig ```
  final String name;

  RecaptchaEnterpriseConfig_GetRequest({required this.name})
    : super(fullyQualifiedName);

  factory RecaptchaEnterpriseConfig_GetRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return RecaptchaEnterpriseConfig_GetRequest(name: json['name']);
  }

  @override
  Object toJson() {
    return {'name': name};
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'getRequest($contents)';
  }
}

/// Synthetic request message for the [patch()][.recaptchaEnterpriseConfig.patch] method.
final class RecaptchaEnterpriseConfig_PatchRequest extends ProtoMessage {
  static const String fullyQualifiedName =
      '.recaptchaEnterpriseConfig.patchRequest';

  /// Required. The relative resource name of the reCAPTCHA Enterprise configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig ```
  final String name;

  /// Required. A comma-separated list of names of fields in the RecaptchaEnterpriseConfig to update. Example: `site_key`.
  final FieldMask? updateMask;

  /// Synthetic request body field for the [patch()][.recaptchaEnterpriseConfig.patch] method.
  final GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfig body;

  RecaptchaEnterpriseConfig_PatchRequest({
    required this.name,
    this.updateMask,
    required this.body,
  }) : super(fullyQualifiedName);

  factory RecaptchaEnterpriseConfig_PatchRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return RecaptchaEnterpriseConfig_PatchRequest(
      name: json['name'],
      updateMask: decodeCustom(json['updateMask'], FieldMask.fromJson),
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfig.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {
      'name': name,
      if (updateMask != null) 'updateMask': updateMask!.toJson(),
      'body': body.toJson(),
    };
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'patchRequest($contents)';
  }
}

/// Synthetic request message for the [batchGet()][.recaptchaV3Config.batchGet] method.
final class RecaptchaV3Config_BatchGetRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.recaptchaV3Config.batchGetRequest';

  /// Required. The relative resource names of the RecaptchaV3Configs to retrieve, in the format: ``` projects/{project_number}/apps/{app_id}/recaptchaV3Config ``` A maximum of 100 objects can be retrieved in a batch.
  final String? names;

  /// Required. The parent project name shared by all RecaptchaV3Configs being retrieved, in the format ``` projects/{project_number} ``` The parent collection in the `name` field of any resource being retrieved must match this field, or the entire batch fails.
  final String parent;

  RecaptchaV3Config_BatchGetRequest({this.names, required this.parent})
    : super(fullyQualifiedName);

  factory RecaptchaV3Config_BatchGetRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return RecaptchaV3Config_BatchGetRequest(
      names: json['names'],
      parent: json['parent'],
    );
  }

  @override
  Object toJson() {
    return {if (names != null) 'names': names, 'parent': parent};
  }

  @override
  String toString() {
    final contents = [
      if (names != null) 'names=$names',
      'parent=$parent',
    ].join(',');
    return 'batchGetRequest($contents)';
  }
}

/// Synthetic request message for the [get()][.recaptchaV3Config.get] method.
final class RecaptchaV3Config_GetRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.recaptchaV3Config.getRequest';

  /// Required. The relative resource name of the RecaptchaV3Config, in the format: ``` projects/{project_number}/apps/{app_id}/recaptchaV3Config ```
  final String name;

  RecaptchaV3Config_GetRequest({required this.name})
    : super(fullyQualifiedName);

  factory RecaptchaV3Config_GetRequest.fromJson(Map<String, dynamic> json) {
    return RecaptchaV3Config_GetRequest(name: json['name']);
  }

  @override
  Object toJson() {
    return {'name': name};
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'getRequest($contents)';
  }
}

/// Synthetic request message for the [patch()][.recaptchaV3Config.patch] method.
final class RecaptchaV3Config_PatchRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.recaptchaV3Config.patchRequest';

  /// Required. The relative resource name of the reCAPTCHA v3 configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/recaptchaV3Config ```
  final String name;

  /// Required. A comma-separated list of names of fields in the RecaptchaV3Config to update. Example: `site_secret`.
  final FieldMask? updateMask;

  /// Synthetic request body field for the [patch()][.recaptchaV3Config.patch] method.
  final GoogleFirebaseAppcheckV1RecaptchaV3Config body;

  RecaptchaV3Config_PatchRequest({
    required this.name,
    this.updateMask,
    required this.body,
  }) : super(fullyQualifiedName);

  factory RecaptchaV3Config_PatchRequest.fromJson(Map<String, dynamic> json) {
    return RecaptchaV3Config_PatchRequest(
      name: json['name'],
      updateMask: decodeCustom(json['updateMask'], FieldMask.fromJson),
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1RecaptchaV3Config.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {
      'name': name,
      if (updateMask != null) 'updateMask': updateMask!.toJson(),
      'body': body.toJson(),
    };
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'patchRequest($contents)';
  }
}

/// Synthetic request message for the [batchGet()][.safetyNetConfig.batchGet] method.
final class SafetyNetConfig_BatchGetRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.safetyNetConfig.batchGetRequest';

  /// Required. The relative resource names of the SafetyNetConfigs to retrieve, in the format ``` projects/{project_number}/apps/{app_id}/safetyNetConfig ``` A maximum of 100 objects can be retrieved in a batch.
  final String? names;

  /// Required. The parent project name shared by all SafetyNetConfigs being retrieved, in the format ``` projects/{project_number} ``` The parent collection in the `name` field of any resource being retrieved must match this field, or the entire batch fails.
  final String parent;

  SafetyNetConfig_BatchGetRequest({this.names, required this.parent})
    : super(fullyQualifiedName);

  factory SafetyNetConfig_BatchGetRequest.fromJson(Map<String, dynamic> json) {
    return SafetyNetConfig_BatchGetRequest(
      names: json['names'],
      parent: json['parent'],
    );
  }

  @override
  Object toJson() {
    return {if (names != null) 'names': names, 'parent': parent};
  }

  @override
  String toString() {
    final contents = [
      if (names != null) 'names=$names',
      'parent=$parent',
    ].join(',');
    return 'batchGetRequest($contents)';
  }
}

/// Synthetic request message for the [get()][.safetyNetConfig.get] method.
final class SafetyNetConfig_GetRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.safetyNetConfig.getRequest';

  /// Required. The relative resource name of the SafetyNetConfig, in the format: ``` projects/{project_number}/apps/{app_id}/safetyNetConfig ```
  final String name;

  SafetyNetConfig_GetRequest({required this.name}) : super(fullyQualifiedName);

  factory SafetyNetConfig_GetRequest.fromJson(Map<String, dynamic> json) {
    return SafetyNetConfig_GetRequest(name: json['name']);
  }

  @override
  Object toJson() {
    return {'name': name};
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'getRequest($contents)';
  }
}

/// Synthetic request message for the [patch()][.safetyNetConfig.patch] method.
final class SafetyNetConfig_PatchRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.safetyNetConfig.patchRequest';

  /// Required. The relative resource name of the SafetyNet configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/safetyNetConfig ```
  final String name;

  /// Required. A comma-separated list of names of fields in the SafetyNetConfig to update. Example: `token_ttl`.
  final FieldMask? updateMask;

  /// Synthetic request body field for the [patch()][.safetyNetConfig.patch] method.
  final GoogleFirebaseAppcheckV1SafetyNetConfig body;

  SafetyNetConfig_PatchRequest({
    required this.name,
    this.updateMask,
    required this.body,
  }) : super(fullyQualifiedName);

  factory SafetyNetConfig_PatchRequest.fromJson(Map<String, dynamic> json) {
    return SafetyNetConfig_PatchRequest(
      name: json['name'],
      updateMask: decodeCustom(json['updateMask'], FieldMask.fromJson),
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1SafetyNetConfig.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {
      'name': name,
      if (updateMask != null) 'updateMask': updateMask!.toJson(),
      'body': body.toJson(),
    };
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'patchRequest($contents)';
  }
}

/// Synthetic request message for the [batchUpdate()][.services.batchUpdate] method.
final class Services_BatchUpdateRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.services.batchUpdateRequest';

  /// Required. The parent project name shared by all Service configurations being updated, in the format ``` projects/{project_number} ``` The parent collection in the `name` field of any resource being updated must match this field, or the entire batch fails.
  final String parent;

  /// Synthetic request body field for the [batchUpdate()][.services.batchUpdate] method.
  final GoogleFirebaseAppcheckV1BatchUpdateServicesRequest body;

  Services_BatchUpdateRequest({required this.parent, required this.body})
    : super(fullyQualifiedName);

  factory Services_BatchUpdateRequest.fromJson(Map<String, dynamic> json) {
    return Services_BatchUpdateRequest(
      parent: json['parent'],
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1BatchUpdateServicesRequest.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {'parent': parent, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['parent=$parent'].join(',');
    return 'batchUpdateRequest($contents)';
  }
}

/// Synthetic request message for the [get()][.services.get] method.
final class Services_GetRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.services.getRequest';

  /// Required. The relative resource name of the Service to retrieve, in the format: ``` projects/{project_number}/services/{service_id} ``` Note that the `service_id` element must be a supported service ID. Currently, the following service IDs are supported: * `firebasestorage.googleapis.com` (Cloud Storage for Firebase) * `firebasedatabase.googleapis.com` (Firebase Realtime Database) * `firestore.googleapis.com` (Cloud Firestore) * `oauth2.googleapis.com` (Google Identity for iOS)
  final String name;

  Services_GetRequest({required this.name}) : super(fullyQualifiedName);

  factory Services_GetRequest.fromJson(Map<String, dynamic> json) {
    return Services_GetRequest(name: json['name']);
  }

  @override
  Object toJson() {
    return {'name': name};
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'getRequest($contents)';
  }
}

/// Synthetic request message for the [list()][.services.list] method.
final class Services_ListRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.services.listRequest';

  /// The maximum number of Services to return in the response. Only explicitly configured services are returned. The server may return fewer than this at its own discretion. If no value is specified (or too large a value is specified), the server will impose its own limit.
  final int? pageSize;

  /// Token returned from a previous call to ListServices indicating where in the set of Services to resume listing. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to ListServices must match the call that provided the page token; if they do not match, the result is undefined.
  final String? pageToken;

  /// Required. The relative resource name of the parent project for which to list each associated Service, in the format: ``` projects/{project_number} ```
  final String parent;

  Services_ListRequest({this.pageSize, this.pageToken, required this.parent})
    : super(fullyQualifiedName);

  factory Services_ListRequest.fromJson(Map<String, dynamic> json) {
    return Services_ListRequest(
      pageSize: json['pageSize'],
      pageToken: json['pageToken'],
      parent: json['parent'],
    );
  }

  @override
  Object toJson() {
    return {
      if (pageSize != null) 'pageSize': pageSize,
      if (pageToken != null) 'pageToken': pageToken,
      'parent': parent,
    };
  }

  @override
  String toString() {
    final contents = [
      if (pageSize != null) 'pageSize=$pageSize',
      if (pageToken != null) 'pageToken=$pageToken',
      'parent=$parent',
    ].join(',');
    return 'listRequest($contents)';
  }
}

/// Synthetic request message for the [patch()][.services.patch] method.
final class Services_PatchRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.services.patchRequest';

  /// Required. The relative resource name of the service configuration object, in the format: ``` projects/{project_number}/services/{service_id} ``` Note that the `service_id` element must be a supported service ID. Currently, the following service IDs are supported: * `firebasestorage.googleapis.com` (Cloud Storage for Firebase) * `firebasedatabase.googleapis.com` (Firebase Realtime Database) * `firestore.googleapis.com` (Cloud Firestore) * `oauth2.googleapis.com` (Google Identity for iOS)
  final String name;

  /// Required. A comma-separated list of names of fields in the Service to update. Example: `enforcement_mode`.
  final FieldMask? updateMask;

  /// Synthetic request body field for the [patch()][.services.patch] method.
  final GoogleFirebaseAppcheckV1Service body;

  Services_PatchRequest({
    required this.name,
    this.updateMask,
    required this.body,
  }) : super(fullyQualifiedName);

  factory Services_PatchRequest.fromJson(Map<String, dynamic> json) {
    return Services_PatchRequest(
      name: json['name'],
      updateMask: decodeCustom(json['updateMask'], FieldMask.fromJson),
      body: decode(json['body'], GoogleFirebaseAppcheckV1Service.fromJson)!,
    );
  }

  @override
  Object toJson() {
    return {
      'name': name,
      if (updateMask != null) 'updateMask': updateMask!.toJson(),
      'body': body.toJson(),
    };
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'patchRequest($contents)';
  }
}

/// Synthetic request message for the [batchUpdate()][.resourcePolicies.batchUpdate] method.
final class ResourcePolicies_BatchUpdateRequest extends ProtoMessage {
  static const String fullyQualifiedName =
      '.resourcePolicies.batchUpdateRequest';

  /// Required. The parent service name, in the format ``` projects/{project_number}/services/{service_id} ``` The parent collection in the `name` field of any resource being updated must match this field, or the entire batch fails.
  final String parent;

  /// Synthetic request body field for the [batchUpdate()][.resourcePolicies.batchUpdate] method.
  final GoogleFirebaseAppcheckV1BatchUpdateResourcePoliciesRequest body;

  ResourcePolicies_BatchUpdateRequest({
    required this.parent,
    required this.body,
  }) : super(fullyQualifiedName);

  factory ResourcePolicies_BatchUpdateRequest.fromJson(
    Map<String, dynamic> json,
  ) {
    return ResourcePolicies_BatchUpdateRequest(
      parent: json['parent'],
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1BatchUpdateResourcePoliciesRequest.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {'parent': parent, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['parent=$parent'].join(',');
    return 'batchUpdateRequest($contents)';
  }
}

/// Synthetic request message for the [create()][.resourcePolicies.create] method.
final class ResourcePolicies_CreateRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.resourcePolicies.createRequest';

  /// Required. The relative resource name of the parent Service in which the specified ResourcePolicy will be created, in the format: ``` projects/{project_number}/services/{service_id} ``` Note that the `service_id` element must be a supported service ID. Currently, the following service IDs are supported: * `oauth2.googleapis.com` (Google Identity for iOS)
  final String parent;

  /// Synthetic request body field for the [create()][.resourcePolicies.create] method.
  final GoogleFirebaseAppcheckV1ResourcePolicy body;

  ResourcePolicies_CreateRequest({required this.parent, required this.body})
    : super(fullyQualifiedName);

  factory ResourcePolicies_CreateRequest.fromJson(Map<String, dynamic> json) {
    return ResourcePolicies_CreateRequest(
      parent: json['parent'],
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1ResourcePolicy.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {'parent': parent, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['parent=$parent'].join(',');
    return 'createRequest($contents)';
  }
}

/// Synthetic request message for the [delete()][.resourcePolicies.delete] method.
final class ResourcePolicies_DeleteRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.resourcePolicies.deleteRequest';

  /// The checksum to be validated against the current ResourcePolicy, to ensure the client has an up-to-date value before proceeding. This checksum is computed by the server based on the values of fields in the ResourcePolicy object, and can be obtained from the ResourcePolicy object received from the last CreateResourcePolicy, GetResourcePolicy, ListResourcePolicies, UpdateResourcePolicy, or BatchUpdateResourcePolicies call. This etag is strongly validated as defined by RFC 7232.
  final String? etag;

  /// Required. The relative resource name of the ResourcePolicy to delete, in the format: ``` projects/{project_number}/services/{service_id}/resourcePolicies/{resource_policy_id} ```
  final String name;

  ResourcePolicies_DeleteRequest({this.etag, required this.name})
    : super(fullyQualifiedName);

  factory ResourcePolicies_DeleteRequest.fromJson(Map<String, dynamic> json) {
    return ResourcePolicies_DeleteRequest(
      etag: json['etag'],
      name: json['name'],
    );
  }

  @override
  Object toJson() {
    return {if (etag != null) 'etag': etag, 'name': name};
  }

  @override
  String toString() {
    final contents = [if (etag != null) 'etag=$etag', 'name=$name'].join(',');
    return 'deleteRequest($contents)';
  }
}

/// Synthetic request message for the [get()][.resourcePolicies.get] method.
final class ResourcePolicies_GetRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.resourcePolicies.getRequest';

  /// Required. The relative resource name of the ResourcePolicy to retrieve, in the format: ``` projects/{project_number}/services/{service_id}/resourcePolicies/{resource_policy_id} ``` Note that the `service_id` element must be a supported service ID. Currently, the following service IDs are supported: * `oauth2.googleapis.com` (Google Identity for iOS)
  final String name;

  ResourcePolicies_GetRequest({required this.name}) : super(fullyQualifiedName);

  factory ResourcePolicies_GetRequest.fromJson(Map<String, dynamic> json) {
    return ResourcePolicies_GetRequest(name: json['name']);
  }

  @override
  Object toJson() {
    return {'name': name};
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'getRequest($contents)';
  }
}

/// Synthetic request message for the [list()][.resourcePolicies.list] method.
final class ResourcePolicies_ListRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.resourcePolicies.listRequest';

  /// Optional. Filters the results by the specified rule. For the exact syntax of this field, please consult the [AIP-160](https://google.aip.dev/160) standard. Currently, since the only fields in the ResourcePolicy resource are the scalar fields `enforcement_mode` and `target_resource`, this method does not support the traversal operator (`.`) or the has operator (`:`). Here are some examples of valid filters: * `enforcement_mode = ENFORCED` * `target_resource = "//oauth2.googleapis.com/projects/12345/oauthClients/"` * `enforcement_mode = ENFORCED AND target_resource = "//oauth2.googleapis.com/projects/12345/oauthClients/"`
  final String? filter;

  /// The maximum number of ResourcePolicy objects to return in the response. The server may return fewer than this at its own discretion. If no value is specified (or too large a value is specified), the server will impose its own limit.
  final int? pageSize;

  /// Token returned from a previous call to ListResourcePolicies indicating where in the set of ResourcePolicy objects to resume listing. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to ListResourcePolicies must match the call that provided the page token; if they do not match, the result is undefined.
  final String? pageToken;

  /// Required. The relative resource name of the parent Service for which to list each associated ResourcePolicy, in the format: ``` projects/{project_number}/services/{service_id} ``` Note that the `service_id` element must be a supported service ID. Currently, the following service IDs are supported: * `oauth2.googleapis.com` (Google Identity for iOS)
  final String parent;

  ResourcePolicies_ListRequest({
    this.filter,
    this.pageSize,
    this.pageToken,
    required this.parent,
  }) : super(fullyQualifiedName);

  factory ResourcePolicies_ListRequest.fromJson(Map<String, dynamic> json) {
    return ResourcePolicies_ListRequest(
      filter: json['filter'],
      pageSize: json['pageSize'],
      pageToken: json['pageToken'],
      parent: json['parent'],
    );
  }

  @override
  Object toJson() {
    return {
      if (filter != null) 'filter': filter,
      if (pageSize != null) 'pageSize': pageSize,
      if (pageToken != null) 'pageToken': pageToken,
      'parent': parent,
    };
  }

  @override
  String toString() {
    final contents = [
      if (filter != null) 'filter=$filter',
      if (pageSize != null) 'pageSize=$pageSize',
      if (pageToken != null) 'pageToken=$pageToken',
      'parent=$parent',
    ].join(',');
    return 'listRequest($contents)';
  }
}

/// Synthetic request message for the [patch()][.resourcePolicies.patch] method.
final class ResourcePolicies_PatchRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.resourcePolicies.patchRequest';

  /// Required. Identifier. The relative name of the resource policy object, in the format: ``` projects/{project_number}/services/{service_id}/resourcePolicies/{resource_policy_id} ``` Note that the `service_id` element must be a supported service ID. Currently, the following service IDs are supported: * `oauth2.googleapis.com` (Google Identity for iOS) `resource_policy_id` is a system-generated UID.
  final String name;

  /// Required. A comma-separated list of names of fields in the ResourcePolicy to update. Example: `enforcement_mode`.
  final FieldMask? updateMask;

  /// Synthetic request body field for the [patch()][.resourcePolicies.patch] method.
  final GoogleFirebaseAppcheckV1ResourcePolicy body;

  ResourcePolicies_PatchRequest({
    required this.name,
    this.updateMask,
    required this.body,
  }) : super(fullyQualifiedName);

  factory ResourcePolicies_PatchRequest.fromJson(Map<String, dynamic> json) {
    return ResourcePolicies_PatchRequest(
      name: json['name'],
      updateMask: decodeCustom(json['updateMask'], FieldMask.fromJson),
      body: decode(
        json['body'],
        GoogleFirebaseAppcheckV1ResourcePolicy.fromJson,
      )!,
    );
  }

  @override
  Object toJson() {
    return {
      'name': name,
      if (updateMask != null) 'updateMask': updateMask!.toJson(),
      'body': body.toJson(),
    };
  }

  @override
  String toString() {
    final contents = ['name=$name'].join(',');
    return 'patchRequest($contents)';
  }
}
