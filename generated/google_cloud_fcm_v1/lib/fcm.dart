// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

/// The Google Cloud client for the Firebase Cloud Messaging API.
///
/// FCM send API that provides a cross-platform messaging solution to reliably deliver messages.
library;

import 'package:google_cloud_gax/gax.dart';
import 'package:google_cloud_gax/src/encoding.dart';
import 'package:google_cloud_protobuf/protobuf.dart';
import 'package:googleapis_auth/auth_io.dart' as auth;
import 'package:http/http.dart' as http;

const _apiKeys = ["GOOGLE_API_KEY"];

/// Service for the `messages` resource.
final class Messages {
  static const _host = 'fcm.googleapis.com';
  final ServiceClient _client;

  Messages({required http.Client client})
    : _client = ServiceClient(client: client);

  factory Messages.fromApiKey([String? apiKey]) {
    apiKey ??= _apiKeys.map(environmentVariable).nonNulls.firstOrNull;
    if (apiKey == null) {
      throw ArgumentError(
        'apiKey or one of these environment variables must '
        'be set to an API key: ${_apiKeys.join(", ")}',
      );
    }
    return Messages(client: auth.clientViaApiKey(apiKey));
  }

  /// Send a message to specified target (a registration token, topic or condition).
  ///
  /// Throws a [http.ClientException] if there were problems communicating with
  /// the API service. Throws a [StatusException] if the API failed with a
  /// [Status] message. Throws a [ServiceException] if the API failed for any
  /// other reason.
  Future<Message> send(Messages_SendRequest request) async {
    final url = Uri.https(_host, '/v1/${request.parent}/messages:send');
    final response = await _client.post(url, body: request.body);
    return Message.fromJson(response);
  }

  /// Closes the client and cleans up any resources associated with it.
  ///
  /// Once [close] is called, no other methods should be called.
  void close() => _client.close();
}

/// Android specific options for messages sent through [FCM connection server](https://goo.gl/4GLdUl).
final class AndroidConfig extends ProtoMessage {
  static const String fullyQualifiedName = '.AndroidConfig';

  /// Optional. If set to true, messages will be allowed to be delivered to the app while the device is in bandwidth constrained mode. This should only be enabled when the app has been tested to properly handle messages in bandwidth constrained mode.
  final bool? bandwidthConstrainedOk;

  /// An identifier of a group of messages that can be collapsed, so that only the last message gets sent when delivery can be resumed. A maximum of 4 different collapse keys is allowed at any given time.
  final String? collapseKey;

  /// Arbitrary key/value payload. If present, it will override google.firebase.fcm.v1.Message.data.
  final Map<String, String>? data;

  /// Optional. If set to true, messages will be allowed to be delivered to the app while the device is in direct boot mode. See [Support Direct Boot mode](https://developer.android.com/training/articles/direct-boot).
  final bool? directBootOk;

  /// Options for features provided by the FCM SDK for Android.
  final AndroidFcmOptions? fcmOptions;

  /// Notification to send to android devices.
  final AndroidNotification? notification;

  /// Message priority. Can take "normal" and "high" values. For more information, see [Setting the priority of a message](https://goo.gl/GjONJv).
  final AndroidConfig_Priority? priority;

  /// Package name of the application where the registration token must match in order to receive the message.
  final String? restrictedPackageName;

  /// Optional. If set to true, messages will be allowed to be delivered to the app while the device is connected over a restricted satellite network. This should only be enabled for messages that can be handled over a restricted satellite network and only for apps that are enabled to work over a restricted satellite network. Note that the ability of the app to connect to a restricted satellite network is dependent on the carrier's settings and the device model.
  final bool? restrictedSatelliteOk;

  /// How long (in seconds) the message should be kept in FCM storage if the device is offline. The maximum time to live supported is 4 weeks, and the default value is 4 weeks if not set. Set it to 0 if want to send the message immediately. In JSON format, the Duration type is encoded as a string rather than an object, where the string ends in the suffix "s" (indicating seconds) and is preceded by the number of seconds, with nanoseconds expressed as fractional seconds. For example, 3 seconds with 0 nanoseconds should be encoded in JSON format as "3s", while 3 seconds and 1 nanosecond should be expressed in JSON format as "3.000000001s". The ttl will be rounded down to the nearest second.
  final Duration? ttl;

  AndroidConfig({
    this.bandwidthConstrainedOk,
    this.collapseKey,
    this.data,
    this.directBootOk,
    this.fcmOptions,
    this.notification,
    this.priority,
    this.restrictedPackageName,
    this.restrictedSatelliteOk,
    this.ttl,
  }) : super(fullyQualifiedName);

  factory AndroidConfig.fromJson(Map<String, dynamic> json) {
    return AndroidConfig(
      bandwidthConstrainedOk: json['bandwidthConstrainedOk'],
      collapseKey: json['collapseKey'],
      data: decodeMap(json['data']),
      directBootOk: json['directBootOk'],
      fcmOptions: decode(json['fcmOptions'], AndroidFcmOptions.fromJson),
      notification: decode(json['notification'], AndroidNotification.fromJson),
      priority: decodeEnum(json['priority'], AndroidConfig_Priority.fromJson),
      restrictedPackageName: json['restrictedPackageName'],
      restrictedSatelliteOk: json['restrictedSatelliteOk'],
      ttl: decodeCustom(json['ttl'], Duration.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (bandwidthConstrainedOk != null)
        'bandwidthConstrainedOk': bandwidthConstrainedOk,
      if (collapseKey != null) 'collapseKey': collapseKey,
      if (data != null) 'data': data,
      if (directBootOk != null) 'directBootOk': directBootOk,
      if (fcmOptions != null) 'fcmOptions': fcmOptions!.toJson(),
      if (notification != null) 'notification': notification!.toJson(),
      if (priority != null) 'priority': priority!.toJson(),
      if (restrictedPackageName != null)
        'restrictedPackageName': restrictedPackageName,
      if (restrictedSatelliteOk != null)
        'restrictedSatelliteOk': restrictedSatelliteOk,
      if (ttl != null) 'ttl': ttl!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [
      if (bandwidthConstrainedOk != null)
        'bandwidthConstrainedOk=$bandwidthConstrainedOk',
      if (collapseKey != null) 'collapseKey=$collapseKey',
      if (directBootOk != null) 'directBootOk=$directBootOk',
      if (priority != null) 'priority=$priority',
      if (restrictedPackageName != null)
        'restrictedPackageName=$restrictedPackageName',
      if (restrictedSatelliteOk != null)
        'restrictedSatelliteOk=$restrictedSatelliteOk',
    ].join(',');
    return 'AndroidConfig($contents)';
  }
}

/// The enumerated type for the `priority` field.
final class AndroidConfig_Priority extends ProtoEnum {
  /// Default priority for data messages. Normal priority messages won't open network connections on a sleeping device, and their delivery may be delayed to conserve the battery. For less time-sensitive messages, such as notifications of new email or other data to sync, choose normal delivery priority.
  static const normal = AndroidConfig_Priority('NORMAL');

  /// Default priority for notification messages. FCM attempts to deliver high priority messages immediately, allowing the FCM service to wake a sleeping device when possible and open a network connection to your app server. Apps with instant messaging, chat, or voice call alerts, for example, generally need to open a network connection and make sure FCM delivers the message to the device without delay. Set high priority if the message is time-critical and requires the user's immediate interaction, but beware that setting your messages to high priority contributes more to battery drain compared with normal priority messages.
  static const high = AndroidConfig_Priority('HIGH');

  const AndroidConfig_Priority(super.value);

  factory AndroidConfig_Priority.fromJson(String json) =>
      AndroidConfig_Priority(json);

  @override
  String toString() => 'priority.$value';
}

/// Options for features provided by the FCM SDK for Android.
final class AndroidFcmOptions extends ProtoMessage {
  static const String fullyQualifiedName = '.AndroidFcmOptions';

  /// Label associated with the message's analytics data.
  final String? analyticsLabel;

  AndroidFcmOptions({this.analyticsLabel}) : super(fullyQualifiedName);

  factory AndroidFcmOptions.fromJson(Map<String, dynamic> json) {
    return AndroidFcmOptions(analyticsLabel: json['analyticsLabel']);
  }

  @override
  Object toJson() {
    return {if (analyticsLabel != null) 'analyticsLabel': analyticsLabel};
  }

  @override
  String toString() {
    final contents = [
      if (analyticsLabel != null) 'analyticsLabel=$analyticsLabel',
    ].join(',');
    return 'AndroidFcmOptions($contents)';
  }
}

/// Notification to send to android devices.
final class AndroidNotification extends ProtoMessage {
  static const String fullyQualifiedName = '.AndroidNotification';

  /// The notification's body text. If present, it will override google.firebase.fcm.v1.Notification.body.
  final String? body;

  /// Variable string values to be used in place of the format specifiers in body_loc_key to use to localize the body text to the user's current localization. See [Formatting and Styling](https://goo.gl/MalYE3) for more information.
  final List<String>? bodyLocArgs;

  /// The key to the body string in the app's string resources to use to localize the body text to the user's current localization. See [String Resources](https://goo.gl/NdFZGI) for more information.
  final String? bodyLocKey;

  /// If set, display notifications delivered to the device will be handled by the app instead of the proxy.
  final bool? bypassProxyNotification;

  /// The [notification's channel id](https://developer.android.com/guide/topics/ui/notifiers/notifications#ManageChannels) (new in Android O). The app must create a channel with this channel ID before any notification with this channel ID is received. If you don't send this channel ID in the request, or if the channel ID provided has not yet been created by the app, FCM uses the channel ID specified in the app manifest.
  final String? channelId;

  /// The action associated with a user click on the notification. If specified, an activity with a matching intent filter is launched when a user clicks on the notification.
  final String? clickAction;

  /// The notification's icon color, expressed in #rrggbb format.
  final String? color;

  /// If set to true, use the Android framework's default LED light settings for the notification. Default values are specified in [config.xml](https://android.googlesource.com/platform/frameworks/base/+/master/core/res/res/values/config.xml). If `default_light_settings` is set to true and `light_settings` is also set, the user-specified `light_settings` is used instead of the default value.
  final bool? defaultLightSettings;

  /// If set to true, use the Android framework's default sound for the notification. Default values are specified in [config.xml](https://android.googlesource.com/platform/frameworks/base/+/master/core/res/res/values/config.xml).
  final bool? defaultSound;

  /// If set to true, use the Android framework's default vibrate pattern for the notification. Default values are specified in [config.xml](https://android.googlesource.com/platform/frameworks/base/+/master/core/res/res/values/config.xml). If `default_vibrate_timings` is set to true and `vibrate_timings` is also set, the default value is used instead of the user-specified `vibrate_timings`.
  final bool? defaultVibrateTimings;

  /// Set the time that the event in the notification occurred. Notifications in the panel are sorted by this time. A point in time is represented using [protobuf.Timestamp](https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Timestamp).
  final Timestamp? eventTime;

  /// The notification's icon. Sets the notification icon to myicon for drawable resource myicon. If you don't send this key in the request, FCM displays the launcher icon specified in your app manifest.
  final String? icon;

  /// Contains the URL of an image that is going to be displayed in a notification. If present, it will override google.firebase.fcm.v1.Notification.image.
  final String? image;

  /// Settings to control the notification's LED blinking rate and color if LED is available on the device. The total blinking time is controlled by the OS.
  final LightSettings? lightSettings;

  /// Set whether or not this notification is relevant only to the current device. Some notifications can be bridged to other devices for remote display, such as a Wear OS watch. This hint can be set to recommend this notification not be bridged. See [Wear OS guides](https://developer.android.com/training/wearables/notifications/bridger#existing-method-of-preventing-bridging)
  final bool? localOnly;

  /// Sets the number of items this notification represents. May be displayed as a badge count for launchers that support badging.See [Notification Badge](https://developer.android.com/training/notify-user/badges). For example, this might be useful if you're using just one notification to represent multiple new messages but you want the count here to represent the number of total new messages. If zero or unspecified, systems that support badging use the default, which is to increment a number displayed on the long-press menu each time a new notification arrives.
  final int? notificationCount;

  /// Set the relative priority for this notification. Priority is an indication of how much of the user's attention should be consumed by this notification. Low-priority notifications may be hidden from the user in certain situations, while the user might be interrupted for a higher-priority notification. The effect of setting the same priorities may differ slightly on different platforms. Note this priority differs from `AndroidMessagePriority`. This priority is processed by the client after the message has been delivered, whereas [AndroidMessagePriority](https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#androidmessagepriority) is an FCM concept that controls when the message is delivered.
  final AndroidNotification_NotificationPriority? notificationPriority;

  /// Setting to control when a notification may be proxied.
  final AndroidNotification_Proxy? proxy;

  /// The sound to play when the device receives the notification. Supports "default" or the filename of a sound resource bundled in the app. Sound files must reside in /res/raw/.
  final String? sound;

  /// When set to false or unset, the notification is automatically dismissed when the user clicks it in the panel. When set to true, the notification persists even when the user clicks it.
  final bool? sticky;

  /// Identifier used to replace existing notifications in the notification drawer. If not specified, each request creates a new notification. If specified and a notification with the same tag is already being shown, the new notification replaces the existing one in the notification drawer.
  final String? tag;

  /// Sets the "ticker" text, which is sent to accessibility services. Prior to API level 21 (`Lollipop`), sets the text that is displayed in the status bar when the notification first arrives.
  final String? ticker;

  /// The notification's title. If present, it will override google.firebase.fcm.v1.Notification.title.
  final String? title;

  /// Variable string values to be used in place of the format specifiers in title_loc_key to use to localize the title text to the user's current localization. See [Formatting and Styling](https://goo.gl/MalYE3) for more information.
  final List<String>? titleLocArgs;

  /// The key to the title string in the app's string resources to use to localize the title text to the user's current localization. See [String Resources](https://goo.gl/NdFZGI) for more information.
  final String? titleLocKey;

  /// Set the vibration pattern to use. Pass in an array of [protobuf.Duration](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Duration) to turn on or off the vibrator. The first value indicates the `Duration` to wait before turning the vibrator on. The next value indicates the `Duration` to keep the vibrator on. Subsequent values alternate between `Duration` to turn the vibrator off and to turn the vibrator on. If `vibrate_timings` is set and `default_vibrate_timings` is set to `true`, the default value is used instead of the user-specified `vibrate_timings`.
  final List<Duration>? vibrateTimings;

  /// Set the [Notification.visibility](https://developer.android.com/reference/android/app/Notification.html#visibility) of the notification.
  final AndroidNotification_Visibility? visibility;

  AndroidNotification({
    this.body,
    this.bodyLocArgs,
    this.bodyLocKey,
    this.bypassProxyNotification,
    this.channelId,
    this.clickAction,
    this.color,
    this.defaultLightSettings,
    this.defaultSound,
    this.defaultVibrateTimings,
    this.eventTime,
    this.icon,
    this.image,
    this.lightSettings,
    this.localOnly,
    this.notificationCount,
    this.notificationPriority,
    this.proxy,
    this.sound,
    this.sticky,
    this.tag,
    this.ticker,
    this.title,
    this.titleLocArgs,
    this.titleLocKey,
    this.vibrateTimings,
    this.visibility,
  }) : super(fullyQualifiedName);

  factory AndroidNotification.fromJson(Map<String, dynamic> json) {
    return AndroidNotification(
      body: json['body'],
      bodyLocArgs: decodeList(json['bodyLocArgs']),
      bodyLocKey: json['bodyLocKey'],
      bypassProxyNotification: json['bypassProxyNotification'],
      channelId: json['channelId'],
      clickAction: json['clickAction'],
      color: json['color'],
      defaultLightSettings: json['defaultLightSettings'],
      defaultSound: json['defaultSound'],
      defaultVibrateTimings: json['defaultVibrateTimings'],
      eventTime: decodeCustom(json['eventTime'], Timestamp.fromJson),
      icon: json['icon'],
      image: json['image'],
      lightSettings: decode(json['lightSettings'], LightSettings.fromJson),
      localOnly: json['localOnly'],
      notificationCount: json['notificationCount'],
      notificationPriority: decodeEnum(
        json['notificationPriority'],
        AndroidNotification_NotificationPriority.fromJson,
      ),
      proxy: decodeEnum(json['proxy'], AndroidNotification_Proxy.fromJson),
      sound: json['sound'],
      sticky: json['sticky'],
      tag: json['tag'],
      ticker: json['ticker'],
      title: json['title'],
      titleLocArgs: decodeList(json['titleLocArgs']),
      titleLocKey: json['titleLocKey'],
      vibrateTimings: decodeListMessageCustom(
        json['vibrateTimings'],
        Duration.fromJson,
      ),
      visibility: decodeEnum(
        json['visibility'],
        AndroidNotification_Visibility.fromJson,
      ),
    );
  }

  @override
  Object toJson() {
    return {
      if (body != null) 'body': body,
      if (bodyLocArgs != null) 'bodyLocArgs': bodyLocArgs,
      if (bodyLocKey != null) 'bodyLocKey': bodyLocKey,
      if (bypassProxyNotification != null)
        'bypassProxyNotification': bypassProxyNotification,
      if (channelId != null) 'channelId': channelId,
      if (clickAction != null) 'clickAction': clickAction,
      if (color != null) 'color': color,
      if (defaultLightSettings != null)
        'defaultLightSettings': defaultLightSettings,
      if (defaultSound != null) 'defaultSound': defaultSound,
      if (defaultVibrateTimings != null)
        'defaultVibrateTimings': defaultVibrateTimings,
      if (eventTime != null) 'eventTime': eventTime!.toJson(),
      if (icon != null) 'icon': icon,
      if (image != null) 'image': image,
      if (lightSettings != null) 'lightSettings': lightSettings!.toJson(),
      if (localOnly != null) 'localOnly': localOnly,
      if (notificationCount != null) 'notificationCount': notificationCount,
      if (notificationPriority != null)
        'notificationPriority': notificationPriority!.toJson(),
      if (proxy != null) 'proxy': proxy!.toJson(),
      if (sound != null) 'sound': sound,
      if (sticky != null) 'sticky': sticky,
      if (tag != null) 'tag': tag,
      if (ticker != null) 'ticker': ticker,
      if (title != null) 'title': title,
      if (titleLocArgs != null) 'titleLocArgs': titleLocArgs,
      if (titleLocKey != null) 'titleLocKey': titleLocKey,
      if (vibrateTimings != null) 'vibrateTimings': encodeList(vibrateTimings),
      if (visibility != null) 'visibility': visibility!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [
      if (body != null) 'body=$body',
      if (bodyLocKey != null) 'bodyLocKey=$bodyLocKey',
      if (bypassProxyNotification != null)
        'bypassProxyNotification=$bypassProxyNotification',
      if (channelId != null) 'channelId=$channelId',
      if (clickAction != null) 'clickAction=$clickAction',
      if (color != null) 'color=$color',
      if (defaultLightSettings != null)
        'defaultLightSettings=$defaultLightSettings',
      if (defaultSound != null) 'defaultSound=$defaultSound',
      if (defaultVibrateTimings != null)
        'defaultVibrateTimings=$defaultVibrateTimings',
      if (icon != null) 'icon=$icon',
      if (image != null) 'image=$image',
      if (localOnly != null) 'localOnly=$localOnly',
      if (notificationCount != null) 'notificationCount=$notificationCount',
      if (notificationPriority != null)
        'notificationPriority=$notificationPriority',
      if (proxy != null) 'proxy=$proxy',
      if (sound != null) 'sound=$sound',
      if (sticky != null) 'sticky=$sticky',
      if (tag != null) 'tag=$tag',
      if (ticker != null) 'ticker=$ticker',
      if (title != null) 'title=$title',
      if (titleLocKey != null) 'titleLocKey=$titleLocKey',
      if (visibility != null) 'visibility=$visibility',
    ].join(',');
    return 'AndroidNotification($contents)';
  }
}

/// The enumerated type for the `notificationPriority` field.
final class AndroidNotification_NotificationPriority extends ProtoEnum {
  /// If priority is unspecified, notification priority is set to `PRIORITY_DEFAULT`.
  static const priorityUnspecified = AndroidNotification_NotificationPriority(
    'PRIORITY_UNSPECIFIED',
  );

  /// Lowest notification priority. Notifications with this `PRIORITY_MIN` might not be shown to the user except under special circumstances, such as detailed notification logs.
  static const priorityMin = AndroidNotification_NotificationPriority(
    'PRIORITY_MIN',
  );

  /// Lower notification priority. The UI may choose to show the notifications smaller, or at a different position in the list, compared with notifications with `PRIORITY_DEFAULT`.
  static const priorityLow = AndroidNotification_NotificationPriority(
    'PRIORITY_LOW',
  );

  /// Default notification priority. If the application does not prioritize its own notifications, use this value for all notifications.
  static const priorityDefault = AndroidNotification_NotificationPriority(
    'PRIORITY_DEFAULT',
  );

  /// Higher notification priority. Use this for more important notifications or alerts. The UI may choose to show these notifications larger, or at a different position in the notification lists, compared with notifications with `PRIORITY_DEFAULT`.
  static const priorityHigh = AndroidNotification_NotificationPriority(
    'PRIORITY_HIGH',
  );

  /// Highest notification priority. Use this for the application's most important items that require the user's prompt attention or input.
  static const priorityMax = AndroidNotification_NotificationPriority(
    'PRIORITY_MAX',
  );

  const AndroidNotification_NotificationPriority(super.value);

  factory AndroidNotification_NotificationPriority.fromJson(String json) =>
      AndroidNotification_NotificationPriority(json);

  @override
  String toString() => 'notificationPriority.$value';
}

/// The enumerated type for the `proxy` field.
final class AndroidNotification_Proxy extends ProtoEnum {
  /// If unspecified, default to `Proxy.IF_PRIORITY_LOWERED`.
  static const proxyUnspecified = AndroidNotification_Proxy(
    'PROXY_UNSPECIFIED',
  );

  /// Try to proxy this notification.
  static const allow = AndroidNotification_Proxy('ALLOW');

  /// Do not proxy this notification.
  static const deny = AndroidNotification_Proxy('DENY');

  /// Only try to proxy this notification if its `AndroidMessagePriority` was lowered from `HIGH` to `NORMAL` on the device.
  static const ifPriorityLowered = AndroidNotification_Proxy(
    'IF_PRIORITY_LOWERED',
  );

  const AndroidNotification_Proxy(super.value);

  factory AndroidNotification_Proxy.fromJson(String json) =>
      AndroidNotification_Proxy(json);

  @override
  String toString() => 'proxy.$value';
}

/// The enumerated type for the `visibility` field.
final class AndroidNotification_Visibility extends ProtoEnum {
  /// If unspecified, default to `Visibility.PRIVATE`.
  static const visibilityUnspecified = AndroidNotification_Visibility(
    'VISIBILITY_UNSPECIFIED',
  );

  /// Show this notification on all lockscreens, but conceal sensitive or private information on secure lockscreens.
  static const private = AndroidNotification_Visibility('PRIVATE');

  /// Show this notification in its entirety on all lockscreens.
  static const public = AndroidNotification_Visibility('PUBLIC');

  /// Do not reveal any part of this notification on a secure lockscreen.
  static const secret = AndroidNotification_Visibility('SECRET');

  const AndroidNotification_Visibility(super.value);

  factory AndroidNotification_Visibility.fromJson(String json) =>
      AndroidNotification_Visibility(json);

  @override
  String toString() => 'visibility.$value';
}

/// [Apple Push Notification Service](https://goo.gl/MXRTPa) specific options.
final class ApnsConfig extends ProtoMessage {
  static const String fullyQualifiedName = '.ApnsConfig';

  /// Options for features provided by the FCM SDK for iOS.
  final ApnsFcmOptions? fcmOptions;

  /// HTTP request headers defined in Apple Push Notification Service. Refer to [APNs request headers](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/sending_notification_requests_to_apns) for supported headers such as `apns-expiration` and `apns-priority`. The backend sets a default value for `apns-expiration` of 30 days and a default value for `apns-priority` of 10 if not explicitly set.
  final Map<String, String>? headers;

  /// Optional. [Apple Live Activity](https://developer.apple.com/design/human-interface-guidelines/live-activities) token to send updates to. This token can either be a push token or [push-to-start](https://developer.apple.com/documentation/activitykit/activity/pushtostarttoken) token from Apple. To start, update, or end a live activity remotely using FCM, construct an [`aps payload`](https://developer.apple.com/documentation/activitykit/starting-and-updating-live-activities-with-activitykit-push-notifications#Construct-the-payload-that-starts-a-Live-Activity) and put it in the [`apns.payload`](https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#ApnsConfig) field.
  final String? liveActivityToken;

  /// APNs payload as a JSON object, including both `aps` dictionary and custom payload. See [Payload Key Reference](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/generating_a_remote_notification). If present, it overrides google.firebase.fcm.v1.Notification.title and google.firebase.fcm.v1.Notification.body.
  final Map<String, Value>? payload;

  ApnsConfig({
    this.fcmOptions,
    this.headers,
    this.liveActivityToken,
    this.payload,
  }) : super(fullyQualifiedName);

  factory ApnsConfig.fromJson(Map<String, dynamic> json) {
    return ApnsConfig(
      fcmOptions: decode(json['fcmOptions'], ApnsFcmOptions.fromJson),
      headers: decodeMap(json['headers']),
      liveActivityToken: json['liveActivityToken'],
      payload: decodeMapMessageCustom(json['payload'], Value.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (fcmOptions != null) 'fcmOptions': fcmOptions!.toJson(),
      if (headers != null) 'headers': headers,
      if (liveActivityToken != null) 'liveActivityToken': liveActivityToken,
      if (payload != null) 'payload': encodeMap(payload),
    };
  }

  @override
  String toString() {
    final contents = [
      if (liveActivityToken != null) 'liveActivityToken=$liveActivityToken',
    ].join(',');
    return 'ApnsConfig($contents)';
  }
}

/// Options for features provided by the FCM SDK for iOS.
final class ApnsFcmOptions extends ProtoMessage {
  static const String fullyQualifiedName = '.ApnsFcmOptions';

  /// Label associated with the message's analytics data.
  final String? analyticsLabel;

  /// Contains the URL of an image that is going to be displayed in a notification. If present, it will override google.firebase.fcm.v1.Notification.image.
  final String? image;

  ApnsFcmOptions({this.analyticsLabel, this.image}) : super(fullyQualifiedName);

  factory ApnsFcmOptions.fromJson(Map<String, dynamic> json) {
    return ApnsFcmOptions(
      analyticsLabel: json['analyticsLabel'],
      image: json['image'],
    );
  }

  @override
  Object toJson() {
    return {
      if (analyticsLabel != null) 'analyticsLabel': analyticsLabel,
      if (image != null) 'image': image,
    };
  }

  @override
  String toString() {
    final contents = [
      if (analyticsLabel != null) 'analyticsLabel=$analyticsLabel',
      if (image != null) 'image=$image',
    ].join(',');
    return 'ApnsFcmOptions($contents)';
  }
}

/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
final class Color extends ProtoMessage {
  static const String fullyQualifiedName = '.Color';

  /// The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).
  final double? alpha;

  /// The amount of blue in the color as a value in the interval [0, 1].
  final double? blue;

  /// The amount of green in the color as a value in the interval [0, 1].
  final double? green;

  /// The amount of red in the color as a value in the interval [0, 1].
  final double? red;

  Color({this.alpha, this.blue, this.green, this.red})
    : super(fullyQualifiedName);

  factory Color.fromJson(Map<String, dynamic> json) {
    return Color(
      alpha: decodeDouble(json['alpha']),
      blue: decodeDouble(json['blue']),
      green: decodeDouble(json['green']),
      red: decodeDouble(json['red']),
    );
  }

  @override
  Object toJson() {
    return {
      if (alpha != null) 'alpha': encodeDouble(alpha),
      if (blue != null) 'blue': encodeDouble(blue),
      if (green != null) 'green': encodeDouble(green),
      if (red != null) 'red': encodeDouble(red),
    };
  }

  @override
  String toString() {
    final contents = [
      if (alpha != null) 'alpha=$alpha',
      if (blue != null) 'blue=$blue',
      if (green != null) 'green=$green',
      if (red != null) 'red=$red',
    ].join(',');
    return 'Color($contents)';
  }
}

/// Platform independent options for features provided by the FCM SDKs.
final class FcmOptions extends ProtoMessage {
  static const String fullyQualifiedName = '.FcmOptions';

  /// Label associated with the message's analytics data.
  final String? analyticsLabel;

  FcmOptions({this.analyticsLabel}) : super(fullyQualifiedName);

  factory FcmOptions.fromJson(Map<String, dynamic> json) {
    return FcmOptions(analyticsLabel: json['analyticsLabel']);
  }

  @override
  Object toJson() {
    return {if (analyticsLabel != null) 'analyticsLabel': analyticsLabel};
  }

  @override
  String toString() {
    final contents = [
      if (analyticsLabel != null) 'analyticsLabel=$analyticsLabel',
    ].join(',');
    return 'FcmOptions($contents)';
  }
}

/// Settings to control notification LED.
final class LightSettings extends ProtoMessage {
  static const String fullyQualifiedName = '.LightSettings';

  /// Required. Set `color` of the LED with [google.type.Color](https://github.com/googleapis/googleapis/blob/master/google/type/color.proto).
  final Color? color;

  /// Required. Along with `light_on_duration `, define the blink rate of LED flashes. Resolution defined by [proto.Duration](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Duration)
  final Duration? lightOffDuration;

  /// Required. Along with `light_off_duration`, define the blink rate of LED flashes. Resolution defined by [proto.Duration](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Duration)
  final Duration? lightOnDuration;

  LightSettings({this.color, this.lightOffDuration, this.lightOnDuration})
    : super(fullyQualifiedName);

  factory LightSettings.fromJson(Map<String, dynamic> json) {
    return LightSettings(
      color: decode(json['color'], Color.fromJson),
      lightOffDuration: decodeCustom(
        json['lightOffDuration'],
        Duration.fromJson,
      ),
      lightOnDuration: decodeCustom(json['lightOnDuration'], Duration.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (color != null) 'color': color!.toJson(),
      if (lightOffDuration != null)
        'lightOffDuration': lightOffDuration!.toJson(),
      if (lightOnDuration != null) 'lightOnDuration': lightOnDuration!.toJson(),
    };
  }

  @override
  String toString() => 'LightSettings()';
}

/// Message to send by Firebase Cloud Messaging Service.
final class Message extends ProtoMessage {
  static const String fullyQualifiedName = '.Message';

  /// Input only. Android specific options for messages sent through [FCM connection server](https://goo.gl/4GLdUl).
  final AndroidConfig? android;

  /// Input only. [Apple Push Notification Service](https://goo.gl/MXRTPa) specific options.
  final ApnsConfig? apns;

  /// Condition to send a message to, e.g. "'foo' in topics && 'bar' in topics".
  final String? condition;

  /// Input only. Arbitrary key/value payload, which must be UTF-8 encoded. The key should not be a reserved word ("from", "message_type", or any word starting with "google." or "gcm.notification."). When sending payloads containing only data fields to iOS devices, only normal priority (`"apns-priority": "5"`) is allowed in [`ApnsConfig`](/docs/reference/fcm/rest/v1/projects.messages#apnsconfig).
  final Map<String, String>? data;

  /// Input only. Template for FCM SDK feature options to use across all platforms.
  final FcmOptions? fcmOptions;

  /// Output Only. The identifier of the message sent, in the format of `projects/*/messages/{message_id}`.
  final String? name;

  /// Input only. Basic notification template to use across all platforms.
  final Notification? notification;

  /// Registration token to send a message to.
  final String? token;

  /// Topic name to send a message to, e.g. "weather". Note: "/topics/" prefix should not be provided.
  final String? topic;

  /// Input only. [Webpush protocol](https://tools.ietf.org/html/rfc8030) options.
  final WebpushConfig? webpush;

  Message({
    this.android,
    this.apns,
    this.condition,
    this.data,
    this.fcmOptions,
    this.name,
    this.notification,
    this.token,
    this.topic,
    this.webpush,
  }) : super(fullyQualifiedName);

  factory Message.fromJson(Map<String, dynamic> json) {
    return Message(
      android: decode(json['android'], AndroidConfig.fromJson),
      apns: decode(json['apns'], ApnsConfig.fromJson),
      condition: json['condition'],
      data: decodeMap(json['data']),
      fcmOptions: decode(json['fcmOptions'], FcmOptions.fromJson),
      name: json['name'],
      notification: decode(json['notification'], Notification.fromJson),
      token: json['token'],
      topic: json['topic'],
      webpush: decode(json['webpush'], WebpushConfig.fromJson),
    );
  }

  @override
  Object toJson() {
    return {
      if (android != null) 'android': android!.toJson(),
      if (apns != null) 'apns': apns!.toJson(),
      if (condition != null) 'condition': condition,
      if (data != null) 'data': data,
      if (fcmOptions != null) 'fcmOptions': fcmOptions!.toJson(),
      if (name != null) 'name': name,
      if (notification != null) 'notification': notification!.toJson(),
      if (token != null) 'token': token,
      if (topic != null) 'topic': topic,
      if (webpush != null) 'webpush': webpush!.toJson(),
    };
  }

  @override
  String toString() {
    final contents = [
      if (condition != null) 'condition=$condition',
      if (name != null) 'name=$name',
      if (token != null) 'token=$token',
      if (topic != null) 'topic=$topic',
    ].join(',');
    return 'Message($contents)';
  }
}

/// Basic notification template to use across all platforms.
final class Notification extends ProtoMessage {
  static const String fullyQualifiedName = '.Notification';

  /// The notification's body text.
  final String? body;

  /// Contains the URL of an image that is going to be downloaded on the device and displayed in a notification. JPEG, PNG, BMP have full support across platforms. Animated GIF and video only work on iOS. WebP and HEIF have varying levels of support across platforms and platform versions. Android has 1MB image size limit. Quota usage and implications/costs for hosting image on Firebase Storage: https://firebase.google.com/pricing
  final String? image;

  /// The notification's title.
  final String? title;

  Notification({this.body, this.image, this.title}) : super(fullyQualifiedName);

  factory Notification.fromJson(Map<String, dynamic> json) {
    return Notification(
      body: json['body'],
      image: json['image'],
      title: json['title'],
    );
  }

  @override
  Object toJson() {
    return {
      if (body != null) 'body': body,
      if (image != null) 'image': image,
      if (title != null) 'title': title,
    };
  }

  @override
  String toString() {
    final contents = [
      if (body != null) 'body=$body',
      if (image != null) 'image=$image',
      if (title != null) 'title=$title',
    ].join(',');
    return 'Notification($contents)';
  }
}

/// Request to send a message to specified target.
final class SendMessageRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.SendMessageRequest';

  /// Required. Message to send.
  final Message? message;

  /// Flag for testing the request without actually delivering the message.
  final bool? validateOnly;

  SendMessageRequest({this.message, this.validateOnly})
    : super(fullyQualifiedName);

  factory SendMessageRequest.fromJson(Map<String, dynamic> json) {
    return SendMessageRequest(
      message: decode(json['message'], Message.fromJson),
      validateOnly: json['validateOnly'],
    );
  }

  @override
  Object toJson() {
    return {
      if (message != null) 'message': message!.toJson(),
      if (validateOnly != null) 'validateOnly': validateOnly,
    };
  }

  @override
  String toString() {
    final contents = [
      if (validateOnly != null) 'validateOnly=$validateOnly',
    ].join(',');
    return 'SendMessageRequest($contents)';
  }
}

/// [Webpush protocol](https://tools.ietf.org/html/rfc8030) options.
final class WebpushConfig extends ProtoMessage {
  static const String fullyQualifiedName = '.WebpushConfig';

  /// Arbitrary key/value payload. If present, it will override google.firebase.fcm.v1.Message.data.
  final Map<String, String>? data;

  /// Options for features provided by the FCM SDK for Web.
  final WebpushFcmOptions? fcmOptions;

  /// HTTP headers defined in webpush protocol. Refer to [Webpush protocol](https://tools.ietf.org/html/rfc8030#section-5) for supported headers, e.g. "TTL": "15".
  final Map<String, String>? headers;

  /// Web Notification options as a JSON object. Supports Notification instance properties as defined in [Web Notification API](https://developer.mozilla.org/en-US/docs/Web/API/Notification). If present, "title" and "body" fields override [google.firebase.fcm.v1.Notification.title] and [google.firebase.fcm.v1.Notification.body].
  final Map<String, Value>? notification;

  WebpushConfig({this.data, this.fcmOptions, this.headers, this.notification})
    : super(fullyQualifiedName);

  factory WebpushConfig.fromJson(Map<String, dynamic> json) {
    return WebpushConfig(
      data: decodeMap(json['data']),
      fcmOptions: decode(json['fcmOptions'], WebpushFcmOptions.fromJson),
      headers: decodeMap(json['headers']),
      notification: decodeMapMessageCustom(
        json['notification'],
        Value.fromJson,
      ),
    );
  }

  @override
  Object toJson() {
    return {
      if (data != null) 'data': data,
      if (fcmOptions != null) 'fcmOptions': fcmOptions!.toJson(),
      if (headers != null) 'headers': headers,
      if (notification != null) 'notification': encodeMap(notification),
    };
  }

  @override
  String toString() => 'WebpushConfig()';
}

/// Options for features provided by the FCM SDK for Web.
final class WebpushFcmOptions extends ProtoMessage {
  static const String fullyQualifiedName = '.WebpushFcmOptions';

  /// Label associated with the message's analytics data.
  final String? analyticsLabel;

  /// The link to open when the user clicks on the notification. For all URL values, HTTPS is required.
  final String? link;

  WebpushFcmOptions({this.analyticsLabel, this.link})
    : super(fullyQualifiedName);

  factory WebpushFcmOptions.fromJson(Map<String, dynamic> json) {
    return WebpushFcmOptions(
      analyticsLabel: json['analyticsLabel'],
      link: json['link'],
    );
  }

  @override
  Object toJson() {
    return {
      if (analyticsLabel != null) 'analyticsLabel': analyticsLabel,
      if (link != null) 'link': link,
    };
  }

  @override
  String toString() {
    final contents = [
      if (analyticsLabel != null) 'analyticsLabel=$analyticsLabel',
      if (link != null) 'link=$link',
    ].join(',');
    return 'WebpushFcmOptions($contents)';
  }
}

/// Synthetic request message for the [send()][.messages.send] method.
final class Messages_SendRequest extends ProtoMessage {
  static const String fullyQualifiedName = '.messages.sendRequest';

  /// Required. It contains the Firebase project id (i.e. the unique identifier for your Firebase project), in the format of `projects/{project_id}`. The numeric project number with no padding is also supported in the format of `projects/{project_number}`.
  final String parent;

  /// Synthetic request body field for the [send()][.messages.send] method.
  final SendMessageRequest body;

  Messages_SendRequest({required this.parent, required this.body})
    : super(fullyQualifiedName);

  factory Messages_SendRequest.fromJson(Map<String, dynamic> json) {
    return Messages_SendRequest(
      parent: json['parent'],
      body: decode(json['body'], SendMessageRequest.fromJson)!,
    );
  }

  @override
  Object toJson() {
    return {'parent': parent, 'body': body.toJson()};
  }

  @override
  String toString() {
    final contents = ['parent=$parent'].join(',');
    return 'sendRequest($contents)';
  }
}
